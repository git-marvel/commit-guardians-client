{
  "totalNumOfCommit": 1139,
  "formatStyleCountInfo": {
    "prefix-style": 110,
    "simple-text-style": 23,
    "template-based": 0
  },
  "totalCommitQualityInfo": {
    "numOfPerfectCommits": 112,
    "totalScore": 88
  },
  "commitWithDiff": [
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "51c00d22c34de84e6d17c53c32fd142a6f5d6543",
      "url": "https://github.com/pmndrs/zustand/commit/51c00d22c34de84e6d17c53c32fd142a6f5d6543",
      "message": "docs(readme.md): change 'npm i' to 'npm install' (#2905)",
      "author": {
        "name": "Wonsuk Choi",
        "email": "sukvvon@gmail.com",
        "date": "2024-12-16T12:18:55Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/66409882?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+npm install zustand\n",
            "-": "-npm i zustand\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "a958de910fb49392d5407eb0a9a776ec959ce8c5",
      "url": "https://github.com/pmndrs/zustand/commit/a958de910fb49392d5407eb0a9a776ec959ce8c5",
      "message": "docs: typo & improve (#2891)\n\n* chore: typo\n\n* docs: update",
      "author": {
        "name": "𝑾𝒖𝒙𝒉",
        "email": "wxh16144@qq.com",
        "date": "2024-12-10T13:48:39Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/32004925?v=4"
      },
      "diffObj": {
        "a/docs/apis/create-with-equality-fn.md": [
          {
            "+": "+  const age = useAgeStore((state) => state.age)\n",
            "-": "-  const age = useAgeStore((state) => stage.age)\n"
          }
        ],
        "a/docs/hooks/use-store-with-equality-fn.md": [
          {
            "+": "+    <CounterStoresContext.Provider value={stores}>\n+      {children}\n+    </CounterStoresContext.Provider>\n",
            "-": "-    <CounterStoresContext.Provider>{children}</CounterStoresContext.Provider>\n"
          }
        ],
        "a/docs/hooks/use-store.md": [
          {
            "+": "+    <CounterStoresContext.Provider value={stores}>\n+      {children}\n+    </CounterStoresContext.Provider>\n",
            "-": "-    <CounterStoresContext.Provider>{children}</CounterStoresContext.Provider>\n"
          }
        ]
      },
      "numOfFiles": 3,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "3fdf3c9b2005df3f17b030a66b8a76ac8ab64f96",
      "url": "https://github.com/pmndrs/zustand/commit/3fdf3c9b2005df3f17b030a66b8a76ac8ab64f96",
      "message": "docs(CONTRIBUTING.md): change 'pnpm' to 'pnpm install' for installing dependencies (#2890)",
      "author": {
        "name": "Wonsuk Choi",
        "email": "sukvvon@gmail.com",
        "date": "2024-12-10T02:13:42Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/66409882?v=4"
      },
      "diffObj": {
        "a/CONTRIBUTING.md": [
          {
            "+": "+- Install dependencies by running `pnpm install`;\n",
            "-": "-- Install dependencies by running `pnpm`;\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "5a8842fbc3bda64fa9e59111e49697caff6fa64c",
      "url": "https://github.com/pmndrs/zustand/commit/5a8842fbc3bda64fa9e59111e49697caff6fa64c",
      "message": "test: add jest-dom matchers and eslint plugin (#2850)",
      "author": {
        "name": "Marcin Kulpa",
        "email": "marcin.kulpa@gmail.com",
        "date": "2024-11-13T02:06:56Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2963053?v=4"
      },
      "diffObj": {
        "a/.eslintrc.json": [
          {
            "+": "+    \"jest-dom\",\n",
            "-": ""
          },
          {
            "+": "+        \"plugin:jest-dom/recommended\",\n",
            "-": ""
          }
        ],
        "a/package.json": [
          {
            "+": "+    \"@testing-library/jest-dom\": \"^6.6.3\",\n",
            "-": ""
          },
          {
            "+": "+    \"eslint-plugin-jest-dom\": \"^5.4.0\",\n",
            "-": ""
          }
        ],
        "a/pnpm-lock.yaml": [
          {
            "+": "+  '@testing-library/jest-dom':\n+    specifier: ^6.6.3\n+    version: 6.6.3\n",
            "-": ""
          },
          {
            "+": "+  eslint-plugin-jest-dom:\n+    specifier: ^5.4.0\n+    version: 5.4.0(@testing-library/dom@10.4.0)(eslint@8.57.0)\n",
            "-": ""
          },
          {
            "+": "+  /@adobe/css-tools@4.4.0:\n+    resolution: {integrity: sha512-Ff9+ksdQQB3rMncgqDK78uLznstjyfIf2Arnh22pW8kBpLs6rpKDwgnZT46hin5Hl1WzazzK64DOrhSwYpS7bQ==}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /@testing-library/jest-dom@6.6.3:\n+    resolution: {integrity: sha512-IteBhl4XqYNkM54f4ejhLRJiZNqcSCoXUOG2CPK7qbD322KjQozM4kHQOfkG2oln9b9HTYqs+Sae8vBATubxxA==}\n+    engines: {node: '>=14', npm: '>=6', yarn: '>=1'}\n+    dependencies:\n+      '@adobe/css-tools': 4.4.0\n+      aria-query: 5.3.0\n+      chalk: 3.0.0\n+      css.escape: 1.5.1\n+      dom-accessibility-api: 0.6.3\n+      lodash: 4.17.21\n+      redent: 3.0.0\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /chalk@3.0.0:\n+    resolution: {integrity: sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==}\n+    engines: {node: '>=8'}\n+    dependencies:\n+      ansi-styles: 4.3.0\n+      supports-color: 7.2.0\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /css.escape@1.5.1:\n+    resolution: {integrity: sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /dom-accessibility-api@0.6.3:\n+    resolution: {integrity: sha512-7ZgogeTnjuHbo+ct10G9Ffp0mif17idi0IyWNVA/wcwcm7NPOD/WEHVP3n7n3MhXqxoIYm8d6MuZohYWIZ4T3w==}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /eslint-plugin-jest-dom@5.4.0(@testing-library/dom@10.4.0)(eslint@8.57.0):\n+    resolution: {integrity: sha512-yBqvFsnpS5Sybjoq61cJiUsenRkC9K32hYQBFS9doBR7nbQZZ5FyO+X7MlmfM1C48Ejx/qTuOCgukDUNyzKZ7A==}\n+    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0, npm: '>=6', yarn: '>=1'}\n+    peerDependencies:\n+      '@testing-library/dom': ^8.0.0 || ^9.0.0 || ^10.0.0\n+      eslint: ^6.8.0 || ^7.0.0 || ^8.0.0 || ^9.0.0\n+    peerDependenciesMeta:\n+      '@testing-library/dom':\n+        optional: true\n+    dependencies:\n+      '@babel/runtime': 7.26.0\n+      '@testing-library/dom': 10.4.0\n+      eslint: 8.57.0\n+      requireindex: 1.2.0\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /indent-string@4.0.0:\n+    resolution: {integrity: sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==}\n+    engines: {node: '>=8'}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /lodash@4.17.21:\n+    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /min-indent@1.0.1:\n+    resolution: {integrity: sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==}\n+    engines: {node: '>=4'}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /redent@3.0.0:\n+    resolution: {integrity: sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==}\n+    engines: {node: '>=8'}\n+    dependencies:\n+      indent-string: 4.0.0\n+      strip-indent: 3.0.0\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /requireindex@1.2.0:\n+    resolution: {integrity: sha512-L9jEkOi3ASd9PYit2cwRfyppc9NoABujTP8/5gFcbERmo5jUoAKovIC3fsF17pkTnGsrByysqX+Kxd2OTNI1ww==}\n+    engines: {node: '>=0.10.5'}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /strip-indent@3.0.0:\n+    resolution: {integrity: sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==}\n+    engines: {node: '>=8'}\n+    dependencies:\n+      min-indent: 1.0.1\n+    dev: true\n+\n",
            "-": ""
          }
        ],
        "a/tests/setup.ts": [
          {
            "+": "+import '@testing-library/jest-dom/vitest'\n",
            "-": ""
          }
        ],
        "a/tests/shallow.test.tsx": [
          {
            "+": "+    expect(screen.getByTestId('test-shallow')).toHaveTextContent('a,b,c')\n",
            "-": "-    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c')\n"
          },
          {
            "+": "+    expect(screen.getByTestId('test-shallow')).toHaveTextContent('a,b,c,d')\n",
            "-": "-    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c,d')\n"
          },
          {
            "+": "+    expect(screen.getByTestId('test-shallow')).toHaveTextContent('a,b,c,0')\n",
            "-": "-    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c,0')\n"
          },
          {
            "+": "+    expect(screen.getByTestId('test-shallow')).toHaveTextContent('a,b,c,1')\n",
            "-": "-    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c,1')\n"
          }
        ],
        "a/tests/ssr.test.tsx": [
          {
            "+": "+      expect(container).toHaveTextContent(/bears: 0/)\n",
            "-": "-      expect(container.textContent).toContain('bears: 0')\n"
          },
          {
            "+": "+      expect(bearCountText).toBeInTheDocument()\n",
            "-": "-      expect(bearCountText).not.toBeNull()\n"
          },
          {
            "+": "+      expect(container).toHaveTextContent(/bears: 0/)\n",
            "-": "-      expect(container.textContent).toContain('bears: 0')\n"
          },
          {
            "+": "+      expect(bearCountText).toBeInTheDocument()\n",
            "-": "-      expect(bearCountText).not.toBeNull()\n"
          }
        ],
        "a/tsconfig.json": [
          {
            "+": "+    \"types\": [\"@testing-library/jest-dom\"],\n",
            "-": ""
          }
        ],
        "a/vitest.config.ts": [
          {
            "+": "+    setupFiles: ['tests/setup.ts'],\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 8,
      "numOfChanges": 29,
      "qualityScore": 37
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "8b9c374565414ec7701c9714153c06457ef2d744",
      "url": "https://github.com/pmndrs/zustand/commit/8b9c374565414ec7701c9714153c06457ef2d744",
      "message": "test: use @vitest/eslint-plugin (#2845)",
      "author": {
        "name": "Marcin Kulpa",
        "email": "marcin.kulpa@gmail.com",
        "date": "2024-11-10T01:27:01Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2963053?v=4"
      },
      "diffObj": {
        "a/.eslintrc.json": [
          {
            "+": "+    \"@vitest\",\n",
            "-": "-    \"vitest\",\n"
          },
          {
            "-": "-    \"vitest/consistent-test-it\": [\n-      \"error\",\n-      { \"fn\": \"it\", \"withinDescribe\": \"it\" }\n-    ],\n",
            "+": ""
          },
          {
            "+": "+      \"extends\": [\n+        \"plugin:testing-library/react\",\n+        \"plugin:@vitest/legacy-recommended\"\n+      ],\n",
            "-": "-      \"extends\": [\"plugin:testing-library/react\"],\n"
          },
          {
            "+": "+        \"@vitest/expect-expect\": \"off\",\n+        \"@vitest/consistent-test-it\": [\n+          \"error\",\n+          { \"fn\": \"it\", \"withinDescribe\": \"it\" }\n+        ],\n",
            "-": ""
          }
        ],
        "a/package.json": [
          {
            "+": "+    \"@vitest/eslint-plugin\": \"^1.1.7\",\n",
            "-": ""
          },
          {
            "-": "-    \"eslint-plugin-vitest\": \"^0.5.4\",\n",
            "+": ""
          }
        ],
        "a/pnpm-lock.yaml": [
          {
            "+": "+  '@vitest/eslint-plugin':\n+    specifier: ^1.1.7\n+    version: 1.1.7(@typescript-eslint/utils@8.12.2)(eslint@8.57.0)(typescript@5.6.3)(vitest@2.1.4)\n",
            "-": ""
          },
          {
            "-": "-  eslint-plugin-vitest:\n-    specifier: ^0.5.4\n-    version: 0.5.4(@typescript-eslint/eslint-plugin@8.12.2)(eslint@8.57.0)(typescript@5.6.3)(vitest@2.1.4)\n",
            "+": ""
          },
          {
            "-": "-  /@typescript-eslint/scope-manager@7.18.0:\n-    resolution: {integrity: sha512-jjhdIE/FPF2B7Z1uzc6i3oWKbGcHb87Qw7AWj6jmEqNOfDFbJWtjt/XfwCpvNkpGWlcJaog5vTR+VV8+w9JflA==}\n-    engines: {node: ^18.18.0 || >=20.0.0}\n-    dependencies:\n-      '@typescript-eslint/types': 7.18.0\n-      '@typescript-eslint/visitor-keys': 7.18.0\n-    dev: true\n-\n",
            "+": ""
          },
          {
            "-": "-  /@typescript-eslint/types@7.18.0:\n-    resolution: {integrity: sha512-iZqi+Ds1y4EDYUtlOOC+aUmxnE9xS/yCigkjA7XpTKV6nCBd3Hp/PRGGmdwnfkV2ThMyYldP1wRpm/id99spTQ==}\n-    engines: {node: ^18.18.0 || >=20.0.0}\n-    dev: true\n-\n",
            "+": ""
          },
          {
            "-": "-  /@typescript-eslint/typescript-estree@7.18.0(typescript@5.6.3):\n-    resolution: {integrity: sha512-aP1v/BSPnnyhMHts8cf1qQ6Q1IFwwRvAQGRvBFkWlo3/lH29OXA3Pts+c10nxRxIBrDnoMqzhgdwVe5f2D6OzA==}\n-    engines: {node: ^18.18.0 || >=20.0.0}\n-    peerDependencies:\n-      typescript: '*'\n-    peerDependenciesMeta:\n-      typescript:\n-        optional: true\n-    dependencies:\n-      '@typescript-eslint/types': 7.18.0\n-      '@typescript-eslint/visitor-keys': 7.18.0\n-      debug: 4.3.7\n-      globby: 11.1.0\n-      is-glob: 4.0.3\n-      minimatch: 9.0.5\n-      semver: 7.6.3\n-      ts-api-utils: 1.3.0(typescript@5.6.3)\n-      typescript: 5.6.3\n-    transitivePeerDependencies:\n-      - supports-color\n-    dev: true\n-\n",
            "+": ""
          },
          {
            "-": "-  /@typescript-eslint/utils@7.18.0(eslint@8.57.0)(typescript@5.6.3):\n-    resolution: {integrity: sha512-kK0/rNa2j74XuHVcoCZxdFBMF+aq/vH83CXAOHieC+2Gis4mF8jJXT5eAfyD3K0sAxtPuwxaIOIOvhwzVDt/kw==}\n-    engines: {node: ^18.18.0 || >=20.0.0}\n-    peerDependencies:\n-      eslint: ^8.56.0\n-    dependencies:\n-      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.0)\n-      '@typescript-eslint/scope-manager': 7.18.0\n-      '@typescript-eslint/types': 7.18.0\n-      '@typescript-eslint/typescript-estree': 7.18.0(typescript@5.6.3)\n-      eslint: 8.57.0\n-    transitivePeerDependencies:\n-      - supports-color\n-      - typescript\n-    dev: true\n-\n",
            "+": ""
          },
          {
            "-": "-  /@typescript-eslint/visitor-keys@7.18.0:\n-    resolution: {integrity: sha512-cDF0/Gf81QpY3xYyJKDV14Zwdmid5+uuENhjH2EqFaF0ni+yAyq/LzMaIJdhNJXZI7uLzwIlA+V7oWoyn6Curg==}\n-    engines: {node: ^18.18.0 || >=20.0.0}\n-    dependencies:\n-      '@typescript-eslint/types': 7.18.0\n-      eslint-visitor-keys: 3.4.3\n-    dev: true\n-\n",
            "+": ""
          },
          {
            "+": "+  /@vitest/eslint-plugin@1.1.7(@typescript-eslint/utils@8.12.2)(eslint@8.57.0)(typescript@5.6.3)(vitest@2.1.4):\n+    resolution: {integrity: sha512-pTWGW3y6lH2ukCuuffpan6kFxG6nIuoesbhMiQxskyQMRcCN5t9SXsKrNHvEw3p8wcCsgJoRqFZVkOTn6TjclA==}\n+    peerDependencies:\n+      '@typescript-eslint/utils': '>= 8.0'\n+      eslint: '>= 8.57.0'\n+      typescript: '>= 5.0.0'\n+      vitest: '*'\n+    peerDependenciesMeta:\n+      typescript:\n+        optional: true\n+      vitest:\n+        optional: true\n+    dependencies:\n+      '@typescript-eslint/utils': 8.12.2(eslint@8.57.0)(typescript@5.6.3)\n+      eslint: 8.57.0\n+      typescript: 5.6.3\n+      vitest: 2.1.4(@types/node@22.8.4)(@vitest/ui@2.1.4)(jsdom@25.0.1)\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "-": "-  /eslint-plugin-vitest@0.5.4(@typescript-eslint/eslint-plugin@8.12.2)(eslint@8.57.0)(typescript@5.6.3)(vitest@2.1.4):\n-    resolution: {integrity: sha512-um+odCkccAHU53WdKAw39MY61+1x990uXjSPguUCq3VcEHdqJrOb8OTMrbYlY6f9jAKx7x98kLVlIe3RJeJqoQ==}\n-    engines: {node: ^18.0.0 || >= 20.0.0}\n-    peerDependencies:\n-      '@typescript-eslint/eslint-plugin': '*'\n-      eslint: ^8.57.0 || ^9.0.0\n-      vitest: '*'\n-    peerDependenciesMeta:\n-      '@typescript-eslint/eslint-plugin':\n-        optional: true\n-      vitest:\n-        optional: true\n-    dependencies:\n-      '@typescript-eslint/eslint-plugin': 8.12.2(@typescript-eslint/parser@8.12.2)(eslint@8.57.0)(typescript@5.6.3)\n-      '@typescript-eslint/utils': 7.18.0(eslint@8.57.0)(typescript@5.6.3)\n-      eslint: 8.57.0\n-      vitest: 2.1.4(@types/node@22.8.4)(@vitest/ui@2.1.4)(jsdom@25.0.1)\n-    transitivePeerDependencies:\n-      - supports-color\n-      - typescript\n-    dev: true\n-\n",
            "+": ""
          }
        ],
        "a/tests/devtools.test.tsx": [
          {
            "+": "+      it('updates state without recording and inits with `message.state`', async () => {\n",
            "-": "-      it('it updates state without recording and inits with `message.state`', async () => {\n"
          },
          {
            "+": "+      it('updates state without recording with `message.state`', async () => {\n",
            "-": "-      it('it updates state without recording with `message.state`', async () => {\n"
          },
          {
            "+": "+      it('updates state without recording with `message.state`', async () => {\n",
            "-": "-      it('it updates state without recording with `message.state`', async () => {\n"
          },
          {
            "+": "+      it('updates state without recording and inits with `message.state, connections are isolated from each other`', async () => {\n",
            "-": "-      it('it updates state without recording and inits with `message.state, connections are isolated from each other`', async () => {\n"
          },
          {
            "+": "+      it('updates state without recording with `message.state`, connections are isolated from each other', async () => {\n",
            "-": "-      it('it updates state without recording with `message.state`, connections are isolated from each other', async () => {\n"
          },
          {
            "+": "+      it('updates state without recording with `message.state`, connections are isolated from each other', async () => {\n",
            "-": "-      it('it updates state without recording with `message.state`, connections are isolated from each other', async () => {\n"
          }
        ]
      },
      "numOfFiles": 4,
      "numOfChanges": 21,
      "qualityScore": 25
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "f689d78a31757f089380c22a002518d77b8cd77a",
      "url": "https://github.com/pmndrs/zustand/commit/f689d78a31757f089380c22a002518d77b8cd77a",
      "message": "test: incorporate eslint-plugin-testing-library and fix reported issues (#2844)",
      "author": {
        "name": "Marcin Kulpa",
        "email": "marcin.kulpa@gmail.com",
        "date": "2024-11-09T00:46:15Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2963053?v=4"
      },
      "diffObj": {
        "a/.eslintrc.json": [
          {
            "+": "+    \"testing-library\",\n",
            "-": ""
          },
          {
            "+": "+      \"extends\": [\"plugin:testing-library/react\"],\n",
            "-": ""
          },
          {
            "+": "+        \"testing-library/no-node-access\": \"off\",\n",
            "-": ""
          }
        ],
        "a/package.json": [
          {
            "+": "+    \"eslint-plugin-testing-library\": \"^6.4.0\",\n",
            "-": ""
          }
        ],
        "a/pnpm-lock.yaml": [
          {
            "+": "+  eslint-plugin-testing-library:\n+    specifier: ^6.4.0\n+    version: 6.4.0(eslint@8.57.0)(typescript@5.6.3)\n",
            "-": ""
          },
          {
            "+": "+  /@types/json-schema@7.0.15:\n+    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /@types/semver@7.5.8:\n+    resolution: {integrity: sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /@typescript-eslint/scope-manager@5.62.0:\n+    resolution: {integrity: sha512-VXuvVvZeQCQb5Zgf4HAxc04q5j+WrNAtNh9OwCsCgpKqESMTu3tF/jhZ3xG6T4NZwWl65Bg8KuS2uEvhSfLl0w==}\n+    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n+    dependencies:\n+      '@typescript-eslint/types': 5.62.0\n+      '@typescript-eslint/visitor-keys': 5.62.0\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /@typescript-eslint/types@5.62.0:\n+    resolution: {integrity: sha512-87NVngcbVXUahrRTqIK27gD2t5Cu1yuCXxbLcFtCzZGlfyVWWh8mLHkoxzjsB6DDNnvdL+fW8MiwPEJyGJQDgQ==}\n+    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /@typescript-eslint/typescript-estree@5.62.0(typescript@5.6.3):\n+    resolution: {integrity: sha512-CmcQ6uY7b9y694lKdRB8FEel7JbU/40iSAPomu++SjLMntB+2Leay2LO6i8VnJk58MtE9/nQSFIH6jpyRWyYzA==}\n+    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n+    peerDependencies:\n+      typescript: '*'\n+    peerDependenciesMeta:\n+      typescript:\n+        optional: true\n+    dependencies:\n+      '@typescript-eslint/types': 5.62.0\n+      '@typescript-eslint/visitor-keys': 5.62.0\n+      debug: 4.3.7\n+      globby: 11.1.0\n+      is-glob: 4.0.3\n+      semver: 7.6.3\n+      tsutils: 3.21.0(typescript@5.6.3)\n+      typescript: 5.6.3\n+    transitivePeerDependencies:\n+      - supports-color\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /@typescript-eslint/utils@5.62.0(eslint@8.57.0)(typescript@5.6.3):\n+    resolution: {integrity: sha512-n8oxjeb5aIbPFEtmQxQYOLI0i9n5ySBEY/ZEHHZqKQSFnxio1rv6dthascc9dLuwrL0RC5mPCxB7vnAVGAYWAQ==}\n+    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n+    peerDependencies:\n+      eslint: ^6.0.0 || ^7.0.0 || ^8.0.0\n+    dependencies:\n+      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.0)\n+      '@types/json-schema': 7.0.15\n+      '@types/semver': 7.5.8\n+      '@typescript-eslint/scope-manager': 5.62.0\n+      '@typescript-eslint/types': 5.62.0\n+      '@typescript-eslint/typescript-estree': 5.62.0(typescript@5.6.3)\n+      eslint: 8.57.0\n+      eslint-scope: 5.1.1\n+      semver: 7.6.3\n+    transitivePeerDependencies:\n+      - supports-color\n+      - typescript\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /@typescript-eslint/visitor-keys@5.62.0:\n+    resolution: {integrity: sha512-07ny+LHRzQXepkGg6w0mFY41fVUNBrL2Roj/++7V1txKugfjm/Ci/qSND03r2RhlJhJYMcTn9AhhSSqQp0Ysyw==}\n+    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n+    dependencies:\n+      '@typescript-eslint/types': 5.62.0\n+      eslint-visitor-keys: 3.4.3\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /eslint-plugin-testing-library@6.4.0(eslint@8.57.0)(typescript@5.6.3):\n+    resolution: {integrity: sha512-yeWF+YgCgvNyPNI9UKnG0FjeE2sk93N/3lsKqcmR8dSfeXJwFT5irnWo7NjLf152HkRzfoFjh3LsBUrhvFz4eA==}\n+    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0, npm: '>=6'}\n+    peerDependencies:\n+      eslint: ^7.5.0 || ^8.0.0 || ^9.0.0\n+    dependencies:\n+      '@typescript-eslint/utils': 5.62.0(eslint@8.57.0)(typescript@5.6.3)\n+      eslint: 8.57.0\n+    transitivePeerDependencies:\n+      - supports-color\n+      - typescript\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /eslint-scope@5.1.1:\n+    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}\n+    engines: {node: '>=8.0.0'}\n+    dependencies:\n+      esrecurse: 4.3.0\n+      estraverse: 4.3.0\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /estraverse@4.3.0:\n+    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}\n+    engines: {node: '>=4.0'}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /tslib@1.14.1:\n+    resolution: {integrity: sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==}\n+    dev: true\n+\n",
            "-": ""
          },
          {
            "+": "+  /tsutils@3.21.0(typescript@5.6.3):\n+    resolution: {integrity: sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==}\n+    engines: {node: '>= 6'}\n+    peerDependencies:\n+      typescript: '>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta'\n+    dependencies:\n+      tslib: 1.14.1\n+      typescript: 5.6.3\n+    dev: true\n+\n",
            "-": ""
          }
        ],
        "a/tests/basic.test.tsx": [
          {
            "+": "+  render(\n",
            "-": "-  const { findByText } = render(\n"
          }
        ],
        "a/tests/persistAsync.test.tsx": [
          {
            "+": "+\n",
            "-": ""
          },
          {
            "+": "+    })\n+\n+    await waitFor(() => {\n",
            "-": ""
          }
        ],
        "a/tests/shallow.test.tsx": [
          {
            "+": "+import { act, fireEvent, render, screen } from '@testing-library/react'\n",
            "-": "-import { act, fireEvent, render } from '@testing-library/react'\n"
          },
          {
            "+": "+    const { rerender } = render(\n",
            "-": "-    const res = render(\n"
          },
          {
            "+": "+    fireEvent.click(screen.getByTestId('test-shallow'))\n",
            "-": "-    fireEvent.click(res.getByTestId('test-shallow'))\n"
          },
          {
            "+": "+    rerender(\n",
            "-": "-    res.rerender(\n"
          },
          {
            "+": "+    fireEvent.click(screen.getByTestId('test-shallow'))\n",
            "-": "-    fireEvent.click(res.getByTestId('test-shallow'))\n"
          },
          {
            "+": "+    const { rerender } = render(\n",
            "-": "-    const res = render(\n"
          },
          {
            "+": "+    fireEvent.click(screen.getByTestId('test-shallow'))\n",
            "-": "-    fireEvent.click(res.getByTestId('test-shallow'))\n"
          },
          {
            "+": "+    rerender(\n",
            "-": "-    res.rerender(\n"
          },
          {
            "+": "+    fireEvent.click(screen.getByTestId('test-shallow'))\n",
            "-": "-    fireEvent.click(res.getByTestId('test-shallow'))\n"
          },
          {
            "+": "+    render(<TestShallow />)\n",
            "-": "-    const res = render(<TestShallow />)\n"
          },
          {
            "+": "+    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c')\n",
            "-": "-    expect(res.getByTestId('test-shallow').textContent).toBe('a,b,c')\n"
          },
          {
            "+": "+    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c,d')\n",
            "-": "-    expect(res.getByTestId('test-shallow').textContent).toBe('a,b,c,d')\n"
          },
          {
            "+": "+    render(<TestShallowWithState />)\n",
            "-": "-    const res = render(<TestShallowWithState />)\n"
          },
          {
            "+": "+    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c,0')\n",
            "-": "-    expect(res.getByTestId('test-shallow').textContent).toBe('a,b,c,0')\n"
          },
          {
            "+": "+    fireEvent.click(screen.getByTestId('test-shallow'))\n",
            "-": "-    fireEvent.click(res.getByTestId('test-shallow'))\n"
          },
          {
            "+": "+    expect(screen.getByTestId('test-shallow').textContent).toBe('a,b,c,1')\n",
            "-": "-    expect(res.getByTestId('test-shallow').textContent).toBe('a,b,c,1')\n"
          }
        ],
        "a/tests/ssr.test.tsx": [
          {
            "+": "+      const view = renderToString(\n",
            "-": "-      const markup = renderToString(\n"
          },
          {
            "+": "+      container.innerHTML = view\n",
            "-": "-      container.innerHTML = markup\n"
          },
          {
            "+": "+      const view = renderToString(\n",
            "-": "-      const markup = renderToString(\n"
          },
          {
            "+": "+      container.innerHTML = view\n",
            "-": "-      container.innerHTML = markup\n"
          }
        ]
      },
      "numOfFiles": 7,
      "numOfChanges": 40,
      "qualityScore": 57
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "978205802972101aa90ad680acb0c04ec9931e4a",
      "url": "https://github.com/pmndrs/zustand/commit/978205802972101aa90ad680acb0c04ec9931e4a",
      "message": "docs: fix typo in tutorial-tic-tac-toe.md (#2836)",
      "author": {
        "name": "ytraddan",
        "email": "1nightshelter@gmail.com",
        "date": "2024-11-05T16:30:26Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/175300348?v=4"
      },
      "diffObj": {
        "a/docs/guides/tutorial-tic-tac-toe.md": [
          {
            "+": "+`useGameStore` declares a `squares` state that's initially set to that array. Each entry in the\n",
            "-": "-`useSquaresStore` declares a `squares` state that's initially set to that array. Each entry in the\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "dcc4c098ab07cf11583a4afbffd046cd68a39005",
      "url": "https://github.com/pmndrs/zustand/commit/dcc4c098ab07cf11583a4afbffd046cd68a39005",
      "message": "test: use screen exposed by React Testing Library (#2832)",
      "author": {
        "name": "Marcin Kulpa",
        "email": "marcin.kulpa@gmail.com",
        "date": "2024-11-04T04:17:52Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2963053?v=4"
      },
      "diffObj": {
        "a/tests/basic.test.tsx": [
          {
            "+": "+import { act, fireEvent, render, screen } from '@testing-library/react'\n",
            "-": "-import { act, fireEvent, render } from '@testing-library/react'\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { findByText } = render(\n"
          },
          {
            "+": "+  await screen.findByText('count: 1')\n",
            "-": "-  await findByText('count: 1')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { findByText } = render(\n"
          },
          {
            "+": "+  await screen.findByText('count: 1')\n",
            "-": "-  await findByText('count: 1')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { findByText } = render(\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 1, value: 0')\n",
            "-": "-  await findByText('renderCount: 1, value: 0')\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 1, value: 0')\n",
            "-": "-  await findByText('renderCount: 1, value: 0')\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 2, value: 2')\n",
            "-": "-  await findByText('renderCount: 2, value: 2')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { getByText, findByText } = render(\n"
          },
          {
            "+": "+  fireEvent.click(screen.getByText('button'))\n",
            "-": "-  fireEvent.click(getByText('button'))\n"
          },
          {
            "+": "+  await screen.findByText('count: 1')\n",
            "-": "-  await findByText('count: 1')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { findByText } = render(\n"
          },
          {
            "+": "+  await screen.findByText('count: 2')\n",
            "-": "-  await findByText('count: 2')\n"
          },
          {
            "+": "+  const { rerender } = render(\n",
            "-": "-  const { findByText, rerender } = render(\n"
          },
          {
            "+": "+  await screen.findByText('one')\n",
            "-": "-  await findByText('one')\n"
          },
          {
            "+": "+  await screen.findByText('two')\n",
            "-": "-  await findByText('two')\n"
          },
          {
            "+": "+  const { rerender } = render(\n",
            "-": "-  const { findByText, rerender } = render(\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 2, value: 0')\n",
            "-": "-  await findByText('renderCount: 2, value: 0')\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 3, value: 0')\n",
            "-": "-  await findByText('renderCount: 3, value: 0')\n"
          },
          {
            "+": "+  const { rerender } = render(\n",
            "-": "-  const { findByText, rerender } = render(\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 1, value: {\"value\":0}')\n",
            "-": "-  await findByText('renderCount: 1, value: {\"value\":0}')\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 2, value: 0')\n",
            "-": "-  await findByText('renderCount: 2, value: 0')\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 3, value: 0')\n",
            "-": "-  await findByText('renderCount: 3, value: 0')\n"
          },
          {
            "+": "+  await screen.findByText('renderCount: 4, value: 1')\n",
            "-": "-  await findByText('renderCount: 4, value: 1')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { findByText } = render(\n"
          },
          {
            "+": "+\n+  await screen.findByText('no error')\n",
            "-": "-  await findByText('no error')\n"
          },
          {
            "+": "+  await screen.findByText('errored')\n",
            "-": "-  await findByText('errored')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { findByText } = render(\n"
          },
          {
            "+": "+\n+  await screen.findByText('no error')\n",
            "-": "-  await findByText('no error')\n"
          },
          {
            "+": "+  await screen.findByText('errored')\n",
            "-": "-  await findByText('errored')\n"
          },
          {
            "+": "+  const { rerender } = render(\n",
            "-": "-  const { rerender, findByText } = render(\n"
          },
          {
            "+": "+  await screen.findByText('static: 1')\n",
            "-": "-  await findByText('static: 1')\n"
          },
          {
            "+": "+  await screen.findByText('static: 1')\n",
            "-": "-  await findByText('static: 1')\n"
          },
          {
            "+": "+  await screen.findByText('static: 2')\n",
            "-": "-  await findByText('static: 2')\n"
          },
          {
            "+": "+  const { rerender } = render(\n",
            "-": "-  const { rerender, findByText } = render(\n"
          },
          {
            "+": "+  await screen.findByText('inline: 1')\n+  await screen.findByText('static: 1')\n",
            "-": "-  await findByText('inline: 1')\n-  await findByText('static: 1')\n"
          },
          {
            "+": "+  await screen.findByText('inline: 2')\n+  await screen.findByText('static: 1')\n",
            "-": "-  await findByText('inline: 2')\n-  await findByText('static: 1')\n"
          },
          {
            "+": "+  await screen.findByText('inline: 4')\n+  await screen.findByText('static: 2')\n",
            "-": "-  await findByText('inline: 4')\n-  await findByText('static: 2')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { getByText, findByText } = render(\n"
          },
          {
            "+": "+  fireEvent.click(screen.getByText('change state'))\n",
            "-": "-  fireEvent.click(getByText('change state'))\n"
          },
          {
            "+": "+  await screen.findByText('child 3')\n",
            "-": "-  await findByText('child 3')\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { findAllByText } = render(\n"
          },
          {
            "+": "+  expect((await screen.findAllByText('count: 1')).length).toBe(2)\n",
            "-": "-  expect((await findAllByText('count: 1')).length).toBe(2)\n"
          },
          {
            "+": "+  expect((await screen.findAllByText('count: 2')).length).toBe(2)\n",
            "-": "-  expect((await findAllByText('count: 2')).length).toBe(2)\n"
          },
          {
            "+": "+  const { rerender } = render(\n",
            "-": "-  const { findAllByText, rerender } = render(\n"
          },
          {
            "+": "+  expect((await screen.findAllByText('count1: 1')).length).toBe(2)\n+  expect((await screen.findAllByText('count2: 1')).length).toBe(1)\n",
            "-": "-  expect((await findAllByText('count1: 1')).length).toBe(2)\n-  expect((await findAllByText('count2: 1')).length).toBe(1)\n"
          },
          {
            "+": "+  render(\n",
            "-": "-  const { getByText, findByText } = render(\n"
          },
          {
            "+": "+  await screen.findByText('count: 1')\n",
            "-": "-  await findByText('count: 1')\n"
          },
          {
            "+": "+  fireEvent.click(screen.getByText('button'))\n+  await screen.findByText('count: 2')\n",
            "-": "-  fireEvent.click(getByText('button'))\n-  await findByText('count: 2')\n"
          },
          {
            "+": "+  await screen.findByText('str: undefined')\n",
            "-": "-  await findByText('str: undefined')\n"
          }
        ],
        "a/tests/persistAsync.test.tsx": [
          {
            "+": "+import { act, render, screen, waitFor } from '@testing-library/react'\n",
            "-": "-import { act, render, waitFor } from '@testing-library/react'\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 0, name: empty')\n+    await screen.findByText('count: 42, name: test-storage')\n",
            "-": "-    await findByText('count: 0, name: empty')\n-    await findByText('count: 42, name: test-storage')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 0')\n",
            "-": "-    await findByText('count: 0')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+\n+    await screen.findByText('count: 0')\n",
            "-": "-    await findByText('count: 0')\n"
          },
          {
            "+": "+    await screen.findByText('count: 42')\n",
            "-": "-    await findByText('count: 42')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText: findByText2 } = render(\n"
          },
          {
            "+": "+\n+    await screen.findByText('count: 42')\n",
            "-": "-    await findByText2('count: 42')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 0')\n+    await screen.findByText('count: 99')\n",
            "-": "-    await findByText('count: 0')\n-    await findByText('count: 99')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 42')\n+    await screen.findByText('name: test')\n",
            "-": "-    await findByText('count: 42')\n-    await findByText('name: test')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 0')\n",
            "-": "-    await findByText('count: 0')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 0')\n",
            "-": "-    await findByText('count: 0')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 1')\n",
            "-": "-    await findByText('count: 1')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 0')\n",
            "-": "-    await findByText('count: 0')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 1')\n",
            "-": "-    await findByText('count: 1')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 1')\n",
            "-": "-    await findByText('count: 1')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('count: 2')\n",
            "-": "-    await findByText('count: 2')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+    await screen.findByText('map: bar')\n",
            "-": "-    await findByText('map: bar')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText } = render(\n"
          },
          {
            "+": "+\n+    await screen.findByText('map-content:')\n",
            "-": "-    await findByText('map-content:')\n"
          },
          {
            "+": "+    await screen.findByText('map-content: bar')\n",
            "-": "-    await findByText('map-content: bar')\n"
          },
          {
            "+": "+    render(\n",
            "-": "-    const { findByText: findByText2 } = render(\n"
          },
          {
            "+": "+\n+    await screen.findByText('map-content: bar')\n",
            "-": "-    await findByText2('map-content: bar')\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 86,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "dfbed9c6c921fcccf247c8f6a293f5e96f525025",
      "url": "https://github.com/pmndrs/zustand/commit/dfbed9c6c921fcccf247c8f6a293f5e96f525025",
      "message": "docs: add leo-query to third-party libraries list (#2824)\n\nCo-authored-by: Danilo Britto <dbritto.dev@gmail.com>",
      "author": {
        "name": "Steven Wexler",
        "email": "steven.m.wexler@gmail.com",
        "date": "2024-10-29T04:12:31Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1373752?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [leo-query](https://github.com/steaks/leo-query) — A simple library to connect async queries to Zustand stores.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "064be30bcb348d6385d7abb4d21d50cf00181ccd",
      "url": "https://github.com/pmndrs/zustand/commit/064be30bcb348d6385d7abb4d21d50cf00181ccd",
      "message": "test: calculate coverage for src files only (#2822)",
      "author": {
        "name": "Marcin Kulpa",
        "email": "marcin.kulpa@gmail.com",
        "date": "2024-10-28T07:31:42Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2963053?v=4"
      },
      "diffObj": {
        "a/vitest.config.ts": [
          {
            "+": "+      include: ['src/**/'],\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "0007ef43a8ef413a15f4246ffa8670a03e0499e8",
      "url": "https://github.com/pmndrs/zustand/commit/0007ef43a8ef413a15f4246ffa8670a03e0499e8",
      "message": "remove tag:next packageConfig",
      "author": {
        "name": "daishi",
        "email": "daishi@axlight.com",
        "date": "2024-10-14T14:19:54Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/490574?v=4"
      },
      "diffObj": {
        "a/package.json": [
          {
            "-": "-  \"publishConfig\": {\n-    \"tag\": \"next\"\n-  },\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "a14af57a85c2f692c97ddec3fa4fd04674e6b2ec",
      "url": "https://github.com/pmndrs/zustand/commit/a14af57a85c2f692c97ddec3fa4fd04674e6b2ec",
      "message": "docs: logo optimization and adding alt (#2784)\n\n* docs: logo optimization and adding alt\r\n\r\n* docs: logo optimization and adding alt\r\n\r\n* Update docs/getting-started/introduction.md\r\n\r\n---------\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "David Sykes",
        "email": "69484342+Amyssyko@users.noreply.github.com",
        "date": "2024-10-12T03:24:42Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/69484342?v=4"
      },
      "diffObj": {
        "a/docs/getting-started/introduction.md": [
          {
            "+": "+  <img src=\"../bear.jpg\" alt=\"Logo Zustand\" />\n",
            "-": "-  <img src=\"../bear.jpg\" />\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "3362f3b7652138fef6140e322ea4249db23a3c84",
      "url": "https://github.com/pmndrs/zustand/commit/3362f3b7652138fef6140e322ea4249db23a3c84",
      "message": "docs: add `zutron` to third-party-libs (#2781)\n\n* docs: add zutron to third-party-libs\r\n\r\n* Update docs/integrations/third-party-libraries.md\r\n\r\n---------\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "goosewobbler",
        "email": "432005+goosewobbler@users.noreply.github.com",
        "date": "2024-10-11T01:12:47Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/432005?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [zutron](https://github.com/goosewobbler/zutron) — Use Zustand in Electron apps, seamlessly.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "55630cce478961092936c8fe2c07bebfd3468b15",
      "url": "https://github.com/pmndrs/zustand/commit/55630cce478961092936c8fe2c07bebfd3468b15",
      "message": "docs: fix typo in use-shallow.md (#2780)",
      "author": {
        "name": "Chafic Najjar",
        "email": "chafic.najjar@gmail.com",
        "date": "2024-10-10T12:08:48Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1498164?v=4"
      },
      "diffObj": {
        "a/docs/hooks/use-shallow.md": [
          {
            "+": "+Next, we will create a `UpdateBabyBearMeal` component that periodically updates baby bear's meal\n",
            "-": "-Next, we will create a `UpdateBabyBearMeal` component that periodically updates babe bear's meal\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "717f5690225170db8b94d6a8d9bb3243d0c895dc",
      "url": "https://github.com/pmndrs/zustand/commit/717f5690225170db8b94d6a8d9bb3243d0c895dc",
      "message": "docs: remove State and improve `replace` typecasting (#2776)",
      "author": {
        "name": "Charles Kornoelje",
        "email": "33156025+charkour@users.noreply.github.com",
        "date": "2024-10-07T00:32:48Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/33156025?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+If the value of the `replace` flag is not known at compile time and is determined dynamically, you might face issues. To handle this, you can use a workaround by annotating the `replace` parameter with the parameters of the `setState` function:\n",
            "-": "-If the value of the `replace` flag is not known at compile time and is determined dynamically, you might face issues. To handle this, you can use a workaround by annotating the `replace` parameter with `as any`:\n"
          },
          {
            "+": "+const args = [{ bears: 5 }, replaceFlag] as Parameters<\n+  typeof useBearStore.setState\n+>\n+store.setState(...args)\n",
            "-": "-store.setState(partialOrFull, replaceFlag as any)\n"
          },
          {
            "+": "+#### Example with `as Parameters` Workaround\n",
            "-": "-#### Example with `as any` Workaround\n"
          },
          {
            "+": "+const args = [{ bears: 5 }, replaceFlag] as Parameters<\n+  typeof useBearStore.setState\n+>\n+useBearStore.setState(...args) // Using the workaround\n",
            "-": "-useBearStore.setState({ bears: 5 }, replaceFlag as any) // Using the workaround\n"
          },
          {
            "+": "+import { create, StateCreator, StoreMutatorIdentifier } from 'zustand'\n",
            "-": "-import { create, State, StateCreator, StoreMutatorIdentifier } from 'zustand'\n"
          },
          {
            "+": "+  T,\n",
            "-": "-  T extends State,\n"
          },
          {
            "+": "+type LoggerImpl = <T>(\n",
            "-": "-type LoggerImpl = <T extends State>(\n"
          },
          {
            "-": "-  type T = ReturnType<typeof f>\n",
            "+": ""
          },
          {
            "+": "+    set(...(a as Parameters<typeof set>))\n",
            "-": "-    set(...a)\n"
          },
          {
            "+": "+    setState(...(a as Parameters<typeof setState>))\n",
            "-": "-    setState(...a)\n"
          },
          {
            "-": "-  State,\n",
            "+": ""
          },
          {
            "+": "+  T,\n",
            "-": "-  T extends State,\n"
          },
          {
            "+": "+type FooImpl = <T, A>(\n",
            "-": "-type FooImpl = <T extends State, A>(\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 13,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "17bc89d735342d9ced8a50248b140c002a8e4778",
      "url": "https://github.com/pmndrs/zustand/commit/17bc89d735342d9ced8a50248b140c002a8e4778",
      "message": "docs: capitalize first word in subtitle (#2770)",
      "author": {
        "name": "Chafic Najjar",
        "email": "chafic.najjar@gmail.com",
        "date": "2024-10-05T07:35:21Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1498164?v=4"
      },
      "diffObj": {
        "a/docs/guides/auto-generating-selectors.md": [
          {
            "+": "+## Create the following function: `createSelectors`\n",
            "-": "-## create the following function: `createSelectors`\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "17b208a91f1ffac09010b7447320e65c071fb90a",
      "url": "https://github.com/pmndrs/zustand/commit/17b208a91f1ffac09010b7447320e65c071fb90a",
      "message": "docs: fix typo in Prevent rerenders with useShallow section (#2761)",
      "author": {
        "name": "David",
        "email": "71749524+f312213213@users.noreply.github.com",
        "date": "2024-09-30T11:56:25Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/71749524?v=4"
      },
      "diffObj": {
        "a/docs/guides/prevent-rerenders-with-use-shallow.md": [
          {
            "+": "+The computed selector will cause a rerender if the output has changed according to [Object.is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is?retiredLocale=it).\n",
            "-": "-The computed selector will cause a rererender if the output has changed according to [Object.is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is?retiredLocale=it).\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "18c0a3d97d85c8a732dee2700221703df7a6db19",
      "url": "https://github.com/pmndrs/zustand/commit/18c0a3d97d85c8a732dee2700221703df7a6db19",
      "message": "docs: add plaintext language to code block to prevent layout breaks (#2745)",
      "author": {
        "name": "87xie",
        "email": "oscar87xie@gmail.com",
        "date": "2024-09-18T03:20:38Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/26923823?v=4"
      },
      "diffObj": {
        "a/docs/migrations/migrating-to-v5.md": [
          {
            "+": "+```plaintext\n",
            "-": "-```\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "4ec7077de5714cbafc18a5a807b3cdd020043b62",
      "url": "https://github.com/pmndrs/zustand/commit/4ec7077de5714cbafc18a5a807b3cdd020043b62",
      "message": "docs: corrected example (#2717)\n\n* docs: made store consistent with examples in \"Selecting multiple state slices\"\r\n\r\n* docs: responded to review comments\r\n\r\n* Update readme.md\r\n\r\n* run pretiter\r\n\r\n---------\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>\r\nCo-authored-by: daishi <daishi@axlight.com>",
      "author": {
        "name": "Ethan Brown",
        "email": "e@zepln.com",
        "date": "2024-09-02T23:50:04Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/7088733?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+  nuts: 0,\n+  honey: 0,\n+  treats: {},\n+  // ...\n",
            "-": "-  bears: 0,\n-  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n-  removeAllBears: () => set({ bears: 0 }),\n"
          },
          {
            "+": "+For more control over re-rendering, you may provide any custom equality function (this example requires the use of [`createWithEqualityFn`](./docs/migrations/migrating-to-v5.md#using-custom-equality-functions-such-as-shallow)).\n",
            "-": "-For more control over re-rendering, you may provide any custom equality function.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "c0cd364b8fbbef940bfcccf0b2bf2bd1fa039876",
      "url": "https://github.com/pmndrs/zustand/commit/c0cd364b8fbbef940bfcccf0b2bf2bd1fa039876",
      "message": "docs: typo in typescript docs (#2708)",
      "author": {
        "name": "Tibinko",
        "email": "tibor.hanesz@gmail.com",
        "date": "2024-08-28T00:44:04Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/11064908?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+const createBoundedUseStore = ((store) => (selector) =>\n+  useStore(store, selector)) as <S extends StoreApi<unknown>>(\n",
            "-": "-const createBoundedUseStore = ((store) => (selector) => useStore(store)) as <\n-  S extends StoreApi<unknown>,\n->(\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "7c146158154b29af72c2dacd228f1ce48f712faa",
      "url": "https://github.com/pmndrs/zustand/commit/7c146158154b29af72c2dacd228f1ce48f712faa",
      "message": "remove unintended change from default merge behaviour to identical but manual one (#2661)\n\ntargeted section of the README talks about integration with redux devtools. to accomplish this the dev needs to define third argument for `set` function. since arguments for `set` function are positional it means he/she needs to define the second, `replace`, argument as well\r\n\r\ncurrently README suggests just to use `false` value for `replace` arg i.e. to override the default value by identical manual one, but defined on the dev side.\r\n\r\nmore clean way would be to use `undefined` at the second argument position that will make JS to use the default value, that is defined by lib authors, not dev",
      "author": {
        "name": "Mordechai Dror",
        "email": "vorant94@pm.me",
        "date": "2024-08-04T06:50:16Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/9719319?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+    undefined,\n",
            "-": "-    false,\n"
          },
          {
            "+": "+    undefined,\n",
            "-": "-    false,\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 0
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "0bdf95f0c8b6b9eba2c0c544d46cc8907ec7b66b",
      "url": "https://github.com/pmndrs/zustand/commit/0bdf95f0c8b6b9eba2c0c544d46cc8907ec7b66b",
      "message": "doc:  Added zustand-interval-persist to third party (#2636)\n\n* doc:  Added zustand-interval-persist to third party\r\n\r\n* doc: added zustand-interval-persist to third party in alphabetical order.\r\n\r\n* doc: re-arranged zustand-interval-persist order, zundo and zukeeper",
      "author": {
        "name": "yash chauhan",
        "email": "65440380+YashChauhan858@users.noreply.github.com",
        "date": "2024-07-08T22:48:40Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/65440380?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "-": "-\n",
            "+": ""
          },
          {
            "-": "-- [zundo](https://github.com/charkour/zundo) — 🍜 Undo and redo middleware for Zustand, enabling time-travel in your apps.\n",
            "+": ""
          },
          {
            "+": "+- [zundo](https://github.com/charkour/zundo) — 🍜 Undo and redo middleware for Zustand, enabling time-travel in your apps.\n",
            "-": ""
          },
          {
            "+": "+- [zustand-interval-persist](https://www.npmjs.com/package/zustand-interval-persist) — An enhancement for zustand that enables automatic saving of the store's state to the specified storage at regular interval.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 4,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "b1648f7ea29ce44e159cad1f3a26ec4a34ed4596",
      "url": "https://github.com/pmndrs/zustand/commit/b1648f7ea29ce44e159cad1f3a26ec4a34ed4596",
      "message": "doc: added zustand-computed-state to external libraries (#2598)",
      "author": {
        "name": "Yasin",
        "email": "yasinntazeoglu@gmail.com",
        "date": "2024-06-13T07:45:05Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/36041339?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [zustand-computed-state](https://github.com/yasintz/zustand-computed-state) — Simple middleware to add computed states.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "7c156014bca1e57ae44683613fc42032796bcd75",
      "url": "https://github.com/pmndrs/zustand/commit/7c156014bca1e57ae44683613fc42032796bcd75",
      "message": "doc: added treeshakable to external libraries (#2595)\n\n* doc: added treeshakable to external libraries\r\n\r\n* format with prettier",
      "author": {
        "name": "Mayank",
        "email": "mayank.srmu@gmail.com",
        "date": "2024-06-10T11:43:30Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/25501269?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [treeshakable](https://github.com/react18-tools/treeshakable) — A wrapper for library creators to avoid redundant store creation.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "97d112ce54e077654ead6ffcf6b0100f37ba0587",
      "url": "https://github.com/pmndrs/zustand/commit/97d112ce54e077654ead6ffcf6b0100f37ba0587",
      "message": "docs: add @prncss-xyz/zustand-optics to third party libraries (#2564)\n\n* docs: add @prncss-xyz/zustand-optics to third party libraries\r\n\r\n* fix: typo\r\n\r\nsorry!",
      "author": {
        "name": "Juliette Lamarche",
        "email": "princesse@princesse.xyz",
        "date": "2024-05-20T23:00:13Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/77757378?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [@prncss-xyz/zustand-optics](https://github.com/prncss-xyz/zustand-optics) — An adapter for [optics-ts](https://github.com/akheron/optics-ts).\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "11cc9c3c5eb1f7ca7dbfd8eaa5395c8bfa728c00",
      "url": "https://github.com/pmndrs/zustand/commit/11cc9c3c5eb1f7ca7dbfd8eaa5395c8bfa728c00",
      "message": "docs: fix typos in the typescript guide (#2550)",
      "author": {
        "name": "StyleShit",
        "email": "32631382+StyleShit@users.noreply.github.com",
        "date": "2024-05-13T08:47:11Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/32631382?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+And of course Zustand failed because it's impossible to implement `create` the way types promise (in the same way it's impossible to implement `createFoo`). In other words we don't have a type to express the actual `create` we have implemented. We can't type `get` as `() => T | undefined` because it would cause inconvenience and it still won't be correct as `get` is indeed `() => T` eventually, just if called synchronously it would be `() => undefined`. What we need is some kind of TypeScript feature that allows us to type `get` as `(() => T) & WhenSync<() => undefined>`, which of course is extremely far-fetched.\n",
            "-": "-And of course Zustand failed because it's impossible to implement `create` the way types promise (in the same way it's impossible to implement `createFoo`). In other words we don't have a type to express the actual `create` we have implemented. We can't type `get` as `() => T | undefined` because it would cause inconveince and it still won't be correct as `get` is indeed `() => T` eventually, just if called synchronously it would be `() => undefined`. What we need is some kind of TypeScript feature that allows us to type `get` as `(() => T) & WhenSync<() => undefined>`, which of course is extremly far-fetched.\n"
          },
          {
            "+": "+So we have two problems: lack of inference and unsoundness. Lack of inference can be solved if TypeScript can improve its inference for invariants. And unsoundness can be solved if TypeScript introduces something like `WhenSync`. To work around lack of inference we manually annotate the state type. And we can't work around unsoundness, but it's not a big deal because it's not much, calling `get` synchronously anyway doesn't make sense.\n",
            "-": "-So we have two problems: lack of inference and unsoundness. Lack of inference can be solved if TypeScript can improves its inference for invariants. And unsoundness can be solved if TypeScript introduces something like `WhenSync`. To work around lack of inference we manually annotate the state type. And we can't work around unsoundness, but it's not a big deal because it's not much, calling `get` synchronously anyway doesn't make sense.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "e74fdc8bc9fcb81a6ec1b82affc4bfdd82889145",
      "url": "https://github.com/pmndrs/zustand/commit/e74fdc8bc9fcb81a6ec1b82affc4bfdd82889145",
      "message": "docs: add zustand-context to third party libs (#2525)\n\n* docs: add zustand-context to third party libs\r\n\r\n* docs: typo\r\n\r\n* docs: sort alphabetically",
      "author": {
        "name": "✦ freddie",
        "email": "45042736+fredericoo@users.noreply.github.com",
        "date": "2024-05-01T14:06:17Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/45042736?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "-": "-- [zustand-constate](https://github.com/ntvinhit/zustand-constate) — Context-based state management based on Zustand and taking ideas from Constate.\n",
            "+": ""
          },
          {
            "+": "+- [zustand-constate](https://github.com/ntvinhit/zustand-constate) — Context-based state management based on Zustand and taking ideas from Constate.\n+- [zustand-context](https://github.com/fredericoo/zustand-context) — Create a zustand store in React Context, containing an initial value, or use it in your components with isolated, mockable instances.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "b66ccd5243e7831704982c0ec3c3ad14af8b5bf6",
      "url": "https://github.com/pmndrs/zustand/commit/b66ccd5243e7831704982c0ec3c3ad14af8b5bf6",
      "message": "docs: update ramda example (#2510)",
      "author": {
        "name": "Henpai Hsu",
        "email": "Dreamfliper@gmail.com",
        "date": "2024-04-26T08:07:15Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/7656086?v=4"
      },
      "diffObj": {
        "a/docs/guides/updating-state.md": [
          {
            "+": "+    set(R.modifyPath([\"deep\", \"nested\", \"obj\", \"count\"], (c) => c + 1)),\n",
            "-": "-    set(R.over(R.lensPath([\"deep\", \"nested\", \"obj\", \"count\"]), (c) => c + 1)),\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "bdd104a97d248e86fda016b363088b99db76ebf5",
      "url": "https://github.com/pmndrs/zustand/commit/bdd104a97d248e86fda016b363088b99db76ebf5",
      "message": "docs: add zustand-slices (#2494)",
      "author": {
        "name": "Daishi Kato",
        "email": "dai-shi@users.noreply.github.com",
        "date": "2024-04-19T09:15:13Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/490574?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [derive-zustand](https://github.com/zustandjs/derive-zustand) — A function to create a derived Zustand store from other Zustand stores.\n",
            "-": "-- [derive-zustand](https://github.com/dai-shi/derive-zustand) — A function to create a derived Zustand store from other Zustand stores.\n"
          },
          {
            "+": "+- [use-zustand](https://github.com/zustandjs/use-zustand) — Another custom hook to use Zustand vanilla store.\n",
            "-": "-- [use-zustand](https://github.com/dai-shi/use-zustand) — Another custom hook to use Zustand vanilla store.\n"
          },
          {
            "+": "+- [zustand-slices](https://github.com/zustandjs/zustand-slices) — A slice utility for Zustand.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "1392c51fae7f4896a8eb9fb2b0a05929eef15f5b",
      "url": "https://github.com/pmndrs/zustand/commit/1392c51fae7f4896a8eb9fb2b0a05929eef15f5b",
      "message": "docs: adding note about middlewares and slices (#2378)\n\n* docs: adding note about middlewares and slices\r\n\r\n* chore: updating slices note\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>\r\n\r\n---------\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>",
      "author": {
        "name": "Michael Di Prisco",
        "email": "Cadienvan@users.noreply.github.com",
        "date": "2024-03-01T21:39:16Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/5492927?v=4"
      },
      "diffObj": {
        "a/docs/guides/slices-pattern.md": [
          {
            "+": "+Please keep in mind you should only apply middlewares in the combined store. Applying them inside individual slices can lead to unexpected issues.\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "eb8443faa333e5804b372b211424eec05e200b47",
      "url": "https://github.com/pmndrs/zustand/commit/eb8443faa333e5804b372b211424eec05e200b47",
      "message": "docs(middleware): modify both `set` and `setState` (#2306)\n\n* docs(middleware): modify `set` and `setState`\r\n\r\n* update middleware docs",
      "author": {
        "name": "Charles Kornoelje",
        "email": "33156025+charkour@users.noreply.github.com",
        "date": "2024-02-15T13:21:29Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/33156025?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+  const setState = store.setState\n+  store.setState = (...a) => {\n+    setState(...a)\n+    console.log(...(name ? [`${name}:`] : []), store.getState())\n+  }\n",
            "-": "-  store.setState = loggedSet\n"
          }
        ],
        "a/readme.md": [
          {
            "-": "-## Middleware\n-\n-You can functionally compose your store any way you like.\n-\n-```jsx\n-// Log every time state is changed\n-const log = (config) => (set, get, api) =>\n-  config(\n-    (...args) => {\n-      console.log('  applying', args)\n-      set(...args)\n-      console.log('  new state', get())\n-    },\n-    get,\n-    api,\n-  )\n-\n-const useBeeStore = create(\n-  log((set) => ({\n-    bees: false,\n-    setBees: (input) => set({ bees: input }),\n-  })),\n-)\n-```\n-\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "27bffb1fba9de4c958f4a4b4d31c20e54e579fc0",
      "url": "https://github.com/pmndrs/zustand/commit/27bffb1fba9de4c958f4a4b4d31c20e54e579fc0",
      "message": "docs(persist): add info about `createJSONStorage` helpful function (#2299)\n\n* first pass at docs\r\n\r\n* add jump-to-section",
      "author": {
        "name": "Charles Kornoelje",
        "email": "33156025+charkour@users.noreply.github.com",
        "date": "2024-01-20T05:17:05Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/33156025?v=4"
      },
      "diffObj": {
        "a/docs/integrations/persisting-store-data.md": [
          {
            "+": "+Enables you to use your own storage. Simply pass a function that returns the storage you want to use. It's recommended to use the [`createJSONStorage`](#createjsonstorage) helper function to create a `storage` object that is compliant with the `StateStorage` interface.\n",
            "-": "-Enables you to use your own storage.\n-Simply pass a function that returns the storage you want to use.\n"
          },
          {
            "+": "+### `createJSONStorage`\n+\n+> Type: `(getStorage: () => StateStorage, options?: JsonStorageOptions) => StateStorage`\n+\n+> Returns: `PersistStorage`\n+\n+This helper function enables you to create a [`storage`](#storage) object which is useful when you want to use a custom storage engine.\n+\n+`getStorage` is a function that returns the storage engine with the properties `getItem`, `setItem`, and `removeItem`.\n+\n+`options` is an optional object that can be used to customize the serialization and deserialization of the data. `options.reviver` is a function that is passed to `JSON.parse` to deserialize the data. `options.replacer` is a function that is passed to `JSON.stringify` to serialize the data.\n+\n+```ts\n+import { createJSONStorage } from 'zustand/middleware'\n+\n+const storage = createJSONStorage(() => sessionStorage, {\n+  reviver: (key, value) => {\n+    if (value && value.type === 'date') {\n+      return new Date(value)\n+    }\n+    return value\n+  },\n+  replacer: (key, value) => {\n+    if (value instanceof Date) {\n+      return { type: 'date', value: value.toISOString() }\n+    }\n+    return value\n+  },\n+})\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "a4578fa5c48c013408744eddd7d051ade223d076",
      "url": "https://github.com/pmndrs/zustand/commit/a4578fa5c48c013408744eddd7d051ade223d076",
      "message": "docs: minor typo fix in flux-inspired-practice.md (#2252)",
      "author": {
        "name": "Andrew Hulterstrom",
        "email": "55113250+ahulterstrom@users.noreply.github.com",
        "date": "2023-12-15T00:08:06Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/55113250?v=4"
      },
      "diffObj": {
        "a/docs/guides/flux-inspired-practice.md": [
          {
            "+": "+Another way to update the store could be through functions wrapping the state functions. These could also handle side-effects of actions. For example, with HTTP-calls. To use Zustand in a non-reactive way, see [the readme](https://github.com/pmndrs/zustand#readingwriting-state-and-reacting-to-changes-outside-of-components).\n",
            "-": "-Another way to update the store could be through functions wrapping the state functions. These could also handle side-effects of actions. For example, with HTTP-calls. To use Zustand in a none-reactive way, see [the readme](https://github.com/pmndrs/zustand#readingwriting-state-and-reacting-to-changes-outside-of-components).\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "662f38a8c33e0758da859cf608caac6bccc5eddd",
      "url": "https://github.com/pmndrs/zustand/commit/662f38a8c33e0758da859cf608caac6bccc5eddd",
      "message": "docs(immer): change demo url (#2239)",
      "author": {
        "name": "Younghoo Kim",
        "email": "sensitive.hu@gmail.com",
        "date": "2023-12-11T12:34:35Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/81841082?v=4"
      },
      "diffObj": {
        "a/docs/integrations/immer-middleware.md": [
          {
            "+": "+- [Basic](https://codesandbox.io/p/sandbox/zustand-updating-draft-states-basic-demo-forked-96mkdw),\n+- [Advanced](https://codesandbox.io/p/sandbox/zustand-updating-draft-states-advanced-demo-forked-phkzzg).\n",
            "-": "-- [Basic](https://codesandbox.io/s/zustand-updating-draft-states-basic-demo-zkp22g),\n-- [Advanced](https://codesandbox.io/s/zustand-updating-draft-states-advanced-demo-3znqzk).\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "19960f6d96a7a8c6433cf915ae7fdfcc831af797",
      "url": "https://github.com/pmndrs/zustand/commit/19960f6d96a7a8c6433cf915ae7fdfcc831af797",
      "message": "docs(contributing): update test command (#2234)",
      "author": {
        "name": "Charles Kornoelje",
        "email": "33156025+charkour@users.noreply.github.com",
        "date": "2023-12-09T04:39:25Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/33156025?v=4"
      },
      "diffObj": {
        "a/CONTRIBUTING.md": [
          {
            "+": "+  with the `yarn test` command.\n",
            "-": "-  with the `yarn test:dev` command.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "492637a880b583eed1140baedfb939175e15e2a6",
      "url": "https://github.com/pmndrs/zustand/commit/492637a880b583eed1140baedfb939175e15e2a6",
      "message": "docs: update documentation of persist (#2147)\n\n* docs: update documentation of persist\r\n\r\nAdd superjson serialization/deserialization example to Zustand persist documentation\r\n\r\n* docs: fix spelling documentation of persist\r\n\r\n* docs: Apply feedback by moving content under custom storage engine and specifying that the code is an example\r\n\r\n* docs: Update variable name to example name and separate storage as const",
      "author": {
        "name": "권신학",
        "email": "74400147+cheatkey@users.noreply.github.com",
        "date": "2023-11-01T01:35:03Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/74400147?v=4"
      },
      "diffObj": {
        "a/docs/integrations/persisting-store-data.md": [
          {
            "+": "+If you're using a type that JSON.stringify() doesn't support, you'll need to write your own serialization/deserialization code. However, if this is tedious, you can use third-party libraries to serialize and deserialize different types of data.\n+\n+For example, [Superjson](https://github.com/blitz-js/superjson) can serialize data along with its type, allowing the data to be parsed back to its original type upon deserialization\n+\n+```ts\n+import superjson from 'superjson' //  can use anything: serialize-javascript, devalue, etc.\n+import { PersistStorage } from 'zustand/middleware'\n+\n+interface BearState {\n+  bear: Map<string, string>\n+  fish: Set<string>\n+  time: Date\n+  query: RegExp\n+}\n+\n+const storage: PersistStorage<BearState> = {\n+  getItem: (name) => {\n+    const str = localStorage.getItem(name)\n+    if (!str) return null\n+    return superjson.parse(str)\n+  },\n+  setItem: (name, value) => {\n+    localStorage.setItem(name, superjson.stringify(value))\n+  },\n+  removeItem: (name) => localStorage.removeItem(name),\n+}\n+\n+const initialState: BearState = {\n+  bear: new Map(),\n+  fish: new Set(),\n+  time: new Date(),\n+  query: new RegExp(''),\n+}\n+\n+export const useBearStore = create<BearState>()(\n+  persist(\n+    (set) => ({\n+      ...initialState,\n+      // ...\n+    }),\n+    {\n+      name: 'food-storage',\n+      storage,\n+    }\n+  )\n+)\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "1e846b39b13eb1827acbcfa69fb4524a7b1d5aa1",
      "url": "https://github.com/pmndrs/zustand/commit/1e846b39b13eb1827acbcfa69fb4524a7b1d5aa1",
      "message": "test(ssr): Validate state synchronization between server and client in React 18 using Zustand (#903) (#2088)\n\n* test(ssr): Validate state synchronization between server and client in React 18 using Zustand (#903)\r\n\r\n* test(ssr): dynamically import hydrateRoot for React 18 and skip if version < 18\r\n\r\n* test(ssr): implement conditional describe based on React version\r\n\r\n* test(ssr): Refactor SSR code using skipIf and importActual\r\n\r\n* test(ssr): Refactor code using 'importActual' with a more specific type for 'hydrateRoot'\r\n\r\n* test(ssr): remove async from the main test function\r\n\r\n---------\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "JiWon Kim",
        "email": "just731731@gmail.com",
        "date": "2023-10-02T13:08:18Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/83356118?v=4"
      },
      "diffObj": {
        "a/tests/ssr.test.tsx": [
          {
            "+": "+import React, { useEffect } from 'react'\n+import { act, screen } from '@testing-library/react'\n+import { renderToString } from 'react-dom/server'\n+import { describe, expect, it, vi } from 'vitest'\n+import { create } from 'zustand'\n+\n+interface BearStoreState {\n+  bears: number\n+}\n+\n+interface BearStoreAction {\n+  increasePopulation: () => void\n+}\n+\n+const initialState = { bears: 0 }\n+const useBearStore = create<BearStoreState & BearStoreAction>((set) => ({\n+  ...initialState,\n+  increasePopulation: () => set(({ bears }) => ({ bears: bears + 1 })),\n+}))\n+\n+function Counter() {\n+  const { bears, increasePopulation } = useBearStore(\n+    ({ bears, increasePopulation }) => ({\n+      bears,\n+      increasePopulation,\n+    })\n+  )\n+\n+  useEffect(() => {\n+    increasePopulation()\n+  }, [increasePopulation])\n+\n+  return <div>bears: {bears}</div>\n+}\n+\n+describe.skipIf(!React.version.startsWith('18'))(\n+  'ssr behavior with react 18',\n+  () => {\n+    it('should handle different states between server and client correctly', async () => {\n+      const { hydrateRoot } = await vi.importActual<\n+        typeof import('react-dom/client')\n+      >('react-dom/client')\n+\n+      const markup = renderToString(\n+        <React.Suspense fallback={<div>Loading...</div>}>\n+          <Counter />\n+        </React.Suspense>\n+      )\n+\n+      const container = document.createElement('div')\n+      document.body.appendChild(container)\n+      container.innerHTML = markup\n+\n+      expect(container.textContent).toContain('bears: 0')\n+\n+      await act(async () => {\n+        hydrateRoot(\n+          container,\n+          <React.Suspense fallback={<div>Loading...</div>}>\n+            <Counter />\n+          </React.Suspense>\n+        )\n+      })\n+\n+      const bearCountText = await screen.findByText('bears: 1')\n+      expect(bearCountText).not.toBeNull()\n+      document.body.removeChild(container)\n+    })\n+  }\n+)\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "60d7116a5e0d640fb098a5f4a6cb57e982d87b73",
      "url": "https://github.com/pmndrs/zustand/commit/60d7116a5e0d640fb098a5f4a6cb57e982d87b73",
      "message": "Remove recipes (#2085)\n\n* Clean up files\r\n\r\n* Update readme\r\n\r\n* Minor changes\r\n\r\n* Update readme.md\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>\r\n\r\n* Update readme.md\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>\r\n\r\n* Update readme.md\r\n\r\n* Update readme.md\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "Danilo Britto",
        "email": "dbritto.dev@gmail.com",
        "date": "2023-09-28T01:11:51Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1697714?v=4"
      },
      "diffObj": {
        "a/docs/recipes/recipes.mdx": [
          {
            "-": "-title: Recipes\n-description: How to do all you need with Zustand\n-nav: 15\n",
            "+": ""
          },
          {
            "-": "-\n-## Fetching everything\n-\n-You can, but bear in mind that it will cause\n-the component to update on every state change!\n-\n-```jsx\n-const state = useStore()\n-```\n-\n-## Selecting multiple state slices\n-\n-It detects changes with strict-equality (`old === new`) by default.\n-This is efficient for atomic state picks.\n-\n-```jsx\n-const nuts = useStore((state) => state.nuts)\n-const honey = useStore((state) => state.honey)\n-```\n-\n-For more control over re-rendering,\n-you may provide an alternative equality function on the second argument.\n-\n-```jsx\n-const treats = useStore(\n-  (state) => state.treats,\n-  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n-)\n-```\n-\n-For instance, if you want to construct\n-a single object with multiple state-picks inside,\n-similar to Redux's `mapStateToProps`,\n-you can tell Zustand that you want the object\n-to be diffed shallowly by passing the `shallow` equality function.\n-\n-```jsx\n-import { shallow } from 'zustand/shallow'\n-\n-// Object pick, re-renders the component when either state.nuts or state.honey change\n-const { nuts, honey } = useStore(\n-  (state) => ({ nuts: state.nuts, honey: state.honey }),\n-  shallow\n-)\n-\n-// Array pick, re-renders the component when either state.nuts or state.honey change\n-const [nuts, honey] = useStore((state) => [state.nuts, state.honey], shallow)\n-\n-// Mapped picks, re-renders the component when state.treats changes in order, count or keys\n-const treats = useStore((state) => Object.keys(state.treats), shallow)\n-```\n-\n-## Fetching from multiple stores\n-\n-Since you can create as many stores as you like,\n-forwarding results to succeeding selectors is as natural as it gets.\n-\n-```jsx\n-const currentBear = useCredentialsStore((state) => state.currentBear)\n-const bear = useBearStore((state) => state.bears[currentBear])\n-```\n-\n-## Overwriting state\n-\n-The `set` function has a second argument, `false` by default.\n-Instead of merging, it will replace the state model.\n-Be careful not to wipe out parts you rely on, like actions.\n-\n-```jsx\n-import omit from 'lodash-es/omit'\n-\n-const useStore = create((set) => ({\n-  salmon: 1,\n-  tuna: 2,\n-  deleteEverything: () => set({}, true), // clears the entire store, actions included\n-  deleteTuna: () => set((state) => omit(state, ['tuna']), true),\n-}))\n-```\n-\n-## Async actions\n-\n-Just call `set` when you're ready,\n-zustand doesn't care if your actions are async or not.\n-\n-```jsx\n-const useStore = create((set) => ({\n-  fishies: {},\n-  fetch: async (pond) => {\n-    const response = await fetch(pond)\n-    set({ fishies: await response.json() })\n-  },\n-}))\n-```\n-\n-## Read from state in actions\n-\n-`set` allows fn-updates `set(state => result)`,\n-but you still have access to state outside of it through `get`.\n-\n-```jsx\n-const useStore = create((set, get) => ({\n-  sound: 'grunt',\n-  action: () => {\n-    const sound = get().sound\n-    // ...\n-  },\n-}))\n-```\n-\n-## Reading/writing state and reacting to changes outside of components\n-\n-Sometimes you need to access state in a non-reactive way,\n-or act upon the store.\n-For these cases the resulting hook\n-has utility functions attached to its prototype.\n-\n-If you need to subscribe with selector,\n-`subscribeWithSelector` middleware will help.\n-With this middleware, subscribe accepts an additional signature:\n-\n-```jsx\n-subscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n-```\n-\n-```jsx\n-import { create } from 'zustand'\n-import { subscribeWithSelector } from 'zustand/middleware'\n-import { shallow } from 'zustand/shallow'\n-const useStore = create(\n-  subscribeWithSelector(() => ({ paw: true, snout: true, fur: true }))\n-)\n-\n-// Getting non-reactive fresh state\n-const paw = useStore.getState().paw\n-// Listening to all changes, fires on every change\n-const unsub1 = useStore.subscribe(console.log)\n-// Listening to selected changes, in this case when \"paw\" changes\n-const unsub2 = useStore.subscribe((state) => state.paw, console.log)\n-// Subscribe also supports an optional equality function\n-const unsub3 = useStore.subscribe(\n-  (state) => [state.paw, state.fur],\n-  console.log,\n-  { equalityFn: shallow }\n-)\n-// Subscribe also exposes the previous value\n-const unsub4 = useStore.subscribe(\n-  (state) => state.paw,\n-  (paw, previousPaw) => console.log(paw, previousPaw)\n-)\n-// Updating state, will trigger listeners\n-useStore.setState({ paw: false })\n-useStore.setState({ snout: false })\n-// Unsubscribe listeners\n-unsub1()\n-unsub2()\n-unsub3()\n-unsub4()\n-// Destroying the store (removing all listeners)\n-useStore.destroy()\n-\n-// You can of course use the hook as you always would\n-function Component() {\n-  const paw = useStore((state) => state.paw)\n-  // ...\n-}\n-```\n-\n-## Using zustand without React\n-\n-Zustand's core can be imported and used without the React dependency.\n-The only difference is that the create function does not return a hook,\n-but the API utilities.\n-\n-```jsx\n-import { createStore } from 'zustand/vanilla'\n-\n-const store = createStore(() => ({ ... }))\n-const { getState, setState, subscribe, destroy } = store\n-```\n-\n-You can use a vanilla store in React with a `useStore` hook.\n-\n-```jsx\n-import { useStore } from 'zustand'\n-import { vanillaStore } from './vanillaStore'\n-\n-const useBoundStore = (selector) => useStore(vanillaStore, selector)\n-```\n-\n-## Transient updates (for frequent state changes)\n-\n-The `subscribe` function allows components to bind\n-to a state portion without forcing a re-render on changes.\n-It is best to combine it with `useEffect`\n-for automatic unsubscribe on unmount.\n-This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws)\n-performance impact, when you are allowed to mutate the view directly.\n-\n-```jsx\n-const useScratchStore = create(set => ({ scratches: 0, ... }))\n-\n-function Component() {\n-  // Fetch initial state\n-  const scratchRef = useRef(useScratchStore.getState().scratches)\n-  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n-  useEffect(() => useScratchStore.subscribe(\n-    (state) => (scratchRef.current = state.scratches)\n-  ), [])\n-  // ...\n-}\n-```\n-\n-## Sick of reducers and changing nested state? Use Immer!\n-\n-Reducing nested structures is tiresome.\n-Have you tried [Immer](https://github.com/immerjs/immer)?\n-\n-```jsx\n-import { produce } from 'immer'\n-\n-const useStore = create((set) => ({\n-  lush: { forest: { contains: { a: 'bear' } } },\n-  set: (fn) => set(produce(fn)),\n-}))\n-\n-const set = useStore((state) => state.set)\n-set((state) => {\n-  state.lush.forest.contains = null\n-})\n-```\n-\n-## Middleware\n-\n-You can functionally compose your store any way you like.\n-\n-```jsx\n-// Log every time state is changed\n-const log = (config) => (set, get, api) =>\n-  config(\n-    (args) => {\n-      console.log('  applying', args)\n-      set(args)\n-      console.log('  new state', get())\n-    },\n-    get,\n-    api\n-  )\n-\n-// Turn the set method into an immer proxy\n-const immer = (config) => (set, get, api) =>\n-  config((fn) => set(produce(fn)), get, api)\n-\n-const useStore = create(\n-  log(\n-    immer((set) => ({\n-      bees: false,\n-      setBees: (input) => set((state) => void (state.bees = input)),\n-    }))\n-  )\n-)\n-```\n-\n-<details>\n-<summary>How to pipe middlewares</summary>\n-\n-```js\n-import { create } from 'zustand'\n-import { produce } from 'immer'\n-import pipe from 'ramda/es/pipe'\n-\n-/* log and immer functions from previous example */\n-/* you can pipe as many middlewares as you want */\n-const createStore = pipe(log, immer, create)\n-\n-const useStore = createStore((set) => ({\n-  bears: 1,\n-  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n-}))\n-\n-export default useStore\n-```\n-\n-For a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n-\n-</details>\n-\n-<details>\n-<summary>How to type immer middleware in TypeScript</summary>\n-\n-```ts\n-import { State, StateCreator } from 'zustand'\n-import { produce, Draft } from 'immer'\n-\n-// Immer V8 or lower\n-const immer =\n-  <T extends State>(\n-    config: StateCreator<T, (fn: (draft: Draft<T>) => void) => void>\n-  ): StateCreator<T> =>\n-  (set, get, api) =>\n-    config((fn) => set(produce(fn) as (state: T) => T), get, api)\n-\n-// Immer V9\n-const immer =\n-  <T extends State>(\n-    config: StateCreator<T, (fn: (draft: Draft<T>) => void) => void>\n-  ): StateCreator<T> =>\n-  (set, get, api) =>\n-    config((fn) => set(produce<T>(fn)), get, api)\n-```\n-\n-</details>\n-\n-## Persist middleware\n-\n-You can persist your store's data using any kind of storage.\n-\n-```jsx\n-import { create } from 'zustand'\n-import { persist, createJSONStorage } from 'zustand/middleware'\n-\n-export const useStore = create(\n-  persist(\n-    (set, get) => ({\n-      fishes: 0,\n-      addAFish: () => set({ fishes: get().fishes + 1 }),\n-    }),\n-    {\n-      name: 'food-storage', // name of the item in the storage (must be unique)\n-      storage: createJSONStorage(() => sessionStorage), // (optional) by default, 'localStorage' is used\n-    }\n-  )\n-)\n-```\n-\n-## Can't live without Redux-like reducers and action types?\n-\n-```jsx\n-const types = { increase: 'INCREASE', decrease: 'DECREASE' }\n-\n-const reducer = (state, { type, by = 1 }) => {\n-  switch (type) {\n-    case types.increase:\n-      return { grumpiness: state.grumpiness + by }\n-    case types.decrease:\n-      return { grumpiness: state.grumpiness - by }\n-  }\n-}\n-\n-const useStore = create((set) => ({\n-  grumpiness: 0,\n-  dispatch: (args) => set((state) => reducer(state, args)),\n-}))\n-\n-const dispatch = useStore((state) => state.dispatch)\n-dispatch({ type: types.increase, by: 2 })\n-```\n-\n-Or, just use our `redux` middleware.\n-It wires up your main reducer, sets initial state,\n-and adds a dispatch function to the state itself and the vanilla API.\n-\n-```jsx\n-import { redux } from 'zustand/middleware'\n-\n-const useStore = create(redux(reducer, initialState))\n-```\n-\n-## Calling actions outside a React event handler\n-\n-Because React handles `setState` synchronously\n-if it's called outside an event handler.\n-Updating the state outside an event handler\n-will force react to update the components synchronously,\n-therefore adding the risk of encountering the zombie-child effect.\n-In order to fix this,\n-the action needs to be wrapped in `unstable_batchedUpdates`.\n-\n-```jsx\n-import { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n-\n-const useStore = create((set) => ({\n-  fishes: 0,\n-  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 })),\n-}))\n-\n-const nonReactCallback = () => {\n-  unstable_batchedUpdates(() => {\n-    useStore.getState().increaseFishes()\n-  })\n-}\n-```\n-\n-More details in [this issue](https://github.com/pmndrs/zustand/issues/302).\n-\n-## Redux devtools\n-\n-```jsx\n-import { devtools } from 'zustand/middleware'\n-\n-// Usage with a plain action store, it will log actions as \"setState\"\n-const useStore = create(devtools(store))\n-// Usage with a redux store, it will log full action types\n-const useStore = create(devtools(redux(reducer, initialState)))\n-// Disabling devtools (for instance in production build)\n-const useStore = create(devtools(store, { enabled: false }))\n-```\n-\n-The `devtools` middleware takes the store function as its first argument.\n-Optionally, you can name the store with a second argument `devtoolsOptions`:\n-`devtools(store, { store: \"MyStore\" })`, which will be prefixed to your actions.\n-\n-`devtools` will only log actions from each separated store,\n-unlike in a typical _combined reducers_ Redux store.\n-See an approach to combining stores [here](https://github.com/pmndrs/zustand/issues/163).\n-\n-## TypeScript\n-\n-```tsx\n-type State = {\n-  bears: number\n-  increase: (by: number) => void\n-}\n-\n-const useStore = create<State>((set) => ({\n-  bears: 0,\n-  increase: (by) => set((state) => ({ bears: state.bears + by })),\n-}))\n-```\n-\n-You can also use an interface:\n-\n-```tsx\n-import { State } from 'zustand'\n-\n-interface BearState extends State {\n-  bears: number\n-  increase: (by: number) => void\n-}\n-```\n-\n-Or use `combine` and let `tsc` infer types.\n-\n-```tsx\n-import { combine } from 'zustand/middleware'\n-\n-const useStore = create(\n-  combine({ bears: 0 }, (set) => ({\n-    increase: (by: number) => set((state) => ({ bears: state.bears + by })),\n-  }))\n-)\n-```\n",
            "+": ""
          }
        ],
        "a/readme.md": [
          {
            "+": "+    ...\n",
            "-": "-    // ...\n-  },\n-}))\n"
          },
          {
            "+": "+function Component() {\n",
            "-": "-const Component = () => {\n"
          },
          {
            "+": "+      name: 'food-storage', // name of the item in the storage (must be unique)\n",
            "-": "-      name: 'food-storage', // unique name\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 5,
      "qualityScore": 50
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "8e8156f1426105e75f4e041c92bb4561e7dd1e61",
      "url": "https://github.com/pmndrs/zustand/commit/8e8156f1426105e75f4e041c92bb4561e7dd1e61",
      "message": "docs: change titles in order to avoid duplicate hrefs (#2071)",
      "author": {
        "name": "stavkamil",
        "email": "56508560+stavkamil@users.noreply.github.com",
        "date": "2023-09-22T03:53:00Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/56508560?v=4"
      },
      "diffObj": {
        "a/docs/getting-started/comparison.md": [
          {
            "+": "+### State Model (vs Redux)\n",
            "-": "-### State Model\n"
          },
          {
            "+": "+### Render Optimization (vs Redux)\n",
            "-": "-### Render Optimization\n"
          },
          {
            "+": "+### State Model (vs Valtio)\n",
            "-": "-### State Model\n"
          },
          {
            "+": "+### Render Optimization (vs Valtio)\n",
            "-": "-### Render Optimization\n"
          },
          {
            "+": "+### State Model (vs Jotai)\n",
            "-": "-### State Model\n"
          },
          {
            "+": "+### Render Optimization (vs Jotai)\n",
            "-": "-### Render Optimization\n"
          },
          {
            "+": "+### State Model (vs Recoil)\n",
            "-": "-### State Model\n"
          },
          {
            "+": "+### Render Optimization (vs Recoil)\n",
            "-": "-### Render Optimization\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 8,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "9ddfced2ea82d82b09d90b2ba427912cbb13c304",
      "url": "https://github.com/pmndrs/zustand/commit/9ddfced2ea82d82b09d90b2ba427912cbb13c304",
      "message": "docs: Update typescript guide persist examples... (#2001)\n\n* docs: Update typescript guide persist examples to add required name option\r\n\r\n* docs: run prettier\r\n\r\n* docs: reverting prettier changes to testing.md\r\n\r\n* docs: Update docs/guides/typescript.md per review comment.\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>\r\n\r\n* docs: Update docs/guides/typescript.md per review comment and zustand conventions.\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>\r\n\r\n* docs: change persist options name property to bearStore for consistency.\r\n\r\n---------\r\n\r\nCo-authored-by: John Gilliland <John.Gilliland@Starz.com>\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>",
      "author": {
        "name": "John Gilliland",
        "email": "johncgilliland@gmail.com",
        "date": "2023-08-25T07:54:04Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/66542?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+    persist(\n+      (set) => ({\n+        bears: 0,\n+        increase: (by) => set((state) => ({ bears: state.bears + by })),\n+      }),\n+      { name: 'bearStore' }\n+    )\n",
            "-": "-    persist((set) => ({\n-      bears: 0,\n-      increase: (by) => set((state) => ({ bears: state.bears + by })),\n-    }))\n"
          },
          {
            "+": "+const myMiddlewares = (f) => devtools(persist(f, { name: 'bearStore' }))\n",
            "-": "-const myMiddlewares = (f) => devtools(persist(f))\n"
          },
          {
            "+": "+}), { name: 'bearStore' }))\n",
            "-": "-})))\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "5493959646e2d9dbca1feaad33e4593090e39227",
      "url": "https://github.com/pmndrs/zustand/commit/5493959646e2d9dbca1feaad33e4593090e39227",
      "message": "docs: update persisting-store-data.md (#1993)",
      "author": {
        "name": "Aykut Kardaş",
        "email": "aykutkrds@gmail.com",
        "date": "2023-08-14T23:30:19Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/7966133?v=4"
      },
      "diffObj": {
        "a/docs/integrations/persisting-store-data.md": [
          {
            "+": "+import { persist, createJSONStorage } from 'zustand/middleware'\n",
            "-": "-import { persist } from 'zustand/middleware'\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "19d3df22a6d9a9fd67d9133945c0b6da5d37d0a6",
      "url": "https://github.com/pmndrs/zustand/commit/19d3df22a6d9a9fd67d9133945c0b6da5d37d0a6",
      "message": "docs: fix typo (#1969)",
      "author": {
        "name": "Juhyeok Kang",
        "email": "kangju2000@naver.com",
        "date": "2023-08-02T23:40:20Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/23312485?v=4"
      },
      "diffObj": {
        "a/docs/previous-versions/zustand-v3-create-context.md": [
          {
            "+": "++ const store = createStore((set) => ({\n",
            "-": "-+ const store =  createStore((set) => ({\n"
          },
          {
            "+": "++ export const Provider = ({ children }) => <MyContext.Provider value={store}>{children}</MyContext.Provider>;\n",
            "-": "-+ export const Provider = ({ children }) = <MyContext.Provider value={store}>{children}</MyContext.Provider>;\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "808a72225ea8a87289898e69b360e89e9380b17d",
      "url": "https://github.com/pmndrs/zustand/commit/808a72225ea8a87289898e69b360e89e9380b17d",
      "message": "docs(auto-generating-selectors): Add vanilla store variant (#1915)\n\n* Add variant for vanilla stores\r\n\r\n* Update text tone and style\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>\r\n\r\n* Adjust code style to match zustand's one\r\n\r\n* Run prettier\r\n\r\n---------\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>",
      "author": {
        "name": "Luiz Felicio",
        "email": "13091635+luizeboli@users.noreply.github.com",
        "date": "2023-07-04T23:38:35Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/13091635?v=4"
      },
      "diffObj": {
        "a/docs/guides/auto-generating-selectors.md": [
          {
            "+": "+## Vanilla Store\n+\n+If you are using a vanilla store, use the following `createSelectors` function:\n+\n+```typescript\n+import { StoreApi, useStore } from 'zustand'\n+\n+type WithSelectors<S> = S extends { getState: () => infer T }\n+  ? S & { use: { [K in keyof T]: () => T[K] } }\n+  : never\n+\n+const createSelectors = <S extends StoreApi<object>>(_store: S) => {\n+  const store = _store as WithSelectors<typeof _store>\n+  store.use = {}\n+  for (const k of Object.keys(store.getState())) {\n+    ;(store.use as any)[k] = () =>\n+      useStore(_store, (s) => s[k as keyof typeof s])\n+  }\n+\n+  return store\n+}\n+```\n+\n+The usage is the same as a React store. If you have a store like this:\n+\n+```typescript\n+import { createStore } from 'zustand'\n+\n+interface BearState {\n+  bears: number\n+  increase: (by: number) => void\n+  increment: () => void\n+}\n+\n+const store = createStore<BearState>((set) => ({\n+  bears: 0,\n+  increase: (by) => set((state) => ({ bears: state.bears + by })),\n+  increment: () => set((state) => ({ bears: state.bears + 1 })),\n+}))\n+```\n+\n+Apply that function to your store:\n+\n+```typescript\n+const useBearStore = createSelectors(store)\n+```\n+\n+Now the selectors are auto generated and you can access them directly:\n+\n+```typescript\n+// get the property\n+const bears = useBearStore.use.bears()\n+\n+// get the action\n+const increment = useBearStore.use.increment()\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "58947a5bf9e39aa4fc58a5356cd16eb20dbba45d",
      "url": "https://github.com/pmndrs/zustand/commit/58947a5bf9e39aa4fc58a5356cd16eb20dbba45d",
      "message": "docs: fix typo 'with be' to 'will be' (#1906)",
      "author": {
        "name": "Surya Vivek",
        "email": "72210941+thesuryavivek@users.noreply.github.com",
        "date": "2023-06-30T00:03:15Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/72210941?v=4"
      },
      "diffObj": {
        "a/docs/integrations/persisting-store-data.md": [
          {
            "+": "+By default the store will be hydrated on initialization.\n",
            "-": "-By default the store with be hydrated on initialization.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "d4e5aed00a645088af29c82a08e2616f8e45a59d",
      "url": "https://github.com/pmndrs/zustand/commit/d4e5aed00a645088af29c82a08e2616f8e45a59d",
      "message": "docs(readme): modify usage of Redux devtools (#1903)",
      "author": {
        "name": "Choi Hyunjin",
        "email": "guswls3373@gmail.com",
        "date": "2023-06-29T09:04:25Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/14974083?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+const usePlainStore1 = create(devtools(store, { name, store: storeName1 }))\n+const usePlainStore2 = create(devtools(store, { name, store: storeName2 }))\n",
            "-": "-const usePlainStore1 = create(devtools(store), { name, store: storeName1 })\n-const usePlainStore2 = create(devtools(store), { name, store: storeName2 })\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "7276b531bcf015dbec52029db0025a34d5b3b903",
      "url": "https://github.com/pmndrs/zustand/commit/7276b531bcf015dbec52029db0025a34d5b3b903",
      "message": "docs: correct import alias syntax (#1889)",
      "author": {
        "name": "Kiku",
        "email": "kiku-cn@foxmail.com",
        "date": "2023-06-21T11:01:30Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/27356487?v=4"
      },
      "diffObj": {
        "a/docs/guides/how-to-reset-state.md": [
          {
            "+": "+import { create as _create, StateCreator } from 'zustand'\n",
            "-": "-import { create: _create, StateCreator } from 'zustand'\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "e8597ae77fe28b1424756e37cf3296d705c4321a",
      "url": "https://github.com/pmndrs/zustand/commit/e8597ae77fe28b1424756e37cf3296d705c4321a",
      "message": "docs: refine flux inspired docs to make pattern inspiration clearer (#1874)\n\n* docs: refine flux inspired docs to make pattern inspiration clearer\r\n\r\n* docs: remove the immutable note in the flux inspired docs",
      "author": {
        "name": "Chris K",
        "email": "55621012+chrisk-7777@users.noreply.github.com",
        "date": "2023-06-18T02:42:01Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/55621012?v=4"
      },
      "diffObj": {
        "a/docs/guides/connect-to-state-with-url-hash.md": [
          {
            "+": "+https://codesandbox.io/s/zustand-state-with-url-hash-demo-f29b88?file=/src/store/index.ts\n",
            "-": "-<https://codesandbox.io/s/zustand-state-with-url-hash-demo-f29b88?file=/src/store/index.ts>\n"
          }
        ],
        "a/docs/guides/flux-inspired-practice.md": [
          {
            "+": "+Although Zustand is an unopinionated library, we do recommend a few patterns.\n+These are inspired by practices originally found in [Flux](https://github.com/facebookarchive/flux),\n+and more recently [Redux](https://redux.js.org/understanding/thinking-in-redux/three-principles),\n+so if you are coming from another library, you should feel right at home.\n",
            "-": "-Although zustand is an unopinionated library, here are some patterns we recommend:\n"
          },
          {
            "+": "+However, Zustand does differ in some fundamental ways,\n+so some terminology may not perfectly align to other libraries.\n+\n+## Recommended patterns\n+\n+### Single store\n+\n+Your applications global state should be located in a single Zustand store.\n+\n+If you have a large application, Zustand supports [splitting the store into slices](./slices-pattern).\n+\n+### Use `set` / `setState` to update the store\n+\n+Always use `set` (or `setState`) to perform updates to your store.\n+`set` (and `setState`) ensures the described update is correctly merged and listeners are appropriately notified.\n+\n+### Colocate store actions\n+\n+In Zustand, state can be updated without the use of dispatched actions and reducers found in other Flux libraries.\n+These store actions can be added directly to the store as shown below.\n+\n+Optionally, by using `setState` they can be [located external to the store](./practice-with-no-store-actions.md)\n",
            "-": "-- Create a single store;\n-- Always use `set` to define a store;\n-- Define your dispatch functions at the root level of the store to update one or more store slices.\n"
          },
          {
            "+": "+  updateX: () => set(...),\n+  updateY: () => set(...),\n",
            "-": "-  dispatchX: () => set(...),\n-  dispatchY: () => set(...),\n"
          },
          {
            "+": "+## Redux-like patterns\n",
            "-": "-See [Splitting the store into separate slices](./slices-pattern.md) for how to define a store with separate slices.\n-\n-## Flux like patterns / \"dispatching\" actions\n"
          },
          {
            "+": "+If you can't live without Redux-like reducers, you can define a `dispatch` function on the root level of the store:\n",
            "-": "-If you can't live without redux-like reducers, you can define a `dispatch` function on the root level of the store like so:\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 6,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "docs",
      "sha": "84c7323c8efb1c8aca476c6aa1144a867d807594",
      "url": "https://github.com/pmndrs/zustand/commit/84c7323c8efb1c8aca476c6aa1144a867d807594",
      "message": "[Documentation] Import shallow from right package (#1847)",
      "author": {
        "name": "David Corbacho",
        "email": "davidcorbacho@gmail.com",
        "date": "2023-06-07T12:59:48Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/881333?v=4"
      },
      "diffObj": {
        "a/docs/recipes/recipes.mdx": [
          {
            "+": "+import { subscribeWithSelector } from 'zustand/middleware'\n+import { shallow } from 'zustand/shallow'\n",
            "-": "-import { subscribeWithSelector, shallow } from 'zustand/middleware'\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "3a365a0804c10c18d263c4cece8cddf83dd9debd",
      "url": "https://github.com/pmndrs/zustand/commit/3a365a0804c10c18d263c4cece8cddf83dd9debd",
      "message": "docs: added a new third party lib (#1843)\n\n* docs: added a new third party lib\r\n\r\n* chore: prettier",
      "author": {
        "name": "Romain",
        "email": "31577471+Romainlg29@users.noreply.github.com",
        "date": "2023-06-07T07:53:44Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/31577471?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [use-broadcast-ts](https://github.com/Romainlg29/use-broadcast) — Zustand middleware to share state between tabs.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "618c2e5a7611091624293d20ca2ce77c3e5b8996",
      "url": "https://github.com/pmndrs/zustand/commit/618c2e5a7611091624293d20ca2ce77c3e5b8996",
      "message": "docs(readme): fix import of \"produce\" function (#1844)",
      "author": {
        "name": "Leo López",
        "email": "jorg.leonrd@gmail.com",
        "date": "2023-06-07T01:41:19Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/26677431?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+import { produce } from 'immer'\n",
            "-": "-import produce from 'immer'\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "286e4436c789d006064dc9cff45542077c25d68d",
      "url": "https://github.com/pmndrs/zustand/commit/286e4436c789d006064dc9cff45542077c25d68d",
      "message": "docs: persist and connect state with url (#1804)\n\n* docs: persist and connect state with url\r\n\r\n* ran prettier\r\n\r\n* remove line\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>\r\n\r\n* from review comments\r\n\r\n---------\r\n\r\nCo-authored-by: celinecheng <celine.cheng@capitalone.com>\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>",
      "author": {
        "name": "Celine Cheng",
        "email": "52513099+celineling@users.noreply.github.com",
        "date": "2023-05-17T11:52:02Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/52513099?v=4"
      },
      "diffObj": {
        "a/docs/guides/connect-to-state-with-url-hash.md": [
          {
            "+": "+title: Connect to state with URL\n",
            "-": "-title: Connect to state with URL hash\n"
          },
          {
            "+": "+## Connect State with URL Hash\n",
            "-": "-## State is connected with URL hash\n"
          },
          {
            "+": "+### CodeSandbox Demo\n",
            "-": "-## CodeSandbox Demo\n"
          },
          {
            "+": "+<https://codesandbox.io/s/zustand-state-with-url-hash-demo-f29b88?file=/src/store/index.ts>\n+\n+## Persist and Connect State with URL Parameters (Example: URL Query Parameters)\n+\n+There are times when you want to conditionally connect the state to the URL.\n+This example depicts usage of the URL query parameters\n+while keeping it synced with another persistence implementation, like `localstorage`.\n+\n+If you want the URL params to always populate, the conditional check on `getUrlSearch()` can be removed.\n+\n+The implementation below will update the URL in place, without refresh, as the relevant states change.\n+\n+```ts\n+import { create } from 'zustand'\n+import { persist, StateStorage, createJSONStorage } from 'zustand/middleware'\n+\n+const getUrlSearch = () => {\n+  return window.location.search.slice(1)\n+}\n+\n+const persistentStorage: StateStorage = {\n+  getItem: (key): string => {\n+    // Check URL first\n+    if (getUrlSearch()) {\n+      const searchParams = new URLSearchParams(getUrlSearch())\n+      const storedValue = searchParams.get(key)\n+      return JSON.parse(storedValue)\n+    } else {\n+      // Otherwise, we should load from localstorage or alternative storage\n+      return JSON.parse(localStorage.getItem(key))\n+    }\n+  },\n+  setItem: (key, newValue): void => {\n+    // Check if query params exist at all, can remove check if always want to set URL\n+    if (getUrlSearch()) {\n+      const searchParams = new URLSearchParams(getUrlSearch())\n+      searchParams.set(key, JSON.stringify(newValue))\n+      window.history.replaceState(null, null, `?${searchParams.toString()}`)\n+    }\n+\n+    localStorage.setItem(key, JSON.stringify(newValue))\n+  },\n+  removeItem: (key): void => {\n+    const searchParams = new URLSearchParams(getUrlSearch())\n+    searchParams.delete(key)\n+    window.location.search = searchParams.toString()\n+  },\n+}\n+\n+let localAndUrlStore = (set) => ({\n+  typesOfFish: [],\n+  addTypeOfFish: (fishType) =>\n+    set((state) => ({ typesOfFish: [...state.typesOfFish, fishType] })),\n+\n+  numberOfBears: 0,\n+  setNumberOfBears: (newNumber) =>\n+    set((state) => ({ numberOfBears: newNumber })),\n+})\n+\n+let storageOptions = {\n+  name: 'fishAndBearsStore',\n+  storage: persistentStorage,\n+}\n+\n+const useLocalAndUrlStore = create(persist(localAndUrlStore, storageOptions))\n+\n+export default localAndUrlStore\n+```\n+\n+When generating the URL from a component, you can call buildShareableUrl:\n+\n+```ts\n+const buildURLSuffix = (params, version = 0) => {\n+  const searchParams = new URLSearchParams()\n+\n+  const zustandStoreParams = {\n+    state: {\n+      typesOfFish: params.typesOfFish,\n+      numberOfBears: params.numberOfBears,\n+    },\n+    version: version, // version is here because that is included with how Zustand sets the state\n+  }\n+\n+  // The URL param key should match the name of the store, as specified as in storageOptions above\n+  searchParams.set('fishAndBearsStore', JSON.stringify(zustandStoreParams))\n+  return searchParams.toString()\n+}\n+\n+export const buildShareableUrl = (params, version) => {\n+  return `${window.location.origin}?${buildURLSuffix(params, version)}`\n+}\n+```\n+\n+The generated URL would look like (here without any encoding, for readability):\n+\n+`https://localhost/search?fishAndBearsStore={\"state\":{\"typesOfFish\":[\"tilapia\",\"salmon\"],\"numberOfBears\":15},\"version\":0}}`\n",
            "-": "-https://codesandbox.io/s/zustand-state-with-url-hash-demo-f29b88?file=/src/store/index.ts\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 4,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "56ab6db790feca46016d893467cece90600eeca0",
      "url": "https://github.com/pmndrs/zustand/commit/56ab6db790feca46016d893467cece90600eeca0",
      "message": "docs: fixes typo on variable name (#1810)",
      "author": {
        "name": "Alex S",
        "email": "bobylito@users.noreply.github.com",
        "date": "2023-05-17T11:11:58Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/393765?v=4"
      },
      "diffObj": {
        "a/docs/guides/auto-generating-selectors.md": [
          {
            "+": "+const increment = useBearStore.use.increment()\n",
            "-": "-const increase = useBearStore.use.increment()\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "639aa00699aaa0e987d605b7a58541b3b186f160",
      "url": "https://github.com/pmndrs/zustand/commit/639aa00699aaa0e987d605b7a58541b3b186f160",
      "message": "docs(recipes): fix description of devtools store naming (#1792)",
      "author": {
        "name": "Brendan Dash",
        "email": "61053131+Debbl@users.noreply.github.com",
        "date": "2023-05-05T12:30:40Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/61053131?v=4"
      },
      "diffObj": {
        "a/docs/recipes/recipes.mdx": [
          {
            "+": "+Optionally, you can name the store with a second argument `devtoolsOptions`:\n+`devtools(store, { store: \"MyStore\" })`, which will be prefixed to your actions.\n",
            "-": "-Optionally, you can name the store with a second argument:\n-`devtools(store, \"MyStore\")`, which will be prefixed to your actions.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "e71e313bd715af92bf235c4240fb9267ddaa5b4f",
      "url": "https://github.com/pmndrs/zustand/commit/e71e313bd715af92bf235c4240fb9267ddaa5b4f",
      "message": "docs(typescript): fix bounded use store example (#1779)\n\n* test: changer\r\n\r\n* docs: fix abstract bounded store hook TS example\r\n\r\nFixes type issues due to optional arg:\r\nhttps://github.com/pmndrs/zustand/discussions/1564#discussioncomment-5735802\r\n\r\n* fix: pr feedback",
      "author": {
        "name": "Daniels L",
        "email": "dannlee@gmail.com",
        "date": "2023-04-28T08:40:42Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/751279?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+You can also make an abstract `createBoundedUseStore` function if you need to create bounded `useStore` hooks often and want to DRY things up...\n",
            "-": "-You can also make an abstract `createBoundedUseStore` if you create bounded `useStore`s often and want to DRY things up...\n"
          },
          {
            "+": "+  useStore(store, selector as never, equals)) as <S extends StoreApi<unknown>>(\n",
            "-": "-  useStore(store, selector as any, equals)) as <S extends StoreApi<unknown>>(\n"
          },
          {
            "+": "+    selector: (state: ExtractState<S>) => T,\n",
            "-": "-    selector?: (state: ExtractState<S>) => T,\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "a999f7ac04480588e6ae30f19b063886fa172721",
      "url": "https://github.com/pmndrs/zustand/commit/a999f7ac04480588e6ae30f19b063886fa172721",
      "message": "docs: fix document error of persist with hydration (#1758)\n\n* docs: fix document error of persist with hydration\r\n\r\n* Update persisting-store-data.md\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>\r\n\r\n* Update persisting-store-data.md\r\n\r\n---------\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>",
      "author": {
        "name": "Arvin Xu",
        "email": "arvinx@foxmail.com",
        "date": "2023-04-18T09:49:56Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/28616219?v=4"
      },
      "diffObj": {
        "a/docs/integrations/persisting-store-data.md": [
          {
            "+": "+and it is left up to you to manually call `rehydrate()`.\n",
            "-": "-and it is left up to you to manually call `reHydrate()`.\n"
          },
          {
            "+": "+import { useBoundStore } from './path-to-store';\n",
            "-": "-export function StoreConsumer(){\n-  const store = useBoundStore();\n"
          },
          {
            "+": "+export function StoreConsumer() {\n",
            "-": ""
          },
          {
            "+": "+    useBoundStore.persist.rehydrate();\n",
            "-": "-    store.persist.reHydrate();\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 4,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "5b8abb2f70b3b958f5ae98d5a8a4bb2ecb3579f0",
      "url": "https://github.com/pmndrs/zustand/commit/5b8abb2f70b3b958f5ae98d5a8a4bb2ecb3579f0",
      "message": "docs: added 'zukeeper' to integrations/third-party-libraries (#1670)",
      "author": {
        "name": "Chris Olmsted",
        "email": "107763914+ctolmsted@users.noreply.github.com",
        "date": "2023-03-02T00:45:08Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/107763914?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [zukeeper](https://github.com/oslabs-beta/Zukeeper) - Native devtools with state and action tracking, diffing, tree display, and time travel\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "c1970e9358189fbcde952fe55c7a9a4d21e93935",
      "url": "https://github.com/pmndrs/zustand/commit/c1970e9358189fbcde952fe55c7a9a4d21e93935",
      "message": "docs: add zustand-vue/zustand-pub in third-party-libraries.md and run prettier (#1633)",
      "author": {
        "name": "Devin Deng",
        "email": "awesomedevin.deng@gmail.com",
        "date": "2023-02-14T02:45:53Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/22369504?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [zustand-pub](https://github.com/AwesomeDevin/zustand-pub) - Cross-Application/Cross-Framework State Management And Sharing based on zustand and zustand-vue for React/Vue.\n+- [zustand-querystring](https://github.com/nitedani/zustand-querystring) — A Zustand middleware that syncs the store with the querystring.\n+- [zustand-rx](https://github.com/patdx/zustand-rx) — A Zustand middleware enabling you to subscribe to a store as an RxJS Observable.\n",
            "-": ""
          },
          {
            "+": "+- [zustand-vue](https://github.com/AwesomeDevin/zustand-vue) - State management for vue (Vue3 / Vue2) based on zustand.\n",
            "-": ""
          },
          {
            "-": "-- [zustand-rx](https://github.com/patdx/zustand-rx) — A Zustand middleware enabling you to subscribe to a store as an RxJS Observable.\n-- [zustand-querystring](https://github.com/nitedani/zustand-querystring) — A Zustand middleware that syncs the store with the querystring.\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "67f06df9be61704db4f2f3be27db3a6f424a68a0",
      "url": "https://github.com/pmndrs/zustand/commit/67f06df9be61704db4f2f3be27db3a6f424a68a0",
      "message": "docs: include \"ngx-zustand\" to third-party-libraries.md (#1605)",
      "author": {
        "name": "João Paulo Lousada",
        "email": "32400930+JoaoPauloLousada@users.noreply.github.com",
        "date": "2023-02-07T02:21:10Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/32400930?v=4"
      },
      "diffObj": {
        "a/docs/integrations/third-party-libraries.md": [
          {
            "+": "+- [ngx-zustand](https://github.com/JoaoPauloLousada/ngx-zustand) - A Zustand adapter for Angular.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "d2700adfff7820d034a7f37c3690e2f65e29b664",
      "url": "https://github.com/pmndrs/zustand/commit/d2700adfff7820d034a7f37c3690e2f65e29b664",
      "message": "docs(contributing): reformat and fix typos, extend the committing guide (#1592)",
      "author": {
        "name": "Blazej Sewera",
        "email": "code@sewera.dev",
        "date": "2023-02-02T11:19:51Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/18354178?v=4"
      },
      "diffObj": {
        "a/CONTRIBUTING.md": [
          {
            "+": "+If you have found what you think is a bug,\n+and for usage questions,\n+please [start a discussion].\n",
            "-": "-If you have found what you think is a bug, please [start a discussion](https://github.com/pmndrs/zustand/discussions/new).\n-\n-Also for usage questions, please [start a discussion](https://github.com/pmndrs/zustand/discussions/new).\n"
          },
          {
            "+": "+If you are here to suggest a feature,\n+first [start a discussion] if it does not already exist.\n+From there, we will discuss use-cases for the feature,\n+and then finally discuss how it could be implemented.\n+\n+[start a discussion]: https://github.com/pmndrs/zustand/discussions/new\n",
            "-": "-If you are here to suggest a feature, first [start a discussion](https://github.com/pmndrs/zustand/discussions/new) if it does not already exist. From there, we will discuss use-cases for the feature and then finally discuss how it could be implemented.\n"
          },
          {
            "+": "+If you want to contribute to the [documentation](./docs/):\n+\n+- [Fork Zustand](https://github.com/pmndrs/zustand/fork) into your Github account;\n+- Clone your fork locally;\n+- Separately, clone the [pmndrs/website repo](https://github.com/pmndrs/website)\n+  (you don't need to fork it);\n+  - This repo runs most of the doc websites under the pmndrs banner,\n+    including React Three Fiber and Zustand\n+  - Switch to the `docs` branch;\n+- Now, you should have two repositories locally.\n+- Inside the website directory, run `npm install` and then `npm run dev`;\n+  - This will launch the website locally.\n+    You should be able to open and see the various documentation sites.\n+- One little catch here is that the website reads directly from Github, not locally.\n+  As a temporary measure, you can do the following\n+  (don't commit any changes made in the pmndrs/website repo):\n+  - In your own Zustand fork, create a new working branch\n+    (further related to as `[your-branch]`);\n+  - Inside website codebase, open `src/data/libraries.ts`;\n+  - Within the `zustand` key,\n+    change `docs: 'pmndrs/zustand/main/docs'`\n+    to `docs: '[your-username]/zustand/[your-branch]/docs'`;\n+    - For example, `docs: 'chrisk-7777/zustand/docs-test/docs'`,\n+  - Now, inside your Zustand fork,\n+    make the appropriate changes to the documentation files in the `docs` folder;\n+  - Commit and push those changes to `[your-branch]` in your Zustand fork;\n+    - Commit messages follow the [conventional commits] style.\n+      See the [committing guidelines].\n+  - Restart the website locally (`control + c` -> `npm run dev`);\n+    - Sometimes you may have to also remove the `temp` directory\n+      in the website directory (`rm -r temp`);\n+  - Visit the Zustand docs locally\n+    and you should see the content you've just pushed.\n+- Once you are happy with your changes:\n+  - If you are okay with `[your-branch]` name, use it for the PR, or\n+  - Create a new branch and push the changes to that one.\n+  - For now there are no formal naming conventions for branches;\n+- Jump back to the [official repo](https://github.com/pmndrs/zustand)\n+  and open a PR from the branch you chose.\n",
            "-": "-- Fork the [Zustand repo](https://github.com/pmndrs/zustand/) into your own Github account\n-- Locally, clone down your fork\n-- Separately, clone the [Pmdrs-Website](https://github.com/pmndrs/website}\n-  - this runs most of the doc websites under the pmndrs banner, including React Three Fiber and Zustand\n-  - Switch to the `docs`-branch.\n-- Now, you should have two repositories locally\n-- Inside the website folder, run `npm install` and then `npm run dev`\n-  - This will launch the website locally. You should be able to open and see the various documentation sites\n-- One little catch here is that the website reads directly from Github, not locally. As a temporary measure, you can do the following (without actually committing these changes):\n-  - Inside website codebase, open `src/data/libraries.ts`\n-  - Within the `Zustand` key, change `docs: 'pmndrs/zustand/main/docs`, to `docs: '[username]/zustand/[test-branch]/docs'`,\n-    - For example,`docs: 'chrisk-7777/zustand/docs-test/docs'`,\n-  - Now, inside your Zustand fork, make the appropriate changes to the `.md` files in the `/docs` folder\n-  - Push those changes up to your fork on a branch such as `docs-test` (_this should match whatever you set it to above in `libraries.ts`_\n-  - Restart the website locally (`control + c` -> `npm run dev`)\n-  - Visit the Zustand docs locally, and you should see the content you just pushed up\n-- Once you are happy with your changes, commit them to a real branch and push up to your fork\n-  - For now there are no formal naming conventions for branches.\n-  - Commit messages follow a [conventional commit](#committing) style.\n-- Jump back to the official repo (this one) and raise a PR from the branch you just pushed up\n"
          },
          {
            "+": "+If you would like to contribute by fixing an open issue\n+or developing a new feature,\n+you can use this suggested workflow:\n+\n+- Fork this repository;\n+- Create a new feature branch based on the `main` branch;\n+- Install dependencies by running `yarn`\n+  ([version 1](https://classic.yarnpkg.com/lang/en/docs/install));\n+- Create failing tests for your fix or new feature;\n+- Implement your changes and confirm that all test are passing.\n+  You can run the tests continuously during development\n+  with the `yarn test:dev` command.\n+- If you want to test it in a React project:\n+  - Either use `yarn link`, or\n+  - Use the `yalc` package.\n+- Commit your changes (see the [committing guidelines]).\n+- Submit a PR for review.\n+\n+[committing guidelines]: #committing\n",
            "-": "-If you would like to contribute by fixing an open issue or developing a new feature you can use this suggested workflow:\n-\n-- Fork this repository.\n-- Create a new feature branch based off the `main` branch.\n-- Install dependencies by running `$ yarn`. [(version 1)](https://classic.yarnpkg.com/lang/en/docs/install)\n-- Create failing tests for your fix or new feature.\n-- Implement your changes and confirm that all test are passing. You can run the tests continuously during development via the `$ yarn test:dev` command.\n-- If you want to test it in a React project you can either use `$ yarn link` or the `yalc` package.\n-- Git stage your required changes and commit (see below commit guidelines).\n-- Submit PR for review.\n"
          },
          {
            "+": "+We are applying [conventional commits] here.\n+In short, that means a commit has to be one of the following types:\n+\n+- **feat**: A new feature.\n+- **fix**: A bug fix.\n+- **docs**: Documentation-only changes.\n+- **refactor**: A code change that neither fixes a bug nor adds a feature.\n+- **test**: Adding missing or correcting existing tests.\n+- **chore**: Changes to the build process or auxiliary tools and libraries,\n+  such as documentation generation\n+\n+If you are unfamiliar with the usage of conventional commits,\n+the short version is to simply specify the type as a first word,\n+and follow it with a colon and a space, then start your message\n+from a lowercase letter, like this:\n+\n+```\n+feat: add a 'BearStorage' storage type support\n+```\n+\n+You can also specify the scope of the commit in the parentheses after a type:\n+\n+```\n+fix(middleware): change the bear parameter in devtools\n+```\n",
            "-": "-We are applying the ideas of [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/) here. In short that means that commit has to be one of the following (a _type_ in conventional commit speech):\n"
          },
          {
            "+": "+[conventional commits]: https://www.conventionalcommits.org/en/v1.0.0/\n",
            "-": "-- **feat**: A new feature\n-- **fix**: A bug fix\n-- **docs**: Documentation only changes\n-- **refactor**: A code change that neither fixes a bug nor adds a feature\n-- **test**: Adding missing or correcting existing tests\n-- **chore**: Changes to the build process or auxiliary tools and libraries such as documentation\n-  generation\n"
          },
          {
            "+": "+Please try to keep your pull requests focused and small in scope,\n+and avoid including unrelated commits.\n",
            "-": "-Please try to keep your pull request focused in scope and avoid including unrelated commits.\n"
          },
          {
            "+": "+After you have submitted your pull request,\n+we'll try to get back to you as soon as possible.\n+We may suggest some changes or improvements.\n",
            "-": "-After you have submitted your pull request, we'll try to get back to you as soon as possible. We may suggest some changes or improvements.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 8,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "f508b2c315a50b8257775a301c31a227af4de5e4",
      "url": "https://github.com/pmndrs/zustand/commit/f508b2c315a50b8257775a301c31a227af4de5e4",
      "message": "docs(typescript): clean up bounded `useStore` recipe (#1581)\n\n* Make bounded useStore recipe section minimal\r\n\r\n* Add a receipe for `createBoundedUseStore`\r\n\r\n* run prettier\r\n\r\n* use vanilla store\r\n(as the react store is already a bounded useStore hook)",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2023-01-29T23:23:26Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+### Bounded `useStore` hook for vanilla stores\n",
            "-": "-### Using a vanilla store as a bound store\n-\n-Create your vanilla store:\n"
          },
          {
            "+": "+import { useStore } from 'zustand'\n",
            "-": ""
          },
          {
            "+": "+const bearStore = createStore<BearState>()((set) => ({\n+  bears: 0,\n",
            "-": "-export const initialBearState = { bears: 0 }\n-export const vanillaBearStore = createStore<BearState>((set, getState) => ({\n-  ...initialBearState,\n"
          },
          {
            "-": "-```\n-\n-Create a hook to provide a bound store to be used in your component:\n-\n-```ts\n-import { useStore } from 'zustand'\n",
            "+": ""
          },
          {
            "+": "+function useBearStore(): BearState\n+function useBearStore<T>(\n",
            "-": "-export function useBoundBearStore(): BearState\n-export function useBoundBearStore<T>(\n"
          },
          {
            "+": "+function useBearStore<T>(\n+  selector?: (state: BearState) => T,\n+  equals?: (a: T, b: T) => boolean\n+) {\n+  return useStore(bearStore, selector!, equals)\n",
            "-": "-export function useBoundBearStore(selector?: any, equals?: any) {\n-  return useStore(vanillaBearStore, selector, equals)\n"
          },
          {
            "+": "+You can also make an abstract `createBoundedUseStore` if you create bounded `useStore`s often and want to DRY things up...\n",
            "-": "-> **_NOTE:_** We prefer function overloading here, as this closely follows the definition of `useStore` itself.  \n-> If you are not familiar with this pattern, just have a look here: [Typescript Docs](https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads)\n-\n-Now you can access your vanilla store (e.g. in your tests) like:\n"
          },
          {
            "+": "+import { useStore, StoreApi } from 'zustand'\n+import { createStore } from 'zustand/vanilla'\n",
            "-": "-import { vanillaBearStore, initialBearState } from './BearStore'\n-\n-describe('MyComponent should', () => {\n-  // remember to reset the store\n-  beforeEach(() => {\n-    vanillaBearStore.setState(initialBearState)\n-  })\n-\n-  it('set the value', () => {\n-    const store = vanillaBearStore\n-    // do the test\n-    expect(store.getState().bears).toEqual(0)\n-  })\n-})\n-```\n-\n-And access the store in your component\n"
          },
          {
            "+": "+interface BearState {\n+  bears: number\n+  increase: (by: number) => void\n+}\n",
            "-": "-```tsx\n-import { useBoundBearStore } from './BearStore'\n"
          },
          {
            "+": "+const bearStore = createStore<BearState>()((set) => ({\n+  bears: 0,\n+  increase: (by) => set((state) => ({ bears: state.bears + by })),\n+}))\n",
            "-": "-export const BearComponent = () => {\n-  const bears = useBoundBearStore((state) => state.bears)\n"
          },
          {
            "+": "+const createBoundedUseStore = ((store) => (selector, equals) =>\n+  useStore(store, selector as any, equals)) as <S extends StoreApi<unknown>>(\n+  store: S\n+) => {\n+  (): ExtractState<S>\n+  <T>(\n+    selector?: (state: ExtractState<S>) => T,\n+    equals?: (a: T, b: T) => boolean\n+  ): T\n",
            "-": "-  return <div>{bears}</div>\n"
          },
          {
            "-": "-```\n",
            "+": ""
          },
          {
            "+": "+type ExtractState<S> = S extends { get: () => infer X } ? X : never\n",
            "-": "-If you want to use middlewares with your store:\n"
          },
          {
            "+": "+const useBearStore = createBoundedUseStore(bearStore)\n",
            "-": "-```ts\n-import { createStore } from 'zustand/vanilla'\n-import { devtools } from 'zustand/middleware'\n-\n-export const vanillaBearStore = createStore<BearState>()(\n-  devtools((set, getState) => ({\n-    ...initialBearState,\n-    increase: (by) => set((state) => ({ bears: state.bears + by })),\n-  }))\n-)\n"
          },
          {
            "-": "-For more information about why there are extra parentheses,\n-please see the [Basic usage section](#basic-usage).\n-\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 15,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "2f2fee4803044b568f5fc1842e106ec68a770d2d",
      "url": "https://github.com/pmndrs/zustand/commit/2f2fee4803044b568f5fc1842e106ec68a770d2d",
      "message": "Remove warnings and clean up getting started docs (#1559)\n\n* docs: remove now superfluous warning messages\r\n\r\nCo-authored-by: Chris K <55621012+chrisk-7777@users.noreply.github.com>\r\n\r\n* docs: clean up getting started doc group\r\n\r\n* docs: remove unnecessary comma from comparison page\r\n\r\n* docs: reformat recipies (1/2)\r\n\r\n* docs: reformat recipies (2/2)\r\n\r\nCo-authored-by: Chris K <55621012+chrisk-7777@users.noreply.github.com>",
      "author": {
        "name": "Blazej Sewera",
        "email": "code@sewera.dev",
        "date": "2023-01-20T00:06:17Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/18354178?v=4"
      },
      "diffObj": {
        "a/docs/getting-started/comparison.md": [
          {
            "+": "+description: How Zustand stacks up against similar libraries\n+nav: 1\n",
            "-": "-description:\n-nav: 2\n"
          },
          {
            "+": "+Zustand is one of many state management libraries for React.\n+On this page we will discuss Zustand\n+in comparison to some of these libraries,\n+including Redux, Valtio, Jotai, and Recoil.\n",
            "-": "-Zustand is one of many state management libraries for React. On this page we\n-will discuss Zustand in comparison to some of these libraries, including Redux,\n-Valtio, Jotai, and Recoil.\n"
          },
          {
            "+": "+Each library has its own strengths and weaknesses,\n+and we will compare key differences and similarities between each.\n",
            "-": "-Each library has its own strengths and weaknesses, and we will compare key\n-differences and similarities between each.\n"
          },
          {
            "+": "+Conceptually, Zustand and Redux are quite similar,\n+both are based on an immutable state model.\n+However, Redux requires your app to be wrapped\n+in context providers; Zustand does not.\n",
            "-": "-Conceptually, Zustand and Redux are quite similar, both are based on an\n-immutable state model. However, Redux, requires your app to be wrapped in\n-context providers; Zustand does not.\n"
          },
          {
            "+": "+When it comes to render optimizations within your app,\n+there are no major differences in approach between Zustand and Redux.\n+In both libraries it is recommended\n+that you manually apply render optimizations by using selectors.\n",
            "-": "-When it comes to render optimizations within your app, there are no major\n-differences in approach between Zustand and Redux. In both libraries it is\n-recommended that you manually apply render optimizations by using selectors.\n"
          },
          {
            "+": "+Zustand and Valtio approach state management\n+in a fundamentally different way.\n+Zustand is based on the **immutable** state model,\n+while Valtio is based on the **mutable** state model.\n",
            "-": "-Zustand and Valtio approach state management in a fundamentally different way.\n-Zustand is based on the **immutable** state model, while Valtio is based on the\n-**mutable** state model.\n"
          },
          {
            "+": "+The other difference between Zustand and Valtio\n+is Valtio makes render optimizations through property access.\n+However, with Zustand, it is recommended that\n+you manually apply render optimizations by using selectors.\n",
            "-": "-The other difference between Zustand and Valtio is Valtio makes render\n-optimizations through property access. However, with Zustand, it is recommended\n-that you manually apply render optimizations by using selectors.\n"
          },
          {
            "+": "+There are two major differences between Zustand and Jotai.\n+Firstly, Zustand is a single store,\n+while Jotai consists of primitive atoms\n+that can be composed together.\n+Secondly, a Zustand store is an external store,\n+making it more suitable when access outside of React is required.\n",
            "-": "-There are two major differences between Zustand and Jotai. Firstly, Zustand is a\n-single store, while Jotai consists of primitive atoms that can be composed\n-together. Secondly, a Zustand store is an external store, making it more\n-suitable when access outside of React is required.\n"
          },
          {
            "+": "+Jotai achieves render optimizations through atom dependency.\n+However, with Zustand it is recommended that\n+you manually apply render optimizations by using selectors.\n",
            "-": "-Jotai achieves render optimizations through atom dependency. However, with\n-Zustand it is recommended that you manually apply render optimizations by using\n-selectors.\n"
          },
          {
            "+": "+The difference between Zustand and Recoil\n+is similar to that between Zustand and Jotai.\n+Recoil depends on atom string keys\n+instead of atom object referential identities.\n+Additionally, Recoil needs to wrap your app in a context provider.\n",
            "-": "-The difference between Zustand and Recoil is similar to that between Zustand and\n-Jotai. Recoil depends on atom string keys instead of atom object referential\n-identities, additionally, Recoil needs to wrap your app in a context provider.\n"
          },
          {
            "+": "+Similar to previous optimization comparisons,\n+Recoil makes render optimizations through atom dependency.\n+Whereas with Zustand, it is recommended that\n+you manually apply render optimizations by using selectors.\n",
            "-": "-Similar to previous optimization comparisons, Recoil makes render optimizations\n-through atom dependency. Whereas, with Zustand, it is recommended that you\n-manually apply render optimizations by using selectors.\n"
          }
        ],
        "a/docs/getting-started/concepts.md": [
          {
            "-": "-title: Concepts\n-description:\n-nav: 1\n",
            "+": ""
          },
          {
            "-": "-\n-<Hint>\n-  ⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n-</Hint>\n",
            "+": ""
          }
        ],
        "a/docs/getting-started/introduction.md": [
          {
            "+": "+---\n+title: Introduction\n+description: How to use Zustand\n+nav: 0\n+---\n+\n+<div class=\"flex justify-center mb-4\">\n+  <img src=\"https://github.com/pmndrs/zustand/raw/main/bear.jpg\" />\n+</div>\n+\n+A small, fast, and scalable bearbones state management solution.\n+Zustand has a comfy API based on hooks.\n+It isn't boilerplatey or opinionated,\n+but has enough convention to be explicit and flux-like.\n+\n+Don't disregard it because it's cute, it has claws!\n+Lots of time was spent to deal with common pitfalls,\n+like the dreaded [zombie child problem],\n+[React concurrency], and [context loss]\n+between mixed renderers.\n+It may be the one state manager in the React space that gets all of these right.\n+\n+You can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n+\n+[zombie child problem]: https://react-redux.js.org/api/hooks#stale-props-and-zombie-children\n+[React concurrency]: https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md\n+[context loss]: https://github.com/facebook/react/issues/13332\n+\n+## Installation\n+\n+Zustand is available as a package on NPM for use:\n+\n+```bash\n+# NPM\n+npm install zustand\n+\n+# Yarn\n+yarn add zustand\n+```\n+\n+## First create a store\n+\n+Your store is a hook!\n+You can put anything in it: primitives, objects, functions.\n+The `set` function _merges_ state.\n+\n+```js\n+import { create } from 'zustand'\n+\n+const useStore = create((set) => ({\n+  bears: 0,\n+  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n+  removeAllBears: () => set({ bears: 0 }),\n+}))\n+```\n+\n+## Then bind your components, and that's it!\n+\n+You can use the hook anywhere, without the need of providers.\n+Select your state and the consuming component\n+will re-render when that state changes.\n+\n+```jsx\n+function BearCounter() {\n+  const bears = useStore((state) => state.bears)\n+  return <h1>{bears} around here...</h1>\n+}\n+\n+function Controls() {\n+  const increasePopulation = useStore((state) => state.increasePopulation)\n+  return <button onClick={increasePopulation}>one up</button>\n+}\n+```\n",
            "-": ""
          }
        ],
        "a/docs/getting-started/introduction.mdx": [
          {
            "-": "-title: Introduction\n-description: How to use Zustand\n-nav: 0\n",
            "+": ""
          },
          {
            "-": "-\n-<Hint>\n-  ⚠️ This doc is still under construction.\n-  https://github.com/pmndrs/zustand/discussions/1033\n-</Hint>\n-\n-<div class=\"flex justify-center mb-4\">\n-  <img src=\"https://github.com/pmndrs/zustand/raw/main/bear.jpg\" />\n-</div>\n-\n-A small, fast and scalable bearbones state-management solution. Zustand has a comfy api based on hooks. It isn't boilerplatey or opinionated, but still has enough to be explicit and flux-like.\n-\n-Don't disregard it because it's cute, it has claws! Lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [React concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n-\n-You can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n-\n-## Installation\n-\n-Zustand is available as a package on NPM for use:\n-\n-```bash\n-# NPM\n-npm install zustand\n-\n-# Yarn\n-yarn add zustand\n-```\n-\n-## First create a store\n-\n-Your store is a hook! You can put anything in it: primitives, objects, functions. The `set` function _merges_ state.\n-\n-```jsx\n-import { create } from 'zustand'\n-\n-const useStore = create((set) => ({\n-  bears: 0,\n-  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n-  removeAllBears: () => set({ bears: 0 }),\n-}))\n-```\n-\n-## Then bind your components, and that's it!\n-\n-You can use the hook anywhere, without the need of providers. Select your state and the consuming component will re-render when that state changes.\n-\n-```jsx\n-function BearCounter() {\n-  const bears = useStore((state) => state.bears)\n-  return <h1>{bears} around here ...</h1>\n-}\n-\n-function Controls() {\n-  const increasePopulation = useStore((state) => state.increasePopulation)\n-  return <button onClick={increasePopulation}>one up</button>\n-}\n-```\n",
            "+": ""
          }
        ],
        "a/docs/recipes/recipes.mdx": [
          {
            "-": "-⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n-\n",
            "+": ""
          },
          {
            "+": "+You can, but bear in mind that it will cause\n+the component to update on every state change!\n",
            "-": "-You can, but bear in mind that it will cause the component to update on every state change!\n"
          },
          {
            "+": "+It detects changes with strict-equality (`old === new`) by default.\n+This is efficient for atomic state picks.\n",
            "-": "-It detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n"
          },
          {
            "+": "+For more control over re-rendering,\n+you may provide an alternative equality function on the second argument.\n",
            "-": "-For more control over re-rendering, you may provide an alternative equality function on the second argument.\n"
          },
          {
            "+": "+For instance, if you want to construct\n+a single object with multiple state-picks inside,\n+similar to Redux's `mapStateToProps`,\n+you can tell Zustand that you want the object\n+to be diffed shallowly by passing the `shallow` equality function.\n",
            "-": "-For instance, if you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n"
          },
          {
            "+": "+Since you can create as many stores as you like,\n+forwarding results to succeeding selectors is as natural as it gets.\n",
            "-": "-Since you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n"
          },
          {
            "+": "+It is generally recommended to memoize selectors with `useCallback`.\n+This will prevent unnecessary computations each render.\n+It also allows React to optimize performance in concurrent mode.\n",
            "-": "-It is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n"
          },
          {
            "+": "+If a selector doesn't depend on scope,\n+you can define it outside the render function\n+to obtain a fixed reference without `useCallback`.\n",
            "-": "-If a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n"
          },
          {
            "+": "+const selector = (state) => state.berries\n",
            "-": "-const selector = state => state.berries\n"
          },
          {
            "+": "+  // ...\n+}\n",
            "-": ""
          },
          {
            "+": "+The `set` function has a second argument, `false` by default.\n+Instead of merging, it will replace the state model.\n+Be careful not to wipe out parts you rely on, like actions.\n",
            "-": "-The `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n"
          },
          {
            "+": "+Just call `set` when you're ready,\n+zustand doesn't care if your actions are async or not.\n",
            "-": "-Just call `set` when you're ready, zustand doesn't care if your actions are async or not.\n"
          },
          {
            "+": "+`set` allows fn-updates `set(state => result)`,\n+but you still have access to state outside of it through `get`.\n",
            "-": "-`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n"
          },
          {
            "+": "+  sound: 'grunt',\n",
            "-": "-  sound: \"grunt\",\n"
          },
          {
            "+": "+  },\n+}))\n",
            "-": "-  }\n-})\n"
          },
          {
            "+": "+Sometimes you need to access state in a non-reactive way,\n+or act upon the store.\n+For these cases the resulting hook\n+has utility functions attached to its prototype.\n",
            "-": "-Sometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n"
          },
          {
            "+": "+If you need to subscribe with selector,\n+`subscribeWithSelector` middleware will help.\n+With this middleware, subscribe accepts an additional signature:\n",
            "-": "-If you need to subscribe with selector, subscribeWithSelector middleware will help.\n-With this middleware subscribe accepts an additional signature:\n"
          },
          {
            "+": "+import { create } from 'zustand'\n",
            "-": "-import { create } from 'zustand';\n"
          },
          {
            "+": "+const useStore = create(\n+  subscribeWithSelector(() => ({ paw: true, snout: true, fur: true }))\n+)\n",
            "-": "-const useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n"
          },
          {
            "+": "+  const paw = useStore((state) => state.paw)\n+  // ...\n+}\n",
            "-": "-  const paw = useStore(state => state.paw)\n"
          },
          {
            "+": "+Zustand's core can be imported and used without the React dependency.\n+The only difference is that the create function does not return a hook,\n+but the API utilities.\n",
            "-": "-Zustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n"
          },
          {
            "+": "+## Transient updates (for frequent state changes)\n",
            "-": "-## Transient updates (for often occurring state-changes)\n"
          },
          {
            "+": "+The `subscribe` function allows components to bind\n+to a state portion without forcing a re-render on changes.\n+It is best to combine it with `useEffect`\n+for automatic unsubscribe on unmount.\n+This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws)\n+performance impact, when you are allowed to mutate the view directly.\n",
            "-": "-The subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n"
          },
          {
            "+": "+  // ...\n+}\n",
            "-": ""
          },
          {
            "+": "+Reducing nested structures is tiresome.\n+Have you tried [Immer](https://github.com/immerjs/immer)?\n",
            "-": "-Reducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n"
          },
          {
            "+": "+## Can't live without Redux-like reducers and action types?\n",
            "-": "-## Can't live without redux-like reducers and action types?\n"
          },
          {
            "+": "+Or, just use our `redux` middleware.\n+It wires up your main reducer, sets initial state,\n+and adds a dispatch function to the state itself and the vanilla API.\n",
            "-": "-Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api.\n"
          },
          {
            "+": "+Because React handles `setState` synchronously\n+if it's called outside an event handler.\n+Updating the state outside an event handler\n+will force react to update the components synchronously,\n+therefore adding the risk of encountering the zombie-child effect.\n+In order to fix this,\n+the action needs to be wrapped in `unstable_batchedUpdates`.\n",
            "-": "-Because React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\n-In order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n"
          },
          {
            "+": "+More details in [this issue](https://github.com/pmndrs/zustand/issues/302).\n",
            "-": "-More details: https://github.com/pmndrs/zustand/issues/302\n"
          },
          {
            "+": "+The `devtools` middleware takes the store function as its first argument.\n+Optionally, you can name the store with a second argument:\n+`devtools(store, \"MyStore\")`, which will be prefixed to your actions.\n+\n+`devtools` will only log actions from each separated store,\n+unlike in a typical _combined reducers_ Redux store.\n+See an approach to combining stores [here](https://github.com/pmndrs/zustand/issues/163).\n",
            "-": "-devtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.\n-devtools will only log actions from each separated store unlike in a typical _combined reducers_ redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n"
          },
          {
            "+": "+You can also use an interface:\n",
            "-": "-You can also use an `interface`:\n"
          },
          {
            "+": "+Or use `combine` and let `tsc` infer types.\n",
            "-": "-Or, use `combine` and let tsc infer types.\n"
          }
        ]
      },
      "numOfFiles": 5,
      "numOfChanges": 48,
      "qualityScore": 40
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "1df4f6110e0207e131d6c2856c83468ca85e39c2",
      "url": "https://github.com/pmndrs/zustand/commit/1df4f6110e0207e131d6c2856c83468ca85e39c2",
      "message": "docs: update testing (#1550)",
      "author": {
        "name": "Yota Hada",
        "email": "hadayota33@gmail.com",
        "date": "2023-01-18T05:48:14Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30946750?v=4"
      },
      "diffObj": {
        "a/docs/guides/testing.mdx": [
          {
            "+": "+import { create as actualCreate } from 'zustand'\n",
            "-": "-import { create: actualCreate } from 'zustand'\n"
          },
          {
            "+": "+export const create = (createState) => {\n",
            "-": "-const create = (createState) => {\n"
          },
          {
            "-": "-\n-export default create\n",
            "+": ""
          },
          {
            "+": "+import { create as actualCreate, StateCreator } from 'zustand'\n",
            "-": "-import { create: actualCreate, StateCreator } from 'zustand'\n"
          },
          {
            "+": "+export const create =\n",
            "-": "-const create =\n"
          },
          {
            "-": "-\n-export default create\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 6,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "55d0c3aec9fbca9d56432f39abba08f7b90e7edb",
      "url": "https://github.com/pmndrs/zustand/commit/55d0c3aec9fbca9d56432f39abba08f7b90e7edb",
      "message": "docs: add migration example in v3 create context (#1524)\n\n* docs: add migration example in v3 create context\r\n\r\n* fix markdown\r\n\r\n* minor fix",
      "author": {
        "name": "Daishi Kato",
        "email": "dai-shi@users.noreply.github.com",
        "date": "2023-01-10T12:54:30Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/490574?v=4"
      },
      "diffObj": {
        "a/docs/previous-versions/zustand-v3-create-context.md": [
          {
            "+": "+> **Note**: This function is deprecated in v4 and will be removed in v5. See [Migration](#migration).\n",
            "-": "-> **Note**: This function will be deprecated in v4 and removed in v5.\n"
          },
          {
            "+": "+\n+## Migration\n+\n+Discussion: https://github.com/pmndrs/zustand/discussions/1276\n+\n+Here's the diff showing how to migrate from v3 createContext to v4 API.\n+\n+```diff\n+// store.ts\n++ import { createContext, useContext } from \"react\";\n+- import create from \"zustand\";\n+- import createContext from \"zustand/context\";\n++ import { createStore, useStore } from \"zustand\";\n+\n+- const useStore = create((set) => ({\n++ const store =  createStore((set) => ({\n+    bears: 0,\n+    increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n+    removeAllBears: () => set({ bears: 0 })\n+  }));\n+\n++ const MyContext = createContext()\n+\n++ export const Provider = ({ children }) = <MyContext.Provider value={store}>{children}</MyContext.Provider>;\n+\n++ export const useMyStore = (selector) => useStore(useContext(MyContext), selector);\n+```\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "725c2c0cc08df936f42a52e3df3dec76780a6e01",
      "url": "https://github.com/pmndrs/zustand/commit/725c2c0cc08df936f42a52e3df3dec76780a6e01",
      "message": "doc: update documentation of persist (#1512)\n\n* update documentation of persist to include how to handle Map and Set with the new persist API\r\n\r\n* run prettier\r\n\r\n* Update docs/integrations/persisting-store-data.md\r\n\r\nCo-authored-by: Chris K <55621012+chrisk-7777@users.noreply.github.com>\r\n\r\n* Update docs/integrations/persisting-store-data.md\r\n\r\nCo-authored-by: Chris K <55621012+chrisk-7777@users.noreply.github.com>\r\n\r\n* Update docs/integrations/persisting-store-data.md\r\n\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>\r\n\r\n* edit suggestions\r\n\r\n* fix comment\r\n\r\nCo-authored-by: Chris K <55621012+chrisk-7777@users.noreply.github.com>\r\nCo-authored-by: Blazej Sewera <code@sewera.dev>",
      "author": {
        "name": "William",
        "email": "2178244+wcastand@users.noreply.github.com",
        "date": "2023-01-10T09:20:03Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2178244?v=4"
      },
      "diffObj": {
        "a/docs/integrations/persisting-store-data.md": [
          {
            "+": "+\n+### How do I use it with Map and Set?\n+\n+With the previous persist API, you would use `serialize`/`deserialize`\n+to deal with `Map` and `Set` and convert them into\n+an Array so they could be parsed into proper JSON.\n+\n+The new persist API has deprecated `serialize`/`deserialize`.\n+\n+Now, you will need to use the `storage` prop.\n+Let's say your state uses `Map` to handle a list of `transactions`,\n+then you can convert the Map into an Array in the storage prop:\n+\n+```ts\n+  storage: {\n+    getItem: (name) => {\n+      const str = localStorage.getItem(name)\n+      return {\n+        state: {\n+          ...JSON.parse(str).state,\n+          transactions: new Map(JSON.parse(str).state.transactions),\n+        },\n+      }\n+    },\n+    setItem: (name, newValue) => {\n+      const str = JSON.stringify({\n+        state: {\n+          ...newValue.state,\n+          transactions: Array.from(newValue.state.transactions.entries()),\n+        },\n+      })\n+      localStorage.setItem(name, str)\n+    },\n+    removeItem: (name) => localStorage.removeItem(name),\n+  },\n+```\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "f01d5afc87e42c8f666c64f03146ab2f8bb8afa4",
      "url": "https://github.com/pmndrs/zustand/commit/f01d5afc87e42c8f666c64f03146ab2f8bb8afa4",
      "message": "docs: Fixed minor grammar & typo issues (#1502)",
      "author": {
        "name": "Adil Ismail",
        "email": "adilismail62@gmail.com",
        "date": "2023-01-02T02:33:10Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/29166133?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+A small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn't boilerplatey or opinionated.\n",
            "-": "-A small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n"
          },
          {
            "+": "+Don't disregard it because it's cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n",
            "-": "-Don't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n"
          },
          {
            "+": "+Use the hook anywhere, no providers are needed. Select your state and the component will re-render on changes.\n",
            "-": "-Use the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n"
          },
          {
            "+": "+Zustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities.\n",
            "-": "-Zustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n"
          },
          {
            "+": "+Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla API.\n",
            "-": "-Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api.\n"
          },
          {
            "+": "+Assigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections.\n",
            "-": "-Assingning different connection names, will separate stores in redux devtools. This also helps grouping different stores into separate redux devtools connections.\n"
          },
          {
            "+": "+You can also log the action's type along with its payload:\n",
            "-": "-You can also log action's type along with its payload:\n"
          },
          {
            "+": "+The store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks.\n",
            "-": "-The store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate rules of hooks.\n"
          },
          {
            "+": "+The recommended method available since v4 is to use the vanilla store.\n",
            "-": "-The recommended method available since v4 is to use vanilla store.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 9,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "4a99653967bd0ada4ed1a4bd77dc64eefdaf98ff",
      "url": "https://github.com/pmndrs/zustand/commit/4a99653967bd0ada4ed1a4bd77dc64eefdaf98ff",
      "message": "docs(#1220): revise immer middleware page (#1479)\n\n- fix case in naming,\r\n- check if the code snippets are up-to-date",
      "author": {
        "name": "Blazej Sewera",
        "email": "code@sewera.dev",
        "date": "2022-12-21T02:35:17Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/18354178?v=4"
      },
      "diffObj": {
        "a/docs/guides/updating-state.md": [
          {
            "+": "+### With Immer\n",
            "-": "-### With immer\n"
          },
          {
            "+": "+Many people use [Immer](https://github.com/immerjs/immer) to update nested\n",
            "-": "-Many people use [immer](https://github.com/immerjs/immer) to update nested\n"
          },
          {
            "+": "+You can use Immer to shorten your state updates for deeply nested object. Let's\n",
            "-": "-You can use immer to shorten your state updates for deeply nested object. Let's\n"
          },
          {
            "+": "+What a reduction! Please take note of the [gotchas listed here](../integrations/immer-middleware.md).\n",
            "-": "-What a reduction!. [Please take note of the gotchas listed here](../integrations/updating-draft-states.md).\n"
          },
          {
            "+": "+Unlike Immer, optics-ts doesn't use proxies or mutation syntax.\n",
            "-": "-Unlike immer, optics-ts doesn't use proxies or mutation syntax.\n"
          }
        ],
        "a/docs/integrations/updating-draft-states.md": [
          {
            "+": "+The [Immer](https://github.com/immerjs/immer) middleware enables you\n+to use immutable state in a more convenient way.\n+Also, with Immer, you can simplify handling\n+immutable data structures in Zustand.\n",
            "-": "-The [Immer](https://github.com/immerjs/immer) middleware enables you to use an immutable state in a more convenient\n-way. Also, with `Immer` you can simplify handling immutable data structures on\n-`Zustand`.\n"
          },
          {
            "+": "+In order to use the Immer middleware in Zustand,\n+you will need to install Immer as a direct dependency.\n",
            "-": "-In order to use the Immer middleware in `Zustand`, you will need to install `Immer` as a direct dependency.\n"
          },
          {
            "+": "+In this section you will find some things\n+that you need to keep in mind when using Zustand with Immer.\n",
            "-": "-On this page we can find some things that we need to keep in mind when we are\n-using `Zustand` with `Immer`.\n"
          },
          {
            "+": "+If you are using Immer,\n+make sure you are actually following\n+[the rules of Immer](https://immerjs.github.io/immer/pitfalls).\n",
            "-": "-If you are using `Immer`, make sure you are actually following the rules of\n-[Immer](https://immerjs.github.io/immer/pitfalls).\n"
          },
          {
            "+": "+[class objects](https://immerjs.github.io/immer/complex-objects) to work.\n+If you don't do this, Immer will still mutate the object,\n+but not as a proxy, so it will also update the current state.\n+Zustand checks if the state has actually changed,\n+so since both the current state and the next state are\n+equal (if you don't do it correctly),\n+Zustand will skip calling the subscriptions.\n",
            "-": "-[class objects](https://immerjs.github.io/immer/complex-objects) to work. If\n-you don't do this, `Immer` will still mutate the object, but not as a proxy, so\n-it will also update the current state. `Zustand` checks if the state has\n-actually changed, so since both the current state as well as the next state are\n-equal (if you don't do it correctly), it will skip calling the subscriptions.\n"
          },
          {
            "+": "+- [Basic](https://codesandbox.io/s/zustand-updating-draft-states-basic-demo-zkp22g),\n+- [Advanced](https://codesandbox.io/s/zustand-updating-draft-states-advanced-demo-3znqzk).\n",
            "-": "-- Basic: https://codesandbox.io/s/zustand-updating-draft-states-basic-demo-zkp22g\n-- Advanced: https://codesandbox.io/s/zustand-updating-draft-states-advanced-demo-3znqzk\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 11,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "a1d228767fb549cf2eae1174aa804d9453eedc4d",
      "url": "https://github.com/pmndrs/zustand/commit/a1d228767fb549cf2eae1174aa804d9453eedc4d",
      "message": "Docs: added section in slices-pattern explaining how to affect multiple stores in one function (#1404)\n\n* added section in slices-pattern.md explaining how to have a function change multiple stores together\r\n\r\n* change in title and subtext for better understanding",
      "author": {
        "name": "Joel Mathew Koshy",
        "email": "joelmathewkoshy@gmail.com",
        "date": "2022-11-05T07:57:19Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/56463684?v=4"
      },
      "diffObj": {
        "a/docs/guides/slices-pattern.md": [
          {
            "+": "+### Updating multiple stores\n+\n+You can update multiple stores, at the same time, in a single function.\n+\n+```js\n+import { createBearSlice } from './bearSlice'\n+import { createFishSlice } from './fishSlice'\n+\n+export const createBearFishSlice = (set) => ({\n+  addBearAndFish: () => {\n+    createBearSlice(set).addBear()\n+    createFishSlice(set).addFish()\n+  },\n+})\n+```\n+\n+Combining all the stores together is the same as before.\n+\n+```js\n+import create from 'zustand'\n+import { createBearSlice } from './bearSlice'\n+import { createFishSlice } from './fishSlice'\n+import { createBearFishSlice } from './createBearFishSlice'\n+\n+export const useBoundStore = create((...a) => ({\n+  ...createBearSlice(...a),\n+  ...createFishSlice(...a),\n+  ...createBearFishSlice(...a),\n+}))\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "ea8415b98d4cba03defcfb23ccb1482ce1cd4540",
      "url": "https://github.com/pmndrs/zustand/commit/ea8415b98d4cba03defcfb23ccb1482ce1cd4540",
      "message": "docs(typescript): highlight the extra parenthesis for `create` (#1410)\n\n* docs(typescript): highlight the extra parenthesis for `create`\r\n\r\n* fix typo",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-11-05T03:58:21Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+The difference when using TypeScript is that instead of writing `create(...)`, you have to write `create<T>()(...)` (notice the extra parenthesis `()` too along with the type parameter) where `T` is the type of the state to annotate it. For example:\n",
            "-": "-The difference when using TypeScript is that instead of writing `create(...)`, you have to write `create<T>()(...)` where `T` is the type of the state to annotate it. For example:\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "84d1dfa30d9aebfadb14025b7270003b5b92cd39",
      "url": "https://github.com/pmndrs/zustand/commit/84d1dfa30d9aebfadb14025b7270003b5b92cd39",
      "message": "docs: Remove redundant words. (#1352)\n\ndocs: Remove redundant words.",
      "author": {
        "name": "J7N",
        "email": "jdk@jdk.name",
        "date": "2022-10-09T14:05:44Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1665220?v=4"
      },
      "diffObj": {
        "a/docs/getting-started/comparison.md": [
          {
            "+": "+suitable when access outside of React is required.\n",
            "-": "-suitable when when access outside of React is required.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "276af10d882d3e920459c531293538e6ba680111",
      "url": "https://github.com/pmndrs/zustand/commit/276af10d882d3e920459c531293538e6ba680111",
      "message": "docs: add instruction on how to install zustand package using yarn (#1330)",
      "author": {
        "name": "Joel Mathew Koshy",
        "email": "joelmathewkoshy@gmail.com",
        "date": "2022-10-09T01:08:50Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/56463684?v=4"
      },
      "diffObj": {
        "a/docs/getting-started/introduction.mdx": [
          {
            "+": "+Zustand is available as a package on NPM for use:\n+\n",
            "-": ""
          },
          {
            "+": "+# NPM\n",
            "-": ""
          },
          {
            "+": "+\n+# Yarn\n+yarn add zustand\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "200d5bc10ef5f7fbcf2d678d7c9f47f7ea2284db",
      "url": "https://github.com/pmndrs/zustand/commit/200d5bc10ef5f7fbcf2d678d7c9f47f7ea2284db",
      "message": "docs(immer-doc): add npm installation section in immer middleware docs (#1347)",
      "author": {
        "name": "Joel Mathew Koshy",
        "email": "joelmathewkoshy@gmail.com",
        "date": "2022-10-06T16:09:13Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/56463684?v=4"
      },
      "diffObj": {
        "a/docs/integrations/updating-draft-states.md": [
          {
            "+": "+The [Immer](https://github.com/immerjs/immer) middleware enables you to use an immutable state in a more convenient\n",
            "-": "-The immer middleware enables you to use an immutable state in a more convenient\n"
          },
          {
            "+": "+## Installation\n+\n+In order to use the Immer middleware in `Zustand`, you will need to install `Immer` as a direct dependency.\n+\n+```bash\n+npm install immer\n+```\n+\n+## Usage\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "e8b05d8179bb99f1986018a7ffa8ef7175a55d4e",
      "url": "https://github.com/pmndrs/zustand/commit/e8b05d8179bb99f1986018a7ffa8ef7175a55d4e",
      "message": "docs: added separate docs file for slices pattern (#1344)",
      "author": {
        "name": "Joel Mathew Koshy",
        "email": "joelmathewkoshy@gmail.com",
        "date": "2022-10-06T16:05:07Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/56463684?v=4"
      },
      "diffObj": {
        "a/docs/guides/slices-pattern.md": [
          {
            "+": "+---\n+title: Slices Pattern\n+nav: 15\n+---\n+\n+## Slicing the store into smaller stores\n+\n+Your store can become bigger and bigger and tougher to maintain as you add more features.\n+\n+You can divide your main store into smaller individual stores to achieve modularity. This is simple to accomplish in Zustand!\n+\n+The first individual store:\n+\n+```js\n+export const createFishSlice = (set) => ({\n+  fishes: 0,\n+  addFish: () => set((state) => ({ fishes: state.fishes + 1 })),\n+})\n+```\n+\n+Another individual store:\n+\n+```js\n+export const createBearSlice = (set) => ({\n+  bears: 0,\n+  addBear: () => set((state) => ({ bears: state.bears + 1 })),\n+  eatFish: () => set((state) => ({ fishes: state.fishes - 1 })),\n+})\n+```\n+\n+You can now combine both the stores into **one bounded store**:\n+\n+```js\n+import create from 'zustand'\n+import { createBearSlice } from './bearSlice'\n+import { createFishSlice } from './fishSlice'\n+\n+export const useBoundStore = create((...a) => ({\n+  ...createBearSlice(...a),\n+  ...createFishSlice(...a),\n+}))\n+```\n+\n+### Usage in a React component\n+\n+```jsx\n+import { useBoundStore } from './stores/useBoundStore'\n+\n+function App() {\n+  const bears = useBoundStore((state) => state.bears)\n+  const fishes = useBoundStore((state) => state.fishes)\n+  const addBear = useBoundStore((state) => state.addBear)\n+  return (\n+    <div>\n+      <h2>Number of bears: {bears}</h2>\n+      <h2>Number of fishes: {fishes}</h2>\n+      <button onClick={() => addBear()}>Add a bear</button>\n+    </div>\n+  )\n+}\n+\n+export default App\n+```\n+\n+## Adding middlewares\n+\n+Adding middlewares to a combined store is the same as with other normal stores.\n+\n+Adding `persist` middleware to our `useBoundStore`:\n+\n+```js\n+import create from 'zustand'\n+import { createBearSlice } from './bearSlice'\n+import { createFishSlice } from './fishSlice'\n+import { persist } from 'zustand/middleware'\n+\n+export const useBoundStore = create(\n+  persist(\n+    (...a) => ({\n+      ...createBearSlice(...a),\n+      ...createFishSlice(...a),\n+    }),\n+    { name: 'bound-store' }\n+  )\n+)\n+```\n+\n+## Usage with TypeScript\n+\n+A detailed guide on how to use the slice pattern in Zustand with TypeScript can be found [here](./typescript.md#slices-pattern).\n",
            "-": ""
          }
        ],
        "a/docs/guides/typescript.md": [
          {
            "+": "+A detailed explanation on the slices pattern can be found [here](./slices-pattern.md).\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "94dec53d9a0d061dd950d325ffe84d6fa1feb0ee",
      "url": "https://github.com/pmndrs/zustand/commit/94dec53d9a0d061dd950d325ffe84d6fa1feb0ee",
      "message": "docs: fix image spacing. fix phrasing and various grammar issues (#1333)",
      "author": {
        "name": "Chris K",
        "email": "55621012+chrisk-7777@users.noreply.github.com",
        "date": "2022-10-01T22:27:31Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/55621012?v=4"
      },
      "diffObj": {
        "a/docs/getting-started/comparison.md": [
          {
            "+": "+Conceptually, Zustand and Redux are quite similar, both are based on an\n+immutable state model. However, Redux, requires your app to be wrapped in\n+context providers; Zustand does not.\n",
            "-": "-There are no big differences between Zustand and Redux. Both are based on\n-immutable state model. Also, Redux needs to wrap your app in context providers.\n"
          },
          {
            "+": "+      // Redux Toolkit does not mutate the state, it uses the Immer library\n+      // behind scenes, allowing us to have something called \"draft state\".\n",
            "-": "-      // Redux Toolkit does not mutate the state, it use Immer library behind\n-      // scenes allow us to have something called \"draft state\".\n"
          },
          {
            "+": "+**Zustand**\n+\n",
            "-": ""
          },
          {
            "+": "+**Redux**\n+\n",
            "-": ""
          },
          {
            "+": "+      // Redux Toolkit does not mutate the state, it uses the Immer library\n+      // behind scenes, allowing us to have something called \"draft state\".\n",
            "-": "-      // Redux Toolkit does not mutate the state, it use Immer library behind\n-      // scenes allow us to have something called \"draft state\".\n"
          },
          {
            "+": "+Zustand and Valtio approach state management in a fundamentally different way.\n+Zustand is based on the **immutable** state model, while Valtio is based on the\n+**mutable** state model.\n+\n+**Zustand**\n",
            "-": "-There is a major difference between Zustand and Valtio. Zustand is based on\n-the immutable state model, while Valtio is based on the mutable state model.\n"
          },
          {
            "+": "+**Valtio**\n+\n",
            "-": ""
          },
          {
            "+": "+optimizations through property access. However, with Zustand, it is recommended\n",
            "-": "-optimizations through property access. However, with Zustand it is recommended\n"
          },
          {
            "+": "+**Zustand**\n+\n",
            "-": ""
          },
          {
            "+": "+**Valtio**\n+\n",
            "-": ""
          },
          {
            "+": "+There are two major differences between Zustand and Jotai. Firstly, Zustand is a\n+single store, while Jotai consists of primitive atoms that can be composed\n+together. Secondly, a Zustand store is an external store, making it more\n+suitable when when access outside of React is required.\n+\n+**Zustand**\n",
            "-": "-There are two major differences between Zustand and Jotai. The first one is\n-Zustand is a single store, while Jotai consists of primitive atoms and allows\n-composing them together. The last one is Zustand store is global in memory, but\n-Jotai atoms are not (are definitions that do not hold values) and that's why\n-you can not use it outside React.\n"
          },
          {
            "+": "+**Jotai**\n+\n",
            "-": ""
          },
          {
            "+": "+Jotai achieves render optimizations through atom dependency. However, with\n+Zustand it is recommended that you manually apply render optimizations by using\n+selectors.\n+\n+**Zustand**\n",
            "-": "-The other difference between Zustand and Jotai is: Jotai makes render\n-optimizations through atom dependency. However, with Zustand it is recommended that you\n-manually apply render optimizations by using selectors.\n"
          },
          {
            "+": "+**Jotai**\n+\n",
            "-": ""
          },
          {
            "+": "+The difference between Zustand and Recoil is similar to that between Zustand and\n+Recoil. Recoil depends on atom string keys instead of atom object referential\n+identities, additionally, Recoil needs to wrap your app in a context provider.\n+\n+**Zustand**\n",
            "-": "-The major difference is the same as Zustand and Recoil is: Recoil depends on\n-atom string keys instead of atom object referential identities. Also, Recoil\n-needs to wrap your app in a context provider.\n"
          },
          {
            "+": "+**Recoil**\n+\n",
            "-": ""
          },
          {
            "+": "+Similar to previous optimization comparisons, Recoil makes render optimizations\n+through atom dependency. Whereas, with Zustand, it is recommended that you\n",
            "-": "-The other difference between Zustand and Recoil is: Recoil makes render\n-optimizations through atom dependency. However, with Zustand it is recommended that you\n"
          },
          {
            "+": "+**Zustand**\n+\n",
            "-": ""
          },
          {
            "+": "+**Recoil**\n+\n",
            "-": ""
          }
        ],
        "a/docs/getting-started/concepts.md": [
          {
            "+": "+<Hint>\n+  ⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n+</Hint>\n",
            "-": "-⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n"
          }
        ],
        "a/docs/getting-started/introduction.mdx": [
          {
            "+": "+<Hint>\n+  ⚠️ This doc is still under construction.\n+  https://github.com/pmndrs/zustand/discussions/1033\n+</Hint>\n",
            "-": "-⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n"
          },
          {
            "+": "+<div class=\"flex justify-center mb-4\">\n+  <img src=\"https://github.com/pmndrs/zustand/raw/main/bear.jpg\" />\n+</div>\n",
            "-": "-<p align=\"center\">\n-  <img width=\"600\" src=\"https://github.com/pmndrs/zustand/raw/main/bear.jpg\" />\n-</p>\n"
          },
          {
            "+": "+A small, fast and scalable bearbones state-management solution. Zustand has a comfy api based on hooks. It isn't boilerplatey or opinionated, but still has enough to be explicit and flux-like.\n",
            "-": "-A small, fast and scalable bearbones state-management solution. Has a comfy api based\n-on hooks, isn't boilerplatey or opinionated, but still just enough to be explicit\n-and flux-like.\n"
          },
          {
            "+": "+Don't disregard it because it's cute, it has claws! Lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [React concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n",
            "-": "-Don't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n"
          },
          {
            "+": "+## Installation\n+\n",
            "-": ""
          },
          {
            "+": "+You can use the hook anywhere, without the need of providers. Select your state and the consuming component will re-render when that state changes.\n",
            "-": "-Use the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n"
          }
        ],
        "a/docs/guides/immutable-state-and-merging.md": [
          {
            "+": "+You can refer to [Updating nested state object values](./updating-state.md#deeply-nested-object).\n",
            "-": "-You can refer to [Updating nested state object values](./updating-nested-state-object-values.md).\n"
          }
        ],
        "a/docs/guides/updating-nested-state-object-values.md": [
          {
            "-": "-title: Updating nested state object values\n-nav: 3\n",
            "+": ""
          },
          {
            "-": "-\n-## Deeply nested object\n-\n-If you have a deep state object like this:\n-\n-```ts\n-type State = {\n-  deep: {\n-    nested: {\n-      obj: { count: number }\n-    }\n-  }\n-}\n-```\n-\n-It requires some effort to update the count value immutably.\n-\n-## Normal approach\n-\n-The normal approach is to copy state object with the spread operator `...` like so:\n-\n-```ts\n-  normalInc: () =>\n-    set((state) => ({\n-      deep: {\n-        ...state.deep,\n-        nested: {\n-          ...state.deep.nested,\n-          obj: {\n-            ...state.deep.nested.obj,\n-            count: state.deep.nested.obj.count + 1\n-          }\n-        }\n-      }\n-    })),\n-```\n-\n-This is very long!\n-\n-## With immer\n-\n-Many people use [immer](https://github.com/immerjs/immer) to update nested values. You can use immer to shorten your state updates for deeply nested object like this:\n-\n-```ts\n-  immerInc: () =>\n-    set(produce((state: State) => { ++state.deep.nested.obj.count })),\n-```\n-\n-What a reduction!. [Please take note of the gotchas listed here](../integrations/updating-draft-states.md).\n-\n-## With optics-ts\n-\n-There is another option with [optics-ts](https://github.com/akheron/optics-ts/):\n-\n-```ts\n-  opticsInc: () =>\n-    set(O.modify(O.optic<State>().path(\"deep.nested.obj.count\"))((c) => c + 1)),\n-```\n-\n-Unlike immer, optics-ts doesn't use proxies or mutation syntax.\n-\n-## With ramda\n-\n-You can also use [ramda](https://ramdajs.com/):\n-\n-```ts\n-  ramdaInc: () =>\n-    set(R.over(R.lensPath([\"deep\", \"nested\", \"obj\", \"count\"]), (c) => c + 1)),\n-```\n-\n-Both ramda and optics-ts also work with types.\n-\n-## CodeSandbox Demo\n-\n-https://codesandbox.io/s/zustand-normal-immer-optics-ramda-updating-ynn3o?file=/src/App.tsx\n",
            "+": ""
          }
        ],
        "a/docs/guides/updating-state.md": [
          {
            "+": "+---\n+title: Updating state\n+nav: 3\n+---\n+\n+## Flat updates\n+\n+Updating state with Zustand is simple! Call the provided `set` function with\n+the new state, and it will be shallowly merged with the existing state in the\n+store. **Note** See next section for nested state.\n+\n+```tsx\n+type State = {\n+  firstName: string\n+  lastName: string\n+}\n+\n+type Action = {\n+  updateFirstName: (firstName: State['firstName']) => void\n+  updateLastName: (lastName: State['lastName']) => void\n+}\n+\n+// Create your store, which includes both state and (optionally) actions\n+const useStore = create<State & Action>((set) => ({\n+  firstName: '',\n+  lastName: '',\n+  updateFirstName: (firstName) => set(() => ({ firstName: firstName })),\n+  updateLastName: (lastName) => set(() => ({ lastName: lastName })),\n+}))\n+\n+// In consuming app\n+function App() {\n+  // \"select\" the needed state and actions, in this case, the firstName value\n+  // and the action updateFirstName\n+  const [firstName, updateFirstName] = useStore(\n+    (state) => [state.firstName, state.updateFirstName],\n+    shallow\n+  )\n+\n+  return (\n+    <main>\n+      <label>\n+        First name\n+        <input\n+          // Update the \"firstName\" state\n+          onChange={(e) => updateFirstName(e.currentTarget.value)}\n+          value={firstName}\n+        />\n+      </label>\n+\n+      <p>\n+        Hello, <strong>{firstName}!</strong>\n+      </p>\n+    </main>\n+  )\n+}\n+```\n+\n+## Deeply nested object\n+\n+If you have a deep state object like this:\n+\n+```ts\n+type State = {\n+  deep: {\n+    nested: {\n+      obj: { count: number }\n+    }\n+  }\n+}\n+```\n+\n+Updating nested state requires some effort to ensure the process is completed\n+immutably.\n+\n+### Normal approach\n+\n+Similar to React or Redux, the normal approach is to copy each level of the\n+state object. This is done with the spread operator `...`, and by manually\n+merging that in with the new state values. Like so:\n+\n+```ts\n+  normalInc: () =>\n+    set((state) => ({\n+      deep: {\n+        ...state.deep,\n+        nested: {\n+          ...state.deep.nested,\n+          obj: {\n+            ...state.deep.nested.obj,\n+            count: state.deep.nested.obj.count + 1\n+          }\n+        }\n+      }\n+    })),\n+```\n+\n+This is very long! Let's explore some alternatives that will make your life\n+easier.\n+\n+### With immer\n+\n+Many people use [immer](https://github.com/immerjs/immer) to update nested\n+values. Immer can be used anytime you need to update nested state such as in\n+React, Redux and of course, Zustand!\n+\n+You can use immer to shorten your state updates for deeply nested object. Let's\n+take a look at an example:\n+\n+```ts\n+  immerInc: () =>\n+    set(produce((state: State) => { ++state.deep.nested.obj.count })),\n+```\n+\n+What a reduction!. [Please take note of the gotchas listed here](../integrations/updating-draft-states.md).\n+\n+### With optics-ts\n+\n+There is another option with [optics-ts](https://github.com/akheron/optics-ts/):\n+\n+```ts\n+  opticsInc: () =>\n+    set(O.modify(O.optic<State>().path(\"deep.nested.obj.count\"))((c) => c + 1)),\n+```\n+\n+Unlike immer, optics-ts doesn't use proxies or mutation syntax.\n+\n+### With Ramda\n+\n+You can also use [Ramda](https://ramdajs.com/):\n+\n+```ts\n+  ramdaInc: () =>\n+    set(R.over(R.lensPath([\"deep\", \"nested\", \"obj\", \"count\"]), (c) => c + 1)),\n+```\n+\n+Both ramda and optics-ts also work with types.\n+\n+### CodeSandbox Demo\n+\n+https://codesandbox.io/s/zustand-normal-immer-optics-ramda-updating-ynn3o?file=/src/App.tsx\n",
            "-": ""
          }
        ],
        "a/readme.md": [
          {
            "+": "+[Alternatively, there are some other solutions.](./docs/guides/updating-state.md#with-immer)\n",
            "-": "-[Alternatively, there are some other solutions.](./docs/guides/updating-nested-state-object-values.md)\n"
          }
        ]
      },
      "numOfFiles": 7,
      "numOfChanges": 31,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "d60f0cca7aec4ca968b6fd13c67ee12bcce75e82",
      "url": "https://github.com/pmndrs/zustand/commit/d60f0cca7aec4ca968b6fd13c67ee12bcce75e82",
      "message": "docs: expose `enabled` devtools options in the documentation (#1326)",
      "author": {
        "name": "François KY",
        "email": "francois.ky@sanofi.com",
        "date": "2022-10-01T09:12:24Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2216173?v=4"
      },
      "diffObj": {
        "a/docs/recipes/recipes.mdx": [
          {
            "+": "+// Disabling devtools (for instance in production build)\n+const useStore = create(devtools(store, { enabled: false }))\n",
            "-": ""
          }
        ],
        "a/readme.md": [
          {
            "+": "+If you wish to disable devtools (on production for instance). You can customize this setting by providing the `enabled` parameter:\n+\n+```jsx\n+devtools(..., { enabled: false, ... })\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "5ca63d1d63b0ba104fbd3b6ce32c97be59fd9768",
      "url": "https://github.com/pmndrs/zustand/commit/5ca63d1d63b0ba104fbd3b6ce32c97be59fd9768",
      "message": "test: rename persistent (#1315)",
      "author": {
        "name": "huangcheng",
        "email": "1530844743@qq.com",
        "date": "2022-09-27T09:15:25Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/60802048?v=4"
      },
      "diffObj": {
        "a/tests/persistSync.test.tsx": [
          {
            "+": "+const createPersistentStore = (initialValue: string | null) => {\n",
            "-": "-const createPersistantStore = (initialValue: string | null) => {\n"
          },
          {
            "+": "+    const { storage, setItemSpy } = createPersistentStore(null)\n",
            "-": "-    const { storage, setItemSpy } = createPersistantStore(null)\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "77d14b17bc33a6f10f072802fac56aa78510710e",
      "url": "https://github.com/pmndrs/zustand/commit/77d14b17bc33a6f10f072802fac56aa78510710e",
      "message": "docs: testing for using typescript (#1303)",
      "author": {
        "name": "mugi-uno",
        "email": "mugi.uno@gmail.com",
        "date": "2022-09-21T13:11:10Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/10451690?v=4"
      },
      "diffObj": {
        "a/docs/guides/testing.mdx": [
          {
            "+": "+### TypeScript usage\n+\n+If you are using zustand, as documented in [TypeScript Guide](./typescript.md), use the following code:\n+\n+```tsx\n+import actualCreate, { StateCreator } from 'zustand'\n+// const actualCreate = jest.requireActual('zustand') // if using jest\n+import { act } from 'react-dom/test-utils'\n+\n+// a variable to hold reset functions for all stores declared in the app\n+const storeResetFns = new Set<() => void>()\n+\n+// when creating a store, we get its initial state, create a reset function and add it in the set\n+const create =\n+  () =>\n+  <S,>(createState: StateCreator<S>) => {\n+    const store = actualCreate<S>(createState)\n+    const initialState = store.getState()\n+    storeResetFns.add(() => store.setState(initialState, true))\n+    return store\n+  }\n+\n+// Reset all stores after each test run\n+beforeEach(() => {\n+  act(() => storeResetFns.forEach((resetFn) => resetFn()))\n+})\n+\n+export default create\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "b739cfdb1e3689c4e8328399c1f14db03d1af788",
      "url": "https://github.com/pmndrs/zustand/commit/b739cfdb1e3689c4e8328399c1f14db03d1af788",
      "message": "docs: remove dead link from readme (#1302)",
      "author": {
        "name": "Chris K",
        "email": "55621012+chrisk-7777@users.noreply.github.com",
        "date": "2022-09-20T13:52:44Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/55621012?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api.\n",
            "-": "-Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "70820e349cafb6d947e86573afe33e74552cd511",
      "url": "https://github.com/pmndrs/zustand/commit/70820e349cafb6d947e86573afe33e74552cd511",
      "message": "docs: updates to fix remaining broken links across docs site (#1257)\n\n* docs: updates to fix remaining broken links across docs site\r\n\r\n* docs: fix relative links to work in both github and docs site",
      "author": {
        "name": "Chris K",
        "email": "55621012+chrisk-7777@users.noreply.github.com",
        "date": "2022-09-14T21:41:03Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/55621012?v=4"
      },
      "diffObj": {
        "a/docs/guides/flux-inspired-practice.md": [
          {
            "+": "+You could also use our redux-middleware. It wires up your main reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api.\n",
            "-": "-You could also use our redux-middleware. It wires up your main reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Check [this example](https://codesandbox.io/s/amazing-kepler-swxol).\n"
          }
        ],
        "a/docs/migrations/v4-migration.md": [
          {
            "+": "+Also it's recommended to first read the new [TypeScript Guide](../guides/typescript.md), it'll be easier to understand the migration.\n",
            "-": "-Also it's recommended to first read the new [TypeScript Guide](./typescript.md), it'll be easier to understand the migration.\n"
          },
          {
            "+": "+If you're using `StateCreator` you're likely authoring a middleware or using the \"slices\" pattern, for that check the TypeScript Guide's [\"Authoring middlewares and advanced usage\"](../guides/typescript.md#authoring-middlewares-and-advanced-usage) and [\"Common recipes\"](../guides/typescript.md#common-recipes) sections.\n",
            "-": "-If you're using `StateCreator` you're likely authoring a middleware or using the \"slices\" pattern, for that check the TypeScript Guide's [\"Authoring middlewares and advanced usage\"](https://github.com/pmndrs/zustand/blob/main/docs/typescript.md#authoring-middlewares-and-advanced-usage) and [\"Common recipes\"](https://github.com/pmndrs/zustand/blob/main/docs/typescript.md#common-recipes) sections.\n"
          }
        ],
        "a/docs/recipes/recipes.mdx": [
          {
            "+": "+Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api.\n",
            "-": "-Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n"
          }
        ]
      },
      "numOfFiles": 3,
      "numOfChanges": 4,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "b8ec61dc53135078a21887c26d8c624bfcf9bec8",
      "url": "https://github.com/pmndrs/zustand/commit/b8ec61dc53135078a21887c26d8c624bfcf9bec8",
      "message": "docs(typescript): Rewrite the inference explanation (#1252)\n\n* docs(typescript): Rewrite the inference explanation\r\n\r\n* run prettier\r\n\r\n* fix grammar\r\n\r\n* run prettier\r\n\r\n* typo\r\n\r\n* grammar, punctuation\r\n\r\n* more edits\r\n\r\n* replacing ellipses with colon for consistency\r\n\r\n* even more edits\r\n\r\n* edit summary\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>\r\n\r\n* fix hypothetical type\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-09-02T23:48:06Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/guides/typescript.md": [
          {
            "+": "+const createFoo = {} as <T>(f: (t: T) => T) => T\n",
            "-": "-declare const createFoo: <T>(f: (t: T) => T) => T\n"
          },
          {
            "+": "+  <details>\n+    <summary>More about the inference (just for the people curious and interested in TypeScript)</summary><br>\n+    \n+In some sense this inference failure is not a problem because a value of type `<T>(f: (t: T) => T) => T` cannot be written. That is to say you can't write the real runtime implementation of `createFoo`. Let's try it:\n",
            "-": "-One could argue that it is impossible to write an implementation for `createFoo`, and that would be true. But then it is also impossible to write Zustand's `create` as a type. However, Zustand exists. So what do we mean by that?\n"
          },
          {
            "+": "+```js\n+const createFoo = (f) => f(/* ? */)\n+```\n+\n+`createFoo` needs to return the return value of `f`. And to do that we first have to call `f`. And to call it we have to pass a value of type `T`. And to pass a value of type `T` we first have to produce it. But how can we produce a value of type `T` when we don't even know what `T` is? The only way to produce a value of type `T` is to call `f`, but then to call `f` itself we need a value of type `T`. So you see it's impossible to actually write `createFoo`.\n+\n+So what we're saying is, the inference failure in case of `createFoo` is not really a problem because it's impossible to implement `createFoo`. But what about the inference failure in case of `create`? That also is not really a problem because it's impossible to implement `create` too. Wait a minute, if it's impossible to implement `create` then how does Zustand implement it? The answer is, it doesn't.\n+\n+Zustand lies that it implemented `create`'s type, it implemented only the most part of it. Here's a simple proof by showing unsoundness. Consider the following code:\n",
            "-": "-The thing is Zustand is lying in its type. The simplest way to prove it is by showing unsoundness. Consider this example:\n"
          },
          {
            "+": "+This code compiles. But if we run it, we'll get an exception: \"Uncaught TypeError: Cannot read properties of undefined (reading 'foo')\". This is because `get` would return `undefined` before the initial state is created (hence you shouldn't call `get` when creating the initial state). The types promise that `get` will never return `undefined` but it does initially, which means Zustand failed to implement it.\n",
            "-": "-This code compiles. However, you will get an exception when you run it: \"Uncaught TypeError: Cannot read properties of undefined (reading 'foo')\". This is because `get` would return `undefined` before the initial state is created (hence you shouldn't call `get` when creating the initial state). But the types tell that `get` is of type `() => { foo: number }`, which is exactly the lie I was taking about. The type of `get` is eventually that, but first it is `() => undefined`.\n"
          },
          {
            "+": "+And of course Zustand failed because it's impossible to implement `create` the way types promise (in the same way it's impossible to implement `createFoo`). In other words we don't have a type to express the actual `create` we have implemented. We can't type `get` as `() => T | undefined` because it would cause inconveince and it still won't be correct as `get` is indeed `() => T` eventually, just if called synchronously it would be `() => undefined`. What we need is some kind of TypeScript feature that allows us to type `get` as `(() => T) & WhenSync<() => undefined>`, which of course is extremly far-fetched.\n+\n+So we have two problems: lack of inference and unsoundness. Lack of inference can be solved if TypeScript can improves its inference for invariants. And unsoundness can be solved if TypeScript introduces something like `WhenSync`. To work around lack of inference we manually annotate the state type. And we can't work around unsoundness, but it's not a big deal because it's not much, calling `get` synchronously anyway doesn't make sense.\n+\n+</details>\n",
            "-": "-Long story short, Zustand has a bit type-theoretically wild runtime behavior, which can't be typed in a sound and inferrable way with the currently available TypeScript features. To workaround the lack of inferrence, we provide the state type via a type parameter, and the tiny bit of unsoundness isn't a problem.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 5,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "a413f4a340ef8a29b974898467902ecb1b535ce1",
      "url": "https://github.com/pmndrs/zustand/commit/a413f4a340ef8a29b974898467902ecb1b535ce1",
      "message": "docs: fix broken links on readme (#1230)",
      "author": {
        "name": "Lucca Radaeli",
        "email": "radaelidev@gmail.com",
        "date": "2022-08-28T07:36:37Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/29178479?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+Your store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/guides/immutable-state-and-merging.md) to help it.\n",
            "-": "-Your store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/immutable-state-and-merging.md) to help it.\n"
          },
          {
            "+": "+[Alternatively, there are some other solutions.](./docs/guides/updating-nested-state-object-values.md)\n",
            "-": "-[Alternatively, there are some other solutions.](./docs/updating-nested-state-object-values.md)\n"
          },
          {
            "+": "+[See the full documentation for this middleware.](./docs/integrations/persisting-store-data.md)\n",
            "-": "-[See the full documentation for this middleware.](https://github.com/pmndrs/zustand/wiki/Persisting-the-store's-data)\n"
          },
          {
            "+": "+[Alternatively, a special createContext is provided.](./docs/previous-versions/zustand-v3-create-context.md)\n",
            "-": "-[Alternatively, a special createContext is provided.](./docs/zustand-v3-create-context.md)\n"
          },
          {
            "+": "+- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](./docs/guides/typescript.md#slices-pattern).\n+- Recommended usage for this unopinionated library: [Flux inspired practice](./docs/guides/flux-inspired-practice.md).\n+- [Calling actions outside a React event handler in pre React 18](./docs/guides/event-handler-in-pre-react-18.md).\n+- [Testing](./docs/guides/testing.mdx)\n",
            "-": "-- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](docs/typescript.md#slices-pattern).\n-- Recommended usage for this unopinionated library: [Flux inspired practice](docs/flux-inspired-practice.md).\n-- [Calling actions outside a React event handler in pre React 18](docs/event-handler-in-pre-react-18.md).\n-- Testing: [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n"
          },
          {
            "+": "+Some users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit [the doc](./docs/integrations/3rd-party-libraries.md).\n",
            "-": "-Some users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit [the doc](docs/3rd-party-libraries.md).\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 6,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "b85f6413f1eed2b8c9f6e6e402c272f4da3b9c2d",
      "url": "https://github.com/pmndrs/zustand/commit/b85f6413f1eed2b8c9f6e6e402c272f4da3b9c2d",
      "message": "docs(issue-1215): restructure top level docs (#1222)",
      "author": {
        "name": "Chris K",
        "email": "55621012+chrisk-7777@users.noreply.github.com",
        "date": "2022-08-25T10:34:32Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/55621012?v=4"
      },
      "diffObj": {
        "a/docs/getting-started/comparison.md": [
          {
            "+": "+---\n+title: Comparison\n+description:\n+nav: 2\n+---\n+\n+⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n+\n+## Why zustand over react-redux?\n+\n+- Simple and un-opinionated\n+- Makes hooks the primary means of consuming state\n+- Doesn't wrap your app in context providers\n+- [Can inform components transiently (without causing render)](recipes#transient-updates-for-often-occurring-state-changes)\n",
            "-": ""
          }
        ],
        "a/docs/getting-started/concepts.md": [
          {
            "+": "+---\n+title: Concepts\n+description:\n+nav: 1\n+---\n+\n+⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n",
            "-": ""
          }
        ],
        "a/docs/introduction.mdx": [
          {
            "+": "+⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n",
            "-": "-:warning: This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n"
          },
          {
            "+": "+  <img width=\"600\" src=\"https://github.com/pmndrs/zustand/raw/main/bear.jpg\" />\n",
            "-": "-  <img width=\"500\" src=\"https://docs.pmnd.rs/zustand-resources/bear.png\" />\n"
          },
          {
            "+": "+\n",
            "-": ""
          },
          {
            "+": "+## First create a store\n",
            "-": "-### First create a store\n"
          },
          {
            "+": "+## Then bind your components, and that's it!\n",
            "-": "-### Then bind your components, and that's it!\n"
          },
          {
            "-": "-\n-#### Why zustand over react-redux?\n-\n-- Simple and un-opinionated\n-- Makes hooks the primary means of consuming state\n-- Doesn't wrap your app in context providers\n-- [Can inform components transiently (without causing render)](recipes#transient-updates-for-often-occurring-state-changes)\n-\n",
            "+": ""
          }
        ],
        "a/docs/auto-generating-selectors.md": [
          {
            "+": "+nav: 7\n",
            "-": "-nav: 12\n"
          }
        ],
        "a/docs/event-handler-in-pre-react-18.md": [
          {
            "+": "+nav: 11\n",
            "-": "-nav: 10\n"
          }
        ],
        "a/docs/flux-inspired-practice.md": [
          {
            "+": "+nav: 6\n",
            "-": "-nav: 3\n"
          }
        ],
        "a/docs/immutable-state-and-merging.md": [
          {
            "+": "+nav: 5\n",
            "-": "-nav: 2\n"
          }
        ],
        "a/docs/maps-and-sets-usage.md": [
          {
            "+": "+nav: 12\n",
            "-": "-nav: 13\n"
          }
        ],
        "a/docs/practice-with-no-store-actions.md": [
          {
            "+": "+nav: 8\n",
            "-": "-nav: 9\n"
          }
        ],
        "a/docs/testing.mdx": [
          {
            "+": "+nav: 10\n",
            "-": "-nav: 8\n"
          }
        ],
        "a/docs/typescript.md": [
          {
            "+": "+nav: 9\n",
            "-": "-nav: 4\n"
          }
        ],
        "a/docs/updating-nested-state-object-values.md": [
          {
            "+": "+nav: 4\n",
            "-": "-nav: 7\n"
          }
        ],
        "a/docs/3rd-party-libraries.md": [],
        "a/docs/persisting-store-data.md": [
          {
            "+": "+nav: 15\n",
            "-": "-nav: 6\n"
          }
        ],
        "a/docs/v4-migration.md": [
          {
            "+": "+nav: 17\n",
            "-": "-nav: 5\n"
          }
        ],
        "a/docs/zustand-v3-create-context.md": [
          {
            "+": "+nav: 16\n",
            "-": "-nav: 11\n"
          }
        ],
        "a/docs/recipes.mdx": [
          {
            "+": "+nav: 13\n",
            "-": "-nav: 1\n"
          },
          {
            "+": "+⚠️ This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n",
            "-": "-:warning: This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n"
          }
        ]
      },
      "numOfFiles": 17,
      "numOfChanges": 22,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "8e987d99aa4c16b3c148c895ac90ddb6800a7467",
      "url": "https://github.com/pmndrs/zustand/commit/8e987d99aa4c16b3c148c895ac90ddb6800a7467",
      "message": "docs(typescript): add recommendation to use `devtools` after `immer` (#1198)\n\n* docs(typescript): add recommendation to use `devtools` after `immer`\r\n\r\n* remove typo\r\n\r\n* run prettier\r\n\r\nCo-authored-by: daishi <daishi@axlight.com>",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-08-18T22:48:00Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+Also it's recommended to use `devtools` middleware as last as possible, in particular after `immer` middleware, ie it should be `immer(devtools(...))` and not `devtools(immer(...))`. The reason being that `devtools` mutates the `setState` and adds a type parameter on it, which could get lost if other middlewares (like `immer`) mutate `setState` before `devtools`.\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "bde75bae5263ec6da71f83f597283d5933433872",
      "url": "https://github.com/pmndrs/zustand/commit/bde75bae5263ec6da71f83f597283d5933433872",
      "message": "docs: Made minor fix for the recipes  (#1188)\n\n* Update recipes.mdx\r\n\r\n* add warnings\r\n\r\n* fix prettier\r\n\r\nCo-authored-by: daishi <daishi@axlight.com>",
      "author": {
        "name": "Mark Rozovsky",
        "email": "markroze@gmail.com",
        "date": "2022-08-11T22:37:18Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/15999807?v=4"
      },
      "diffObj": {
        "a/docs/introduction.mdx": [
          {
            "+": "+:warning: This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n+\n",
            "-": ""
          }
        ],
        "a/docs/recipes.mdx": [
          {
            "+": "+:warning: This doc is still under construction. https://github.com/pmndrs/zustand/discussions/1033\n+\n",
            "-": ""
          },
          {
            "+": "+If you need to subscribe with selector, subscribeWithSelector middleware will help.\n+With this middleware subscribe accepts an additional signature:\n+\n+```jsx\n+subscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n+```\n+\n",
            "-": ""
          },
          {
            "+": "+import { subscribeWithSelector } from 'zustand/middleware'\n+const useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n",
            "-": "-const useStore = create(() => ({ paw: true, snout: true, fur: true }))\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 4,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "2122a0c5e745c36e3e9e4e91d892c8cce83fdae4",
      "url": "https://github.com/pmndrs/zustand/commit/2122a0c5e745c36e3e9e4e91d892c8cce83fdae4",
      "message": "docs: move mdx files from website repo (#1172)\n\n* move mdx files from website repo\r\n\r\n* run prettier\r\n\r\n* add frontmatter in md files\r\n\r\n* fix img path",
      "author": {
        "name": "Daishi Kato",
        "email": "dai-shi@users.noreply.github.com",
        "date": "2022-08-07T02:30:20Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/490574?v=4"
      },
      "diffObj": {
        "a/docs/3rd-party-libraries.md": [
          {
            "+": "+---\n+title: 3rd Party Libraries\n+nav: 14\n+---\n",
            "-": "-# 3rd Party Libraries\n"
          }
        ],
        "a/docs/auto-generating-selectors.md": [
          {
            "+": "+---\n+title: Auto Generating Selectors\n+nav: 12\n+---\n",
            "-": "-# Auto Generating Selectors\n"
          }
        ],
        "a/docs/event-handler-in-pre-react-18.md": [
          {
            "+": "+---\n+title: Calling actions outside a React event handler in pre React 18\n+nav: 10\n+---\n",
            "-": "-# Calling actions outside a React event handler in pre React 18\n"
          }
        ],
        "a/docs/flux-inspired-practice.md": [
          {
            "+": "+---\n+title: Flux inspired practice\n+nav: 3\n+---\n",
            "-": "-# Flux inspired practice\n"
          }
        ],
        "a/docs/immutable-state-and-merging.md": [
          {
            "+": "+---\n+title: Immutable state and merging\n+nav: 2\n+---\n",
            "-": "-# Immutable state and merging\n"
          }
        ],
        "a/docs/introduction.mdx": [
          {
            "+": "+---\n+title: Introduction\n+description: How to use Zustand\n+nav: 0\n+---\n+\n+<p align=\"center\">\n+  <img width=\"500\" src=\"https://docs.pmnd.rs/zustand-resources/bear.png\" />\n+</p>\n+A small, fast and scalable bearbones state-management solution. Has a comfy api based\n+on hooks, isn't boilerplatey or opinionated, but still just enough to be explicit\n+and flux-like.\n+\n+Don't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n+\n+You can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n+\n+```bash\n+npm install zustand\n+```\n+\n+### First create a store\n+\n+Your store is a hook! You can put anything in it: primitives, objects, functions. The `set` function _merges_ state.\n+\n+```jsx\n+import create from 'zustand'\n+\n+const useStore = create((set) => ({\n+  bears: 0,\n+  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n+  removeAllBears: () => set({ bears: 0 }),\n+}))\n+```\n+\n+### Then bind your components, and that's it!\n+\n+Use the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n+\n+```jsx\n+function BearCounter() {\n+  const bears = useStore((state) => state.bears)\n+  return <h1>{bears} around here ...</h1>\n+}\n+\n+function Controls() {\n+  const increasePopulation = useStore((state) => state.increasePopulation)\n+  return <button onClick={increasePopulation}>one up</button>\n+}\n+```\n+\n+#### Why zustand over react-redux?\n+\n+- Simple and un-opinionated\n+- Makes hooks the primary means of consuming state\n+- Doesn't wrap your app in context providers\n+- [Can inform components transiently (without causing render)](recipes#transient-updates-for-often-occurring-state-changes)\n+\n+---\n",
            "-": ""
          }
        ],
        "a/docs/maps-and-sets-usage.md": [
          {
            "+": "+---\n+title: Map and Set Usage\n+nav: 13\n+---\n",
            "-": "-## Map and Set Usage\n"
          }
        ],
        "a/docs/persisting-store-data.md": [
          {
            "+": "+---\n+title: Persist middleware\n+nav: 6\n+---\n",
            "-": "-# Persist middleware\n"
          }
        ],
        "a/docs/practice-with-no-store-actions.md": [
          {
            "+": "+---\n+title: Practice with no store actions\n+nav: 9\n+---\n",
            "-": "-# Practice with no store actions\n"
          }
        ],
        "a/docs/recipes.mdx": [
          {
            "+": "+---\n+title: Recipes\n+description: How to do all you need with Zustand\n+nav: 1\n+---\n+\n+## Fetching everything\n+\n+You can, but bear in mind that it will cause the component to update on every state change!\n+\n+```jsx\n+const state = useStore()\n+```\n+\n+## Selecting multiple state slices\n+\n+It detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n+\n+```jsx\n+const nuts = useStore((state) => state.nuts)\n+const honey = useStore((state) => state.honey)\n+```\n+\n+For more control over re-rendering, you may provide an alternative equality function on the second argument.\n+\n+```jsx\n+const treats = useStore(\n+  (state) => state.treats,\n+  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n+)\n+```\n+\n+For instance, if you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n+\n+```jsx\n+import shallow from 'zustand/shallow'\n+\n+// Object pick, re-renders the component when either state.nuts or state.honey change\n+const { nuts, honey } = useStore(\n+  (state) => ({ nuts: state.nuts, honey: state.honey }),\n+  shallow\n+)\n+\n+// Array pick, re-renders the component when either state.nuts or state.honey change\n+const [nuts, honey] = useStore((state) => [state.nuts, state.honey], shallow)\n+\n+// Mapped picks, re-renders the component when state.treats changes in order, count or keys\n+const treats = useStore((state) => Object.keys(state.treats), shallow)\n+```\n+\n+## Fetching from multiple stores\n+\n+Since you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n+\n+```jsx\n+const currentBear = useCredentialsStore((state) => state.currentBear)\n+const bear = useBearStore((state) => state.bears[currentBear])\n+```\n+\n+## Memoizing selectors\n+\n+It is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n+\n+```jsx\n+const fruit = useStore(useCallback((state) => state.fruits[id], [id]))\n+```\n+\n+If a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n+\n+```jsx\n+const selector = state => state.berries\n+\n+function Component() {\n+  const berries = useStore(selector)\n+```\n+\n+## Overwriting state\n+\n+The `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n+\n+```jsx\n+import omit from 'lodash-es/omit'\n+\n+const useStore = create((set) => ({\n+  salmon: 1,\n+  tuna: 2,\n+  deleteEverything: () => set({}, true), // clears the entire store, actions included\n+  deleteTuna: () => set((state) => omit(state, ['tuna']), true),\n+}))\n+```\n+\n+## Async actions\n+\n+Just call `set` when you're ready, zustand doesn't care if your actions are async or not.\n+\n+```jsx\n+const useStore = create((set) => ({\n+  fishies: {},\n+  fetch: async (pond) => {\n+    const response = await fetch(pond)\n+    set({ fishies: await response.json() })\n+  },\n+}))\n+```\n+\n+## Read from state in actions\n+\n+`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n+\n+```jsx\n+const useStore = create((set, get) => ({\n+  sound: \"grunt\",\n+  action: () => {\n+    const sound = get().sound\n+    // ...\n+  }\n+})\n+```\n+\n+## Reading/writing state and reacting to changes outside of components\n+\n+Sometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n+\n+```jsx\n+const useStore = create(() => ({ paw: true, snout: true, fur: true }))\n+\n+// Getting non-reactive fresh state\n+const paw = useStore.getState().paw\n+// Listening to all changes, fires on every change\n+const unsub1 = useStore.subscribe(console.log)\n+// Listening to selected changes, in this case when \"paw\" changes\n+const unsub2 = useStore.subscribe(console.log, state => state.paw)\n+// Subscribe also supports an optional equality function\n+const unsub3 = useStore.subscribe(console.log, state => [state.paw, state.fur], shallow)\n+// Subscribe also exposes the previous value\n+const unsub4 = useStore.subscribe((paw, previousPaw) => console.log(paw, previousPaw), state => state.paw)\n+// Updating state, will trigger listeners\n+useStore.setState({ paw: false })\n+// Unsubscribe listeners\n+unsub1()\n+unsub2()\n+unsub3()\n+unsub4()\n+// Destroying the store (removing all listeners)\n+useStore.destroy()\n+\n+// You can of course use the hook as you always would\n+function Component() {\n+  const paw = useStore(state => state.paw)\n+```\n+\n+## Using zustand without React\n+\n+Zustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n+\n+```jsx\n+import create from 'zustand/vanilla'\n+\n+const store = create(() => ({ ... }))\n+const { getState, setState, subscribe, destroy } = store\n+```\n+\n+You can even consume an existing vanilla store with React:\n+\n+```jsx\n+import create from 'zustand'\n+import vanillaStore from './vanillaStore'\n+\n+const useStore = create(vanillaStore)\n+```\n+\n+## Transient updates (for often occurring state-changes)\n+\n+The subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n+\n+```jsx\n+const useStore = create(set => ({ scratches: 0, ... }))\n+\n+function Component() {\n+  // Fetch initial state\n+  const scratchRef = useRef(useStore.getState().scratches)\n+  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n+  useEffect(() => useStore.subscribe(\n+    scratches => (scratchRef.current = scratches),\n+    state => state.scratches\n+  ), [])\n+```\n+\n+## Sick of reducers and changing nested state? Use Immer!\n+\n+Reducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n+\n+```jsx\n+import produce from 'immer'\n+\n+const useStore = create((set) => ({\n+  lush: { forest: { contains: { a: 'bear' } } },\n+  set: (fn) => set(produce(fn)),\n+}))\n+\n+const set = useStore((state) => state.set)\n+set((state) => {\n+  state.lush.forest.contains = null\n+})\n+```\n+\n+## Middleware\n+\n+You can functionally compose your store any way you like.\n+\n+```jsx\n+// Log every time state is changed\n+const log = (config) => (set, get, api) =>\n+  config(\n+    (args) => {\n+      console.log('  applying', args)\n+      set(args)\n+      console.log('  new state', get())\n+    },\n+    get,\n+    api\n+  )\n+\n+// Turn the set method into an immer proxy\n+const immer = (config) => (set, get, api) =>\n+  config((fn) => set(produce(fn)), get, api)\n+\n+const useStore = create(\n+  log(\n+    immer((set) => ({\n+      bees: false,\n+      setBees: (input) => set((state) => void (state.bees = input)),\n+    }))\n+  )\n+)\n+```\n+\n+<details>\n+<summary>How to pipe middlewares</summary>\n+\n+```js\n+import create from 'zustand'\n+import produce from 'immer'\n+import pipe from 'ramda/es/pipe'\n+\n+/* log and immer functions from previous example */\n+/* you can pipe as many middlewares as you want */\n+const createStore = pipe(log, immer, create)\n+\n+const useStore = createStore((set) => ({\n+  bears: 1,\n+  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n+}))\n+\n+export default useStore\n+```\n+\n+For a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n+\n+</details>\n+\n+<details>\n+<summary>How to type immer middleware in TypeScript</summary>\n+\n+```ts\n+import { State, StateCreator } from 'zustand'\n+import produce, { Draft } from 'immer'\n+\n+// Immer V8 or lower\n+const immer =\n+  <T extends State>(\n+    config: StateCreator<T, (fn: (draft: Draft<T>) => void) => void>\n+  ): StateCreator<T> =>\n+  (set, get, api) =>\n+    config((fn) => set(produce(fn) as (state: T) => T), get, api)\n+\n+// Immer V9\n+const immer =\n+  <T extends State>(\n+    config: StateCreator<T, (fn: (draft: Draft<T>) => void) => void>\n+  ): StateCreator<T> =>\n+  (set, get, api) =>\n+    config((fn) => set(produce<T>(fn)), get, api)\n+```\n+\n+</details>\n+\n+## Persist middleware\n+\n+You can persist your store's data using any kind of storage.\n+\n+```jsx\n+import create from 'zustand'\n+import { persist } from 'zustand/middleware'\n+\n+export const useStore = create(\n+  persist(\n+    (set, get) => ({\n+      fishes: 0,\n+      addAFish: () => set({ fish: get().fish + 1 }),\n+    }),\n+    {\n+      name: 'food-storage', // unique name\n+      getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n+    }\n+  )\n+)\n+```\n+\n+## Can't live without redux-like reducers and action types?\n+\n+```jsx\n+const types = { increase: 'INCREASE', decrease: 'DECREASE' }\n+\n+const reducer = (state, { type, by = 1 }) => {\n+  switch (type) {\n+    case types.increase:\n+      return { grumpiness: state.grumpiness + by }\n+    case types.decrease:\n+      return { grumpiness: state.grumpiness - by }\n+  }\n+}\n+\n+const useStore = create((set) => ({\n+  grumpiness: 0,\n+  dispatch: (args) => set((state) => reducer(state, args)),\n+}))\n+\n+const dispatch = useStore((state) => state.dispatch)\n+dispatch({ type: types.increase, by: 2 })\n+```\n+\n+Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n+\n+```jsx\n+import { redux } from 'zustand/middleware'\n+\n+const useStore = create(redux(reducer, initialState))\n+```\n+\n+## Calling actions outside a React event handler\n+\n+Because React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\n+In order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n+\n+```jsx\n+import { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n+\n+const useStore = create((set) => ({\n+  fishes: 0,\n+  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 })),\n+}))\n+\n+const nonReactCallback = () => {\n+  unstable_batchedUpdates(() => {\n+    useStore.getState().increaseFishes()\n+  })\n+}\n+```\n+\n+More details: https://github.com/pmndrs/zustand/issues/302\n+\n+## Redux devtools\n+\n+```jsx\n+import { devtools } from 'zustand/middleware'\n+\n+// Usage with a plain action store, it will log actions as \"setState\"\n+const useStore = create(devtools(store))\n+// Usage with a redux store, it will log full action types\n+const useStore = create(devtools(redux(reducer, initialState)))\n+```\n+\n+devtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.\n+devtools will only log actions from each separated store unlike in a typical _combined reducers_ redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n+\n+## TypeScript\n+\n+```tsx\n+type State = {\n+  bears: number\n+  increase: (by: number) => void\n+}\n+\n+const useStore = create<State>((set) => ({\n+  bears: 0,\n+  increase: (by) => set((state) => ({ bears: state.bears + by })),\n+}))\n+```\n+\n+You can also use an `interface`:\n+\n+```tsx\n+import { State } from 'zustand'\n+\n+interface BearState extends State {\n+  bears: number\n+  increase: (by: number) => void\n+}\n+```\n+\n+Or, use `combine` and let tsc infer types.\n+\n+```tsx\n+import { combine } from 'zustand/middleware'\n+\n+const useStore = create(\n+  combine({ bears: 0 }, (set) => ({\n+    increase: (by: number) => set((state) => ({ bears: state.bears + by })),\n+  }))\n+)\n+```\n",
            "-": ""
          }
        ],
        "a/docs/testing.mdx": [
          {
            "+": "+---\n+title: Testing\n+description: How to test your new store\n+nav: 8\n+---\n+\n+## Resetting state between tests in **react-dom**\n+\n+When running tests, the stores are not automatically reset before each test run.\n+\n+Thus, there can be cases where the state of one test can affect another. To make sure all tests run with a pristine store state, you can mock `zustand` during testing and replace it with the following code:\n+\n+```jsx\n+import actualCreate from 'zustand'\n+// const actualCreate = jest.requireActual('zustand') // if using jest\n+import { act } from 'react-dom/test-utils'\n+\n+// a variable to hold reset functions for all stores declared in the app\n+const storeResetFns = new Set()\n+\n+// when creating a store, we get its initial state, create a reset function and add it in the set\n+const create = (createState) => {\n+  const store = actualCreate(createState)\n+  const initialState = store.getState()\n+  storeResetFns.add(() => store.setState(initialState, true))\n+  return store\n+}\n+\n+// Reset all stores after each test run\n+beforeEach(() => {\n+  act(() => storeResetFns.forEach((resetFn) => resetFn()))\n+})\n+\n+export default create\n+```\n+\n+The way you can mock a dependency depends on your test runner.\n+\n+In [jest](https://jestjs.io/), you can create a `__mocks__/zustand.js` and place the code there. If your app is using `zustand/vanilla` instead of `zustand`, then you'll have to place the above code in `__mocks__/zustand/vanilla.js`.\n+\n+## Resetting state between tests in **react-native** and **jest**\n+\n+in the `__mocks__/zustand.js` (the `__mocks__` directory should be adjacent to node_modules, unless you configured roots to point to a folder other than the project root [jest docs: mocking node modules](https://jestjs.io/docs/manual-mocks#mocking-node-modules)):\n+\n+```js\n+import { act } from '@testing-library/react-native'\n+const actualCreate = jest.requireActual('zustand')\n+\n+// a variable to hold reset functions for all stores declared in the app\n+const storeResetFns = new Set()\n+\n+// when creating a store, we get its initial state, create a reset function and add it in the set\n+const create = (createState) => {\n+  const store = actualCreate.default(createState)\n+  const initialState = store.getState()\n+  storeResetFns.add(() => {\n+    store.setState(initialState, true)\n+  })\n+  return store\n+}\n+\n+// Reset all stores after each test run\n+beforeEach(async () => {\n+  await act(() =>\n+    storeResetFns.forEach((resetFn) => {\n+      resetFn()\n+    })\n+  )\n+})\n+\n+export default create\n+```\n+\n+If the `jest.config.js` has `automock: false`, then you need to do the following in `jest.setup.js`:\n+\n+```js\n+jest.mock('zustand')\n+```\n",
            "-": ""
          }
        ],
        "a/docs/typescript.md": [
          {
            "+": "+---\n+title: TypeScript Guide\n+nav: 4\n+---\n",
            "-": "-# TypeScript Guide\n"
          }
        ],
        "a/docs/updating-nested-state-object-values.md": [
          {
            "+": "+---\n+title: Updating nested state object values\n+nav: 7\n+---\n",
            "-": "-# Updating nested state object values\n"
          }
        ],
        "a/docs/v4-migration.md": [
          {
            "+": "+---\n+title: v4 Migrations\n+nav: 5\n+---\n",
            "-": "-# v4 Migrations\n"
          }
        ],
        "a/docs/zustand-v3-create-context.md": [
          {
            "+": "+---\n+title: createContext from zustand/context\n+nav: 11\n+---\n",
            "-": "-# createContext from zustand/context\n"
          }
        ]
      },
      "numOfFiles": 15,
      "numOfChanges": 15,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "76c1eaebeaa2d046352f79aca39a2561383706fa",
      "url": "https://github.com/pmndrs/zustand/commit/76c1eaebeaa2d046352f79aca39a2561383706fa",
      "message": "docs: move practice-with-no-store-actions wiki page into docs (#1162)",
      "author": {
        "name": "Daishi Kato",
        "email": "dai-shi@users.noreply.github.com",
        "date": "2022-08-02T03:38:33Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/490574?v=4"
      },
      "diffObj": {
        "a/docs/practice-with-no-store-actions.md": [
          {
            "+": "+# Practice with no store actions\n+\n+The recommended usage in the Readme is to colocate actions within the store.\n+\n+For example:\n+\n+```js\n+export const useBoundStore = create((set) => ({\n+  count: 0,\n+  text: 'hello',\n+  inc: () => set((state) => ({ count: state.count + 1 })),\n+  setText: (text) => set({ text }),\n+})\n+```\n+\n+This creates a self-contained store with data and actions together.\n+\n+---\n+\n+An alternative approach is to define actions at module level, external to the store.\n+\n+```js\n+export const useBoundStore = create(() => ({\n+  count: 0,\n+  text: 'hello',\n+}))\n+\n+export const inc = () =>\n+  useBoundStore.setState((state) => ({ count: state.count + 1 }))\n+\n+export const setText = (text) => useBoundStore.setState({ text })\n+```\n+\n+This has a few advantages:\n+\n+- It doesn't require a hook to call an action,\n+- It facilitates code splitting,\n+\n+While this pattern doesn't offer any downsides, some may prefer the documented approach in the Readme due to its encapsulated nature.\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "62edd67866e5c388c9c58b6e2df42dc3e37ac638",
      "url": "https://github.com/pmndrs/zustand/commit/62edd67866e5c388c9c58b6e2df42dc3e37ac638",
      "message": "docs: add immutable state and merging doc (#1161)\n\n* add a doc from wiki\r\n\r\n* move createContext into docs\r\n\r\n* fix a link\r\n\r\n* fix(docs): add immutable state and merging doc\r\n\r\n* change format",
      "author": {
        "name": "Daishi Kato",
        "email": "dai-shi@users.noreply.github.com",
        "date": "2022-08-01T14:48:43Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/490574?v=4"
      },
      "diffObj": {
        "a/docs/immutable-state-and-merging.md": [
          {
            "+": "+# Immutable state and merging\n+\n+Like `useState`, we need to update state immutably.\n+\n+Here's a typical example.\n+\n+```jsx\n+import create from 'zustand'\n+\n+const useCountStore = create((set) => ({\n+  count: 0,\n+  inc: () => set((state) => ({ count: state.count + 1 })),\n+}))\n+```\n+\n+The `set` function is to update state in store.\n+Because the state is immutable, it should have been this:\n+\n+```js\n+set((state) => ({ ...state, count: state.count + 1 }))\n+```\n+\n+As this happens very often, `set` actually merges state, and\n+we can skip `...state` part:\n+\n+```js\n+set((state) => ({ count: state.count + 1 }))\n+```\n+\n+## Nested objects\n+\n+The `set` function merges state only one level.\n+If you have a nested object, you need to merge them explicitly.\n+\n+```jsx\n+import create from 'zustand'\n+\n+const useCountStore = create((set) => ({\n+  nested: { count: 0 },\n+  inc: () =>\n+    set((state) => ({\n+      nested: { ...state.nested, count: state.nested.count + 1 },\n+    })),\n+}))\n+```\n+\n+For complex use cases, consider using some libraries that helps immutable updates.\n+Refer [Updating nested state object values](./docs/updating-nested-state-object-values.md).\n+\n+## Replace flag\n+\n+To disable the merging behavior, you can specify `replace` boolean value to `set`.\n+\n+```js\n+set((state) => newState, true)\n+```\n",
            "-": ""
          }
        ],
        "a/docs/updating-nested-state-object-values.md": [
          {
            "+": "+# Updating nested state object values\n+\n+## Deep nested object\n+\n+If you have a deep state object like this:\n+\n+```ts\n+type State = {\n+  deep: {\n+    nested: {\n+      obj: { count: number }\n+    }\n+  }\n+}\n+```\n+\n+It requires some effort to update the count value immutably.\n+\n+## Normal approach\n+\n+The normal approach is to copy state object with `...`:\n+\n+```ts\n+  normalInc: () =>\n+    set((state) => ({\n+      deep: {\n+        ...state.deep,\n+        nested: {\n+          ...state.deep.nested,\n+          obj: {\n+            ...state.deep.nested.obj,\n+            count: state.deep.nested.obj.count + 1\n+          }\n+        }\n+      }\n+    })),\n+```\n+\n+This is very long!\n+\n+## With immer\n+\n+Many people use [immer](https://github.com/immerjs/immer) to update nested values:\n+\n+```ts\n+  immerInc: () =>\n+    set(produce((state: State) => { ++state.deep.nested.obj.count })),\n+```\n+\n+What a reduction!\n+\n+## With optics-ts\n+\n+There's another option with [optics-ts](https://github.com/akheron/optics-ts/):\n+\n+```ts\n+  opticsInc: () =>\n+    set(O.modify(O.optic<State>().path(\"deep.nested.obj.count\"))((c) => c + 1)),\n+```\n+\n+Unlike immer, optics-ts doesn't use proxies nor mutation syntax.\n+\n+## With ramda\n+\n+You can also use [ramda](https://ramdajs.com/):\n+\n+```ts\n+  ramdaInc: () =>\n+    set(R.over(R.lensPath([\"deep\", \"nested\", \"obj\", \"count\"]), (c) => c + 1)),\n+```\n+\n+This works with types as well as optics-ts.\n+\n+## CodeSandbox Demo\n+\n+https://codesandbox.io/s/zustand-normal-immer-optics-ramda-updating-ynn3o?file=/src/App.tsx\n",
            "-": ""
          }
        ],
        "a/docs/zustand-v3-create-context.md": [
          {
            "+": "+# createContext from zustand/context\n+\n+A special `createContext` is provided since v3.5,\n+which avoids misusing the store hook.\n+\n+> **Note**: This function will likely be deprecated in v4 and removed in v5.\n+\n+```jsx\n+import create from 'zustand'\n+import createContext from 'zustand/context'\n+\n+const { Provider, useStore } = createContext()\n+\n+const createStore = () => create(...)\n+\n+const App = () => (\n+  <Provider createStore={createStore}>\n+    ...\n+  </Provider>\n+)\n+\n+const Component = () => {\n+  const state = useStore()\n+  const slice = useStore(selector)\n+  ...\n+```\n+\n+## createContext usage in real components\n+\n+```jsx\n+import create from \"zustand\";\n+import createContext from \"zustand/context\";\n+\n+// Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n+\n+const { Provider, useStore } = createContext();\n+\n+const createStore = () =>\n+  create((set) => ({\n+    bears: 0,\n+    increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n+    removeAllBears: () => set({ bears: 0 })\n+  }));\n+\n+const Button = () => {\n+  return (\n+      {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n+    <Provider createStore={createStore}>\n+      <ButtonChild />\n+    </Provider>\n+  );\n+};\n+\n+const ButtonChild = () => {\n+  const state = useStore();\n+  return (\n+    <div>\n+      {state.bears}\n+      <button\n+        onClick={() => {\n+          state.increasePopulation();\n+        }}\n+      >\n+        +\n+      </button>\n+    </div>\n+  );\n+};\n+\n+export default function App() {\n+  return (\n+    <div className=\"App\">\n+      <Button />\n+      <Button />\n+    </div>\n+  );\n+}\n+```\n+\n+## createContext usage with initialization from props\n+\n+```tsx\n+import create from 'zustand'\n+import createContext from 'zustand/context'\n+\n+const { Provider, useStore } = createContext()\n+\n+export default function App({ initialBears }) {\n+  return (\n+    <Provider\n+      createStore={() =>\n+        create((set) => ({\n+          bears: initialBears,\n+          increase: () => set((state) => ({ bears: state.bears + 1 })),\n+        }))\n+      }>\n+      <Button />\n+    </Provider>\n+  )\n+}\n+```\n",
            "-": ""
          }
        ],
        "a/readme.md": [
          {
            "+": "+Your store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/immutable-state-and-merging.md) to help it.\n",
            "-": "-Your store is a hook! You can put anything in it: primitives, objects, functions. The `set` function _merges_ state.\n"
          },
          {
            "+": "+[Alternatively, there are some other solutions.](./docs/updating-nested-state-object-values.md)\n",
            "-": "-[Alternatively, there are some other solutions.](https://github.com/pmndrs/zustand/wiki/Updating-nested-state-object-values)\n"
          },
          {
            "+": "+[Alternatively, a special createContext is provided.](./docs/zustand-v3-create-context.md)\n",
            "-": "-Alternatively, a special `createContext` is provided since v3.5,\n-which avoids misusing the store hook.\n-\n-```jsx\n-import create from 'zustand'\n-import createContext from 'zustand/context'\n-\n-const { Provider, useStore } = createContext()\n-\n-const createStore = () => create(...)\n-\n-const App = () => (\n-  <Provider createStore={createStore}>\n-    ...\n-  </Provider>\n-)\n-\n-const Component = () => {\n-  const state = useStore()\n-  const slice = useStore(selector)\n-  ...\n-```\n-\n-<details>\n-  <summary>createContext usage in real components</summary>\n-\n-```jsx\n-import create from \"zustand\";\n-import createContext from \"zustand/context\";\n-\n-// Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n-\n-const { Provider, useStore } = createContext();\n-\n-const createStore = () =>\n-  create((set) => ({\n-    bears: 0,\n-    increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n-    removeAllBears: () => set({ bears: 0 })\n-  }));\n-\n-const Button = () => {\n-  return (\n-      {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n-    <Provider createStore={createStore}>\n-      <ButtonChild />\n-    </Provider>\n-  );\n-};\n-\n-const ButtonChild = () => {\n-  const state = useStore();\n-  return (\n-    <div>\n-      {state.bears}\n-      <button\n-        onClick={() => {\n-          state.increasePopulation();\n-        }}\n-      >\n-        +\n-      </button>\n-    </div>\n-  );\n-};\n-\n-export default function App() {\n-  return (\n-    <div className=\"App\">\n-      <Button />\n-      <Button />\n-    </div>\n-  );\n-}\n-```\n-\n-</details>\n-\n-<details>\n-  <summary>createContext usage with initialization from props</summary>\n-\n-```tsx\n-import create from 'zustand'\n-import createContext from 'zustand/context'\n-\n-const { Provider, useStore } = createContext()\n-\n-export default function App({ initialBears }) {\n-  return (\n-    <Provider\n-      createStore={() =>\n-        create((set) => ({\n-          bears: initialBears,\n-          increase: () => set((state) => ({ bears: state.bears + 1 })),\n-        }))\n-      }>\n-      <Button />\n-    </Provider>\n-  )\n-}\n-```\n-\n-</details>\n"
          }
        ]
      },
      "numOfFiles": 4,
      "numOfChanges": 6,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "f07276c3f56c7e883b25c78350580160119943b9",
      "url": "https://github.com/pmndrs/zustand/commit/f07276c3f56c7e883b25c78350580160119943b9",
      "message": "docs: 3d party libraries page added to docs (#1016)\n\n* Home page of wiki added to docs \r\n\r\nAdded home page to the docs directory\r\n\r\n* Delete home.md\r\n\r\n* 3d party libraries page is added \r\n\r\n3d party libraries page in wiki is now moved to docs directory\r\n\r\n* Delete 3rd party libraries .md\r\n\r\n* 3d party library page is added to docs\r\n\r\n* lint issue with file name resolved\r\n\r\n* rename\r\n\r\n* run prettier\r\n\r\n* fix readme\r\n\r\nCo-authored-by: daishi <daishi@axlight.com>",
      "author": {
        "name": "Vikash",
        "email": "107233167+chann44@users.noreply.github.com",
        "date": "2022-07-25T23:53:00Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/107233167?v=4"
      },
      "diffObj": {
        "a/docs/3rd-party-libraries.md": [
          {
            "+": "+# 3rd Party Libraries\n+\n+Zustand provides bear necessities for state management which is great for most projects; however, some users wish to extend the library's feature set. This can be done using 3rd-party libraries created by the community.\n+\n+> Disclaimer: These libraries may have bugs, limited maintenance, or other limitations and are not officially recommended by pmndrs or the zustand maintainers. This list is to provide a good starting point for someone looking to extend zustand's feature set.\n+\n+- [@colorfy-software/zfy](https://colorfy-software.gitbook.io/zfy/) - 🧸 Useful helpers for state management in React with zustand.\n+- [@dhmk/zustand-lens](https://github.com/dhmk083/dhmk-zustand-lens) - Lens support for zustand\n+- [@liveblocks/zustand](https://github.com/liveblocks/liveblocks/tree/main/packages/liveblocks-zustand) - Liveblocks middleware to make your application multiplayer.\n+- [auto-zustand-selectors-hook](https://github.com/Albert-Gao/auto-zustand-selectors-hook) - Auto generate zustand hooks for you store with Typescript support\n+- [geschichte](https://github.com/BowlingX/geschichte) - zustand and immer based hook to manage query parameters\n+- [mobz](https://github.com/2A5F/Mobz) - zustand style mobx api\n+- [shared-zustand](https://github.com/Tom-Julux/shared-zustand) - cross-tab state sharing for zustand\n+- [simple-zustand-devtools](https://github.com/beerose/simple-zustand-devtools) - Inspect your zustand store in React DevTools 🐻⚛️\n+- [solid-zustand](https://github.com/wobsoriano/solid-zustand) - Zustand state management for Solid.\n+- [vue-zustand](https://github.com/wobsoriano/vue-zustand) - State-management solution for Vue based on Zustand.\n+- [zoov](https://github.com/InfiniteXyy/zoov) - Use 🐻 Zustand with Module-like api\n+- [zundo](https://github.com/charkour/zundo) - 🍜 enable time-travel in your apps. undo/redo middleware for zustand\n+- [zustand-constate](https://github.com/ntvinhit/zustand-constate) - Context based state management that use the power of both zustand and constate, and remove many cons of them\n+- [zustand-forms](https://github.com/Conduct/zustand-forms) - fast typesafe form states as zustand stores\n+- [zustand-middleware-computed-state](https://github.com/cmlarsen/zustand-middleware-computed-state) - This is a dead simple middleware for adding computed state to state management library Zustand.\n+- [zustand-middleware-xstate](https://github.com/biowaffeln/zustand-middleware-xstate) - This middleware allows you to easily put your xstate state machines into a global zustand store.\n+- [zustand-middleware-yjs](https://github.com/joebobmiles/zustand-middleware-yjs) - Middleware for synchronizing Zustand stores with Yjs.\n+- [zustand-persist](https://github.com/roadmanfong/zustand-persist) - Persist and rehydrate state\n+- [zustand-saga](https://github.com/Nowsta/zustand-saga) - Zustand middleware for redux-saga (minus redux)\n+- [zustand-store-addons](https://github.com/Diablow/zustand-store-addons) - React state management addons for zustand.\n+- [zustand-yjs](https://github.com/tandem-pt/zustand-yjs) - Zustand stores for Yjs structures.\n+- [zusteller](https://github.com/timkindberg/zusteller) - Your global state savior. \"Just hooks\" + zustand.\n+- [zustood](https://github.com/udecode/zustood) - 🐻‍❄️ A modular store factory using zustand\n+- [zustand-rx](https://github.com/patdx/zustand-rx) - Zustand middleware with Rxjs\n",
            "-": ""
          }
        ],
        "a/readme.md": [
          {
            "+": "+Some users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit [the doc](docs/3rd-party-libraries.md).\n",
            "-": "-Some users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "02becf2e8b87ad530f6de2fe01f110943599d7dc",
      "url": "https://github.com/pmndrs/zustand/commit/02becf2e8b87ad530f6de2fe01f110943599d7dc",
      "message": "docs: Add migration for #1051 (#1105)\n\n* docs: Add migration for #1051\r\n\r\n* better wording\r\n\r\n* fix grammar, better wording",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-07-18T23:26:55Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/v4-migration.md": [
          {
            "+": "+## `combine`, `devtools`, `subscribeWithSelector` (from `zustand/middleware`)\n",
            "-": "-## `combine`, `devtools`, `persist`, `subscribeWithSelector` (from `zustand/middleware`)\n"
          },
          {
            "-": "-- persist:\n--   <T, U>(...) => ...\n-+ persist:\n-+   <T, U, Mps, Mcs>(...) => ...\n-\n",
            "+": ""
          },
          {
            "+": "+## `persist` (from `zustand/middleware`)\n+\n+### Change\n+\n+```diff\n+- persist:\n+-   <T, U = Partial<T>>(...) => ...\n++ persist:\n++   <T, Mps, Mcs, U = T>(...) => ...\n+```\n+\n+### Migration\n+\n+If you're passing any type parameters, then remove them because they will be inferred. Next, if you're passing the `partialize` option then there's no further steps required for migration.\n+\n+But if you're not passing the `partialize` option then you might be seeing some compilation errors. If you're not seeing any compilation errors then there's no further steps requierd for migration.\n+\n+But if you're seeing some compilation errors—because now the type of partialized state is `T` instead of `Partial<T>` which is in alignment with the runtime behavior of default `partialize` being `s => s`—then in that case you should fix the errors because they might be indicative of unsound code. To be clear the runtime behavior has not changed, the types have gotten more correct, but if your partialised state is truly `Partial<T>` then you can pass the `partialize` option as `s => s as Partial<typeof s>`. You can do this for a quickfix too.\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "1449732ad9974beb3d260c249f9cfa0181f701d6",
      "url": "https://github.com/pmndrs/zustand/commit/1449732ad9974beb3d260c249f9cfa0181f701d6",
      "message": "docs: fix the link to slices pattern (#1095)",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-07-17T14:33:39Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/flux-inspired-practice.md": [
          {
            "+": "+See [Splitting the store into separate slices](https://github.com/pmndrs/zustand/blob/main/docs/typescript.md#slices-pattern) for how to define a store with separate slices.\n",
            "-": "-See [Splitting the store into separate slices](https://github.com/pmndrs/zustand/blob/main/docs/typescript.md#interdependent-slices-pattern) for how to define a store with separate slices.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "style",
      "sha": "c16c8d108f708e3db1569d0fb26d650f756f7413",
      "url": "https://github.com/pmndrs/zustand/commit/c16c8d108f708e3db1569d0fb26d650f756f7413",
      "message": "style(examples): run prettier on the examples (#1092)\n\n* chore: add dir \"example\" and file types \"js,jsx\" to prettier script\r\n\r\n* chore: create .prettierignore and add \"/examples/build\"\r\n\r\n* chore: remove deprecated prettier config\r\n\r\n* style: run yarn prettier\r\n\r\n* chore: make prettier run only for `example/src`\r\n\r\n* chore: add `\"bracketSameLine\": true` to prettier config\r\n\r\n* style: run yarn prettier\r\n\r\n* Update examples/config-overrides.js\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "Mike",
        "email": "yum650350@gmail.com",
        "date": "2022-07-17T04:50:25Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/48589760?v=4"
      },
      "diffObj": {
        "a/examples/package.json": [
          {
            "+": "+    \"bracketSameLine\": true,\n",
            "-": "-    \"jsxBracketSameLine\": true,\n"
          }
        ],
        "a/examples/src/components/Backdrop.js": [
          {
            "+": "+      camera={{ zoom: 5, position: [0, 0, 200], far: 300, near: 0 }}>\n",
            "-": "-      camera={{ zoom: 5, position: [0, 0, 200], far: 300, near: 0 }}\n-    >\n"
          }
        ],
        "a/examples/src/components/CopyButton.js": [
          {
            "+": "+  const handleCopy = useCallback(() => {\n",
            "-": "-  const handleCopy =  useCallback(()  => {\n"
          },
          {
            "+": "+              {...props}>\n",
            "-": "-              {...props}\n-            >\n"
          }
        ],
        "a/examples/src/utils/copy-to-clipboard.js": [
          {
            "+": "+}\n",
            "-": "-}\n"
          }
        ],
        "a/package.json": [
          {
            "+": "+    \"prettier\": \"prettier '*.{js,json,md}' '{examples/src,src,tests,docs}/**/*.{js,jsx,ts,tsx,md,mdx}' --write\",\n+    \"prettier:ci\": \"prettier '*.{js,json,md}' '{examples/src,src,tests,docs}/**/*.{js,jsx,ts,tsx,md,mdx}' --list-different\",\n",
            "-": "-    \"prettier\": \"prettier '*.{js,json,md}' '{src,tests,docs}/**/*.{ts,tsx,md,mdx}' --write\",\n-    \"prettier:ci\": \"prettier '*.{js,json,md}' '{src,tests,docs}/**/*.{ts,tsx,md,mdx}' --list-different\",\n"
          }
        ]
      },
      "numOfFiles": 5,
      "numOfChanges": 6,
      "qualityScore": 50
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "8d7bb9aec9a1c20cb62f80378e2754c4a86561ae",
      "url": "https://github.com/pmndrs/zustand/commit/8d7bb9aec9a1c20cb62f80378e2754c4a86561ae",
      "message": "doc(types): Remove independent slices pattern (#1090)",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-07-16T12:15:58Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+### Slices pattern\n",
            "-": "-### Independent slices pattern\n-\n-```ts\n-import create, { StateCreator } from 'zustand'\n-\n-interface BearSlice {\n-  bears: number\n-  addBear: () => void\n-}\n-const createBearSlice: StateCreator<BearSlice, [], []> = (set) => ({\n-  bears: 0,\n-  addBear: () => set((state) => ({ bears: state.bears + 1 })),\n-})\n-\n-interface FishSlice {\n-  fishes: number\n-  addFish: () => void\n-}\n-const createFishSlice: StateCreator<FishSlice, [], []> = (set) => ({\n-  fishes: 0,\n-  addFish: () => set((state) => ({ fishes: state.fishes + 1 })),\n-})\n-\n-const useStore = create<BearSlice & FishSlice>()((...a) => ({\n-  ...createBearSlice(...a),\n-  ...createFishSlice(...a),\n-}))\n-```\n-\n-If you have some middlewares then replace `StateCreator<MySlice, [], []>` with `StateCreator<MySlice, Mutators, []>`. Eg if you're using `devtools` then it'll be `StateCreator<MySlice, [[\"zustand/devtools\", never]], []>`. See the [\"Middlewares and their mutators reference\"](#middlewares-and-their-mutators-reference) section for a list of all mutators.\n-\n-Also you can even write `StateCreator<MySlice>` instead of `StateCreator<MySlice, [], []>` as the second and third parameter have `[]` as their default value.\n-\n-### Interdependent slices pattern\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "d49dde827abc22cec1cf1f935252deab5321afaf",
      "url": "https://github.com/pmndrs/zustand/commit/d49dde827abc22cec1cf1f935252deab5321afaf",
      "message": "docs(readme): symbol supplement in code example (#1083)\n\n* docs(readme): symbol supplement in code example\r\n\r\nLocated at `Reading/writing state and reacting to changes outside of components`\r\nSupplement the ending symbol of the `Component` function\r\n\r\n* docs(readme): unify the style of some code examples",
      "author": {
        "name": "xlboy",
        "email": "xlboy88888@foxmail.com",
        "date": "2022-07-13T15:17:52Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/63690944?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+const Component = () => {\n+  const paw = useStore((state) => state.paw)\n+  ...\n",
            "-": "-function Component() {\n-  const paw = useStore(state => state.paw)\n"
          },
          {
            "+": "+const Component = () => {\n",
            "-": "-function Component() {\n"
          },
          {
            "+": "+  ...\n",
            "-": ""
          },
          {
            "-": "-}\n",
            "+": ""
          },
          {
            "-": "-}\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 5,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "85a5959a2d50d19b813118d529032fabe946b6d6",
      "url": "https://github.com/pmndrs/zustand/commit/85a5959a2d50d19b813118d529032fabe946b6d6",
      "message": "docs(typescript): supplement the missing `)` symbol in the `combine` code example (#1082)\n\n* docs(typescript): supplement the missing `)` symbol in the `combine` code example\r\n\r\n* style(docs/typescript): formatting",
      "author": {
        "name": "xlboy",
        "email": "xlboy88888@foxmail.com",
        "date": "2022-07-13T11:56:29Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/63690944?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+import create from 'zustand'\n+import { combine } from 'zustand/middleware'\n",
            "-": "-import create from \"zustand\"\n-import { combine } from \"zustand/middleware\"\n"
          },
          {
            "+": "+const useStore = create(\n+  combine({ bears: 0 }, (set) => ({\n+    increase: (by: number) => set((state) => ({ bears: state.bears + by })),\n+  }))\n+)\n",
            "-": "-const useStore = create(combine({ bears: 0 }, (set) => ({\n-  increase: (by: number) => set((state) => ({ bears: state.bears + by })),\n-}))\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "test",
      "sha": "f949d04ff29eccbf2d27661c0d5c13b34ecee04d",
      "url": "https://github.com/pmndrs/zustand/commit/f949d04ff29eccbf2d27661c0d5c13b34ecee04d",
      "message": "tests(shallow): Compare functions test was added (#1071)\n\n* feat: compare functions test was added\r\n\r\n* run prettier to formate code",
      "author": {
        "name": "Timoteo",
        "email": "64227164+tbor00@users.noreply.github.com",
        "date": "2022-07-11T03:20:43Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/64227164?v=4"
      },
      "diffObj": {
        "a/tests/shallow.test.tsx": [
          {
            "+": "+\n+  it('compares functions', () => {\n+    function firstFnCompare() {\n+      return { foo: 'bar' }\n+    }\n+\n+    function secondFnCompare() {\n+      return { foo: 'bar' }\n+    }\n+\n+    expect(shallow(firstFnCompare, firstFnCompare)).toBe(true)\n+\n+    expect(shallow(secondFnCompare, secondFnCompare)).toBe(true)\n+\n+    expect(shallow(firstFnCompare, secondFnCompare)).toBe(false)\n+  })\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "cb7c2a2f365867c4820faac09b5b8def6d9f67d4",
      "url": "https://github.com/pmndrs/zustand/commit/cb7c2a2f365867c4820faac09b5b8def6d9f67d4",
      "message": "docs(typescript): Add mutators reference (#1050)\n\n* docs(typescript): Add mutators reference\r\n\r\n* better wording",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-07-06T03:28:27Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+If you have some middlewares then replace `StateCreator<MySlice, [], []>` with `StateCreator<MySlice, Mutators, []>`. Eg if you're using `devtools` then it'll be `StateCreator<MySlice, [[\"zustand/devtools\", never]], []>`. See the [\"Middlewares and their mutators reference\"](#middlewares-and-their-mutators-reference) section for a list of all mutators.\n",
            "-": "-If you have some middlewares then replace `StateCreator<MySlice, [], []>` with `StateCreator<MySlice, Mutators, []>`. Eg if you're using `devtools` then it'll be `StateCreator<MySlice, [[\"zustand/devtools\", never]], []>`.\n"
          },
          {
            "+": "+If you have some middlewares then replace `StateCreator<MyState, [], [], MySlice>` with `StateCreator<MyState, Mutators, [], MySlice>`. Eg if you're using `devtools` then it'll be `StateCreator<MyState, [[\"zustand/devtools\", never]], [], MySlice>`. See the [\"Middlewares and their mutators reference\"](#middlewares-and-their-mutators-reference) section for a list of all mutators.\n+\n+## Middlewares and their mutators reference\n+\n+- `devtools` — `[\"zustand/devtools\", never]`\n+- `persist` — `[\"zustand/persist\", YourPersistedState]`<br/>\n+  `YourPersistedState` is the type of state you're going to persist, ie the return type of `options.partialize`, if you're not passing `partialize` options the `YourPersistedState` becomes `Partial<YourState>`. Also [sometimes](https://github.com/pmndrs/zustand/issues/980#issuecomment-1162289836) passing actual `PersistedState` won't work, in those cases try passing `unknown`.\n+- `immer` — `[\"zustand/immer\", never]`\n+- `subscribeWithSelector` — `[\"zustand/subscribeWithSelector\", never]`\n+- `redux` — `[\"zustand/redux\", YourAction]`\n+- `combine` — no mutator as `combine` doesn't mutate the store\n",
            "-": "-If you have some middlewares then replace `StateCreator<MyState, [], [], MySlice>` with `StateCreator<MyState, Mutators, [], MySlice>`. Eg if you're using `devtools` then it'll be `StateCreator<MyState, [[\"zustand/devtools\", never]], [], MySlice>`.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "f8bc24edf0cce7333a6bc3c0b8c0e70da4976ae4",
      "url": "https://github.com/pmndrs/zustand/commit/f8bc24edf0cce7333a6bc3c0b8c0e70da4976ae4",
      "message": "docs: typo in readme.md (#1049)\n\nFixed typo \"seperate\" to \"separate\".",
      "author": {
        "name": "Sepehr Safari",
        "email": "safari.sepehr@gmail.com",
        "date": "2022-07-03T11:53:00Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/25853688?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n",
            "-": "-- You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "e220737042d7800cb1d184115c5eb23f79f3622d",
      "url": "https://github.com/pmndrs/zustand/commit/e220737042d7800cb1d184115c5eb23f79f3622d",
      "message": "docs(typescript): fix minor grammar issue (#1009)",
      "author": {
        "name": "guilleon-velasco",
        "email": "107241765+guilleon-velasco@users.noreply.github.com",
        "date": "2022-06-15T10:19:28Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/107241765?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+The difference when using TypeScript is instead of writing `create(...)`, you have to write `create<T>()(...)` where `T` would be type of the state so as to annotate it. Example...\n",
            "-": "-When using TypeScript you just have to make a tiny change that instead of writing `create(...)` you'll have to write `create<T>()(...)` where `T` would be type of the state so as to annotate it. Example...\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "d83c41d3125923003c07aedd8e7ccd5a4de84d31",
      "url": "https://github.com/pmndrs/zustand/commit/d83c41d3125923003c07aedd8e7ccd5a4de84d31",
      "message": "docs(typescript): Add a note to not use curried version when using state-creating middlewares (#1003)",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2022-06-14T00:42:35Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+Also note that we're not using the curried version when using `combine` because `combine` \"creates\" the state. When using a middleware that creates the state, it's not necessary to use the curried version because the state now can be inferred. Another middleware that creates state is `redux`. So when using `combine`, `redux` or any other custom middleware that creates the state, it's not recommended to use the curried version.\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "12c81383ac81de67b84ba7b63ffc2e81a8e66e76",
      "url": "https://github.com/pmndrs/zustand/commit/12c81383ac81de67b84ba7b63ffc2e81a8e66e76",
      "message": "docs(typescript): fix typo in middleware without mutations (#956)\n\nCo-authored-by: mahendrad <mahendrad@consultbop.com>",
      "author": {
        "name": "mahendradambe",
        "email": "45140148+mahendradambe@users.noreply.github.com",
        "date": "2022-05-15T05:45:59Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/45140148?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+export const logger = loggerImpl as unknown as Logger\n",
            "-": "-export const logger = loggerImpl as unknown as Foo\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "d1d487f096f93069b2502fe4302a8d1aa8950700",
      "url": "https://github.com/pmndrs/zustand/commit/d1d487f096f93069b2502fe4302a8d1aa8950700",
      "message": "Docs: Fix TypeScript docs for Middleware that changes the store type (#927)",
      "author": {
        "name": "Piotr",
        "email": "hello@piotr.cz",
        "date": "2022-04-24T02:31:20Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/612953?v=4"
      },
      "diffObj": {
        "a/docs/typescript.md": [
          {
            "+": "+    foo: Write<Cast<S, object>, { foo: A }>\n",
            "-": "-    foo: Write<Cast<S, object> { foo: A }>\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "fe06e1318765497b52cca44df39253eb0a6f58bd",
      "url": "https://github.com/pmndrs/zustand/commit/fe06e1318765497b52cca44df39253eb0a6f58bd",
      "message": "docs: Fix TypeScript docs for using subscribe with selector (#876)",
      "author": {
        "name": "Paras Sanghavi",
        "email": "paras@disambiguo.us",
        "date": "2022-03-21T03:09:30Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2306794?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+import create, { Mutate, GetState, SetState, StoreApi } from 'zustand'\n+import { subscribeWithSelector } from 'zustand/middleware'\n",
            "-": "-import create, { GetState, SetState } from 'zustand'\n-import { StoreApiWithSubscribeWithSelector, subscribeWithSelector } from 'zustand/middleware'\n"
          },
          {
            "+": "+  Mutate<StoreApi<BearState>, [[\"zustand/subscribeWithSelector\", never]]>\n",
            "-": "-  StoreApiWithSubscribeWithSelector<BearState>\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "0aeaf7f05047e1537f1bfbac7a07c0743786747f",
      "url": "https://github.com/pmndrs/zustand/commit/0aeaf7f05047e1537f1bfbac7a07c0743786747f",
      "message": "docs: add note about using set() third param for logging (#712)\n\n* docs: add note about using set() third param for logging\r\n\r\n* docs: update readme with suggested changes for action type logging\r\n\r\n* Update readme.md\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "Omid Kashan",
        "email": "omid@antilong.com",
        "date": "2021-12-23T00:35:12Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1922098?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+\n+Serialize options: `devtools(store, { serialize: { options: true } })`.\n",
            "-": "-Serialize options: `devtools(store, { serialize: { options: true } })`.  \n"
          },
          {
            "+": "+#### Logging Actions\n+\n",
            "-": ""
          },
          {
            "+": "+You can log a specific action type for each `set` function by passing a third parameter:\n+\n+```jsx\n+const createBearSlice = (set, get) => ({\n+  eatFish: () =>\n+    set(\n+      (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n+      false,\n+      \"bear/eatFish\"\n+    ),\n+})\n+```\n+\n+If an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter: \n+\n+```jsx\n+devtools(..., { anonymousActionType: 'unknown', ... })\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "c3697e52516f2e8917ffdac97785f1d05ebd3eb5",
      "url": "https://github.com/pmndrs/zustand/commit/c3697e52516f2e8917ffdac97785f1d05ebd3eb5",
      "message": "Remove devtools prefixing from readme (#706)",
      "author": {
        "name": "Devansh Jethmalani",
        "email": "jethmalani.devansh@gmail.com",
        "date": "2021-12-10T23:13:40Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/30295578?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+Name store: `devtools(store, {name: \"MyStore\"})`, which will create a seperate instance named \"MyStore\" in the devtools.\n",
            "-": "-Name store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 0
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "732edbc61fb3d71449bddfb29dcb15c86c06237c",
      "url": "https://github.com/pmndrs/zustand/commit/732edbc61fb3d71449bddfb29dcb15c86c06237c",
      "message": "docs: link persist full documentation in readme (#653)",
      "author": {
        "name": "Anatole Lucet",
        "email": "anatole@hey.com",
        "date": "2021-11-10T22:34:27Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/35486736?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+    getStorage: () => sessionStorage, // (optional) by default, 'localStorage' is used\n",
            "-": "-    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n"
          },
          {
            "+": "+[See the full documentation for this middleware.](https://github.com/pmndrs/zustand/wiki/Persisting-the-store's-data)\n",
            "-": "-<details>\n-<summary>How to use custom storage engines</summary>\n-\n-You can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n-\n-```tsx\n-import create from \"zustand\"\n-import { persist, StateStorage } from \"zustand/middleware\"\n-import { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n-\n-// Custom storage object\n-const storage: StateStorage = {\n-  getItem: async (name: string): Promise<string | null> => {\n-    console.log(name, \"has been retrieved\");\n-    return await get(name) || null\n-  },\n-  setItem: async (name: string, value: string): Promise<void> => {\n-    console.log(name, \"with value\", value, \"has been saved\");\n-    set(name, value)\n-  }\n-}\n-\n-export const useStore = create(persist(\n-  (set, get) => ({\n-    fishes: 0,\n-    addAFish: () => set({ fishes: get().fishes + 1 })\n-  }),\n-  {\n-    name: \"food-storage\", // unique name\n-    getStorage: () => storage,\n-  }\n-))\n-```\n-\n-</details>\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "36d9312805189a08f4cf8c41152660706005440c",
      "url": "https://github.com/pmndrs/zustand/commit/36d9312805189a08f4cf8c41152660706005440c",
      "message": "docs: Clarify that listeners added with `subscribe` are called synchronously (#602)",
      "author": {
        "name": "benj-dobs",
        "email": "35073256+benj-dobs@users.noreply.github.com",
        "date": "2021-10-21T13:08:39Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/35073256?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+// Listening to all changes, fires synchronously on every change\n",
            "-": "-// Listening to all changes, fires on every change\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "5edfe63510063f706e1e51f569b6ed3439e06ad2",
      "url": "https://github.com/pmndrs/zustand/commit/5edfe63510063f706e1e51f569b6ed3439e06ad2",
      "message": "docs: document that createContext can be used to initialize a store depending on props, and how to work with it in TypeScript (#553)",
      "author": {
        "name": "Dominik Dorfmeister",
        "email": "office@dorfmeister.cc",
        "date": "2021-09-02T23:31:49Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1021430?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+The store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n",
            "-": "-The store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n"
          },
          {
            "+": "+<details>\n+  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n+\n+  ```tsx\n+  import create from \"zustand\";\n+  import createContext from \"zustand/context\";\n+\n+  type BearState = {\n+    bears: number\n+    increase: () => void\n+  }\n+\n+  // pass the type to `createContext` rather than to `create`\n+  const { Provider, useStore } = createContext<BearState>();\n+\n+  export default function App({ initialBears }: { initialBears: number }) {\n+    return (\n+      <Provider\n+        createStore={() =>\n+          create((set) => ({\n+            bears: initialBears,\n+            increase: () => set((state) => ({ bears: state.bears + 1 })),\n+          }))\n+        }\n+      >\n+        <Button />\n+      </Provider>\n+  )\n+}\n+  ```\n+</details>\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "docs",
      "sha": "a49d1473a62f19194bb1194d38f71121d8cdb592",
      "url": "https://github.com/pmndrs/zustand/commit/a49d1473a62f19194bb1194d38f71121d8cdb592",
      "message": "README typo fix (#456)",
      "author": {
        "name": "Matthew Caseres",
        "email": "matthewcaseres@outlook.com",
        "date": "2021-06-24T03:23:43Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/43053796?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+const immer = <T extends State>(config: StateCreator<T>): StateCreator<T> => \n",
            "-": "-const immer = <T extends State>config: StateCreator<T>): StateCreator<T> => \n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "c5c473d9119cfaa3cdfe06239b9c9fd618271d3c",
      "url": "https://github.com/pmndrs/zustand/commit/c5c473d9119cfaa3cdfe06239b9c9fd618271d3c",
      "message": "docs: zustand/context correct doc, added snippets (#433)\n\n* docs: zustand/context correct doc, added snippets\r\n\r\n* docs: corrected review points\r\n\r\n* docs: createContext summary change",
      "author": {
        "name": "Karthikeyan",
        "email": "karthikeyan90422@gmail.com",
        "date": "2021-06-13T11:20:54Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/24937683?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+const createStore = () => create(...)\n",
            "-": "-const store = create(...)\n"
          },
          {
            "+": "+  <Provider initialStore={createStore()}>\n",
            "-": "-  <Provider initialStore={store}>\n"
          },
          {
            "+": "+<details>\n+  <summary>createContext usage in real components</summary>\n+\n+  ```jsx\n+  import create from \"zustand\";\n+  import createContext from \"zustand/context\";\n+\n+  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n+\n+  const { Provider, useStore } = createContext();\n+\n+  const createStore = () =>\n+    create((set) => ({\n+      bears: 0,\n+      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n+      removeAllBears: () => set({ bears: 0 })\n+    }));\n+\n+  const Button = () => {\n+    return (\n+        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n+      <Provider initialStore={createStore()}> \n+        <ButtonChild />\n+      </Provider>\n+    );\n+  };\n+\n+  const ButtonChild = () => {\n+    const state = useStore();\n+    return (\n+      <div>\n+        {state.bears}\n+        <button\n+          onClick={() => {\n+            state.increasePopulation();\n+          }}\n+        >\n+          +\n+        </button>\n+      </div>\n+    );\n+  };\n+\n+  export default function App() {\n+    return (\n+      <div className=\"App\">\n+        <Button />\n+        <Button />\n+      </div>\n+    );\n+  }\n+  ```\n+</details>\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "b259c2a89cef4c83f1bd1b22d643a04f60385831",
      "url": "https://github.com/pmndrs/zustand/commit/b259c2a89cef4c83f1bd1b22d643a04f60385831",
      "message": "Remove usage of `any` from tests (#417)\n\n* Remove usage of `any` from tests\r\n\r\n* Improve\r\n\r\n* Improve\r\n\r\n* Replace @ts-ignore with @ts-expect-error\r\n\r\n* Fix TS errors\r\n\r\n* Apply suggested solution to 'can get the store'\r\n\r\n* Remove any from 'can set store' (TS doesn't like it, though)\r\n\r\n* Yay\r\n\r\n* Use more precise type",
      "author": {
        "name": "Benjamin Arbogast",
        "email": "benjamin.arbogast@gmail.com",
        "date": "2021-06-08T22:44:59Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/941889?v=4"
      },
      "diffObj": {
        "a/tests/basic.test.tsx": [
          {
            "+": "+  const useStore = create<CounterState>((set) => ({\n",
            "-": "-  const useStore = create<any>((set) => ({\n"
          },
          {
            "+": "+    inc: () => set((state) => ({ count: state.count + 1 })),\n",
            "-": "-    inc: () => set((state: any) => ({ count: state.count + 1 })),\n"
          },
          {
            "+": "+  const useStore = create<CounterState>((set) => ({\n",
            "-": "-  const useStore = create<any>((set) => ({\n"
          },
          {
            "+": "+    inc: () => set((state) => ({ count: state.count + 1 })),\n",
            "-": "-    inc: () => set((state: any) => ({ count: state.count + 1 })),\n"
          },
          {
            "+": "+  const useStore = create<CounterState>((set) => ({\n",
            "-": "-  const useStore = create<any>((set) => ({\n"
          },
          {
            "+": "+    inc: () => set((state) => ({ count: state.count + 1 })),\n",
            "-": "-    inc: () => set((state: any) => ({ count: state.count + 1 })),\n"
          },
          {
            "+": "+  type State = { one: string; two: string }\n+  type Props = { selector: StateSelector<State, string> }\n+  const useStore = create<State>(() => ({\n",
            "-": "-  const useStore = create(() => ({\n"
          },
          {
            "+": "+  function Component({ selector }: Props) {\n",
            "-": "-  function Component({ selector }: any) {\n"
          },
          {
            "+": "+  const { findByText, rerender } = render(<Component selector={(s) => s.one} />)\n",
            "-": "-  const { findByText, rerender } = render(\n-    <Component selector={(s: any) => s.one} />\n-  )\n"
          },
          {
            "+": "+  rerender(<Component selector={(s) => s.two} />)\n",
            "-": "-  rerender(<Component selector={(s: any) => s.two} />)\n"
          },
          {
            "+": "+  type State = { value: number }\n+  type Props = { equalityFn: EqualityChecker<number> }\n+  const useStore = create<State>(() => ({ value: 0 }))\n",
            "-": "-  const useStore = create(() => ({ value: 0 }))\n"
          },
          {
            "+": "+  const selector: StateSelector<State, number> = (s) => s.value\n",
            "-": "-  const selector = (s: any) => s.value\n"
          },
          {
            "+": "+  function Component({ equalityFn }: Props) {\n",
            "-": "-  function Component({ equalityFn }: any) {\n"
          },
          {
            "+": "+  type State = { value: number }\n+  type Props = {\n+    selector?: StateSelector<State, number>\n+    equalityFn?: EqualityChecker<number>\n+  }\n+\n+  const useStore = create<State>(() => ({ value: 0 }))\n",
            "-": "-  const useStore = create(() => ({ value: 0 }))\n"
          },
          {
            "+": "+  function Component({ selector, equalityFn }: Props) {\n+    const value = useStore(selector as any, equalityFn)\n",
            "-": "-  function Component({ selector, equalityFn }: any) {\n-    const value = useStore(selector, equalityFn)\n"
          },
          {
            "+": "+  rerender(<Component selector={(s) => s.value} />)\n",
            "-": "-  rerender(<Component selector={(s: any) => s.value} />)\n"
          },
          {
            "+": "+      selector={(s) => s.value}\n+      equalityFn={(oldV, newV) => oldV > newV}\n",
            "-": "-      selector={(s: any) => s.value}\n-      equalityFn={(oldV: any, newV: any) => oldV > newV}\n"
          },
          {
            "+": "+  type State = { value?: string }\n",
            "-": ""
          },
          {
            "+": "+  const initialState: State = { value: 'foo' }\n+  const useStore = create<State>(() => initialState)\n",
            "-": "-  const initialState: { value?: string } = { value: 'foo' }\n-  const useStore = create(() => initialState)\n"
          },
          {
            "+": "+  const selector: StateSelector<State, string | void> = (s) =>\n+    // @ts-expect-error This function is supposed to throw an error\n+    s.value.toUpperCase()\n",
            "-": "-  const selector = (s: any) => s.value.toUpperCase()\n"
          },
          {
            "+": "+  type State = { value?: string }\n",
            "-": ""
          },
          {
            "+": "+  const initialState: State = { value: 'foo' }\n",
            "-": "-  const initialState: { value?: string } = { value: 'foo' }\n"
          },
          {
            "+": "+  const selector: StateSelector<State, State> = (s) => s\n+  const equalityFn: EqualityChecker<State> = (a, b) =>\n+    // @ts-expect-error This function is supposed to throw an error\n+    a.value.trim() === b.value?.trim()\n",
            "-": "-  const selector = (s: any) => s\n-  const equalityFn = (a: any, b: any) => a.value.trim() === b.value.trim()\n"
          },
          {
            "+": "+  type State = {\n+    value: number\n+    getState1: () => State\n+    getState2: () => State\n+  }\n+  const { getState } = create<State>((_, get) => ({\n",
            "-": "-  const { getState } = create<any>((_, get) => ({\n"
          },
          {
            "+": "+    getState2: (): State => getState(),\n",
            "-": "-    getState2: () => getState(),\n"
          },
          {
            "+": "+  type State = {\n+    value: number\n+    setState1: SetState<State>\n+    setState2: SetState<State>\n+  }\n+\n+  const { setState, getState } = create<State>((set) => ({\n",
            "-": "-  const { setState, getState } = create<any>((set) => ({\n"
          },
          {
            "+": "+    setState1: (v) => set(v),\n+    setState2: (v) => setState(v),\n",
            "-": "-    setState1: (v: any) => set(v),\n-    setState2: (v: any) => setState(v),\n"
          },
          {
            "+": "+  getState().setState1((s) => ({ value: ++s.value }))\n",
            "-": "-  getState().setState1((s: any) => ({ value: ++s.value }))\n"
          },
          {
            "+": "+  getState().setState2((s) => ({ value: ++s.value }))\n",
            "-": "-  getState().setState2((s: any) => ({ value: ++s.value }))\n"
          },
          {
            "+": "+    undefined,\n",
            "-": "-    undefined as any,\n"
          },
          {
            "+": "+  const unsub2 = subscribe(listener2, (s) => s.value, isRoughEqual)\n",
            "-": "-  const unsub2 = subscribe(listener2, (s) => s.value, isRoughEqual as any)\n"
          },
          {
            "+": "+  type State = { a: number; b: number }\n+  const useStore = create<State>(() => ({ a: 0, b: 0 }))\n",
            "-": "-  const useStore = create(() => ({ a: 0, b: 0 }))\n"
          },
          {
            "+": "+  function staticSelector(s: State) {\n",
            "-": "-  function staticSelector(s: any) {\n"
          },
          {
            "+": "+  type State = {\n+    children: { [key: string]: { text: string } }\n+  }\n+  type Props = { id: string }\n+  const useStore = create<State>(() => ({\n",
            "-": "-  const useStore = create<any>(() => ({\n"
          },
          {
            "+": "+  function Child({ id }: Props) {\n",
            "-": "-  function Child({ id }: any) {\n"
          }
        ],
        "a/tests/persistAsync.test.tsx": [
          {
            "+": "+    const useStore = create(\n",
            "-": "-    const useStore = create<any>(\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 36,
      "qualityScore": 0
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "d2a587c51acda0d2e4d10fc974b6acc920db9c34",
      "url": "https://github.com/pmndrs/zustand/commit/d2a587c51acda0d2e4d10fc974b6acc920db9c34",
      "message": "Remove unnecessary console.error mocks from tests (#420)\n\n... and move one necessary one into the describe() block",
      "author": {
        "name": "Benjamin Arbogast",
        "email": "benjamin.arbogast@gmail.com",
        "date": "2021-06-08T08:32:12Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/941889?v=4"
      },
      "diffObj": {
        "a/tests/basic.test.tsx": [
          {
            "-": "-const consoleError = console.error\n-afterEach(() => {\n-  cleanup()\n-  console.error = consoleError\n-})\n-\n",
            "+": ""
          }
        ],
        "a/tests/context.test.tsx": [
          {
            "-": "-const consoleError = console.error\n-afterEach(() => {\n-  cleanup()\n-  console.error = consoleError\n-})\n-\n",
            "+": ""
          }
        ],
        "a/tests/persistAsync.test.tsx": [
          {
            "-": "-const consoleError = console.error\n-afterEach(() => {\n-  cleanup()\n-  console.error = consoleError\n-})\n-\n",
            "+": ""
          }
        ],
        "a/tests/persistSync.test.tsx": [
          {
            "-": "-const consoleError = console.error\n-afterEach(() => {\n-  console.error = consoleError\n-})\n-\n",
            "+": ""
          },
          {
            "+": "+  const consoleError = console.error\n+  afterEach(() => {\n+    console.error = consoleError\n+  })\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 4,
      "numOfChanges": 5,
      "qualityScore": 87
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "eb808d498caccb1f6e98e094456443d3d2ff63c1",
      "url": "https://github.com/pmndrs/zustand/commit/eb808d498caccb1f6e98e094456443d3d2ff63c1",
      "message": "Remove it.only() from test so that all tests get executed (#415)",
      "author": {
        "name": "Benjamin Arbogast",
        "email": "benjamin.arbogast@gmail.com",
        "date": "2021-06-06T08:13:18Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/941889?v=4"
      },
      "diffObj": {
        "a/tests/persistSync.test.tsx": [
          {
            "+": "+  it('can correclty handle a missing migrate function', () => {\n",
            "-": "-  it.only('can correclty handle a missing migrate function', () => {\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 0
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "a63bd91ae33134b7086c61c3d1f9fb377fde3a0f",
      "url": "https://github.com/pmndrs/zustand/commit/a63bd91ae33134b7086c61c3d1f9fb377fde3a0f",
      "message": "Removed \"initialState\" parameter from createContext() (#382)\n\n* remove \"initialState\" parameter from createContext() to avoid confusion\r\n\r\n* remove optional initialState comment for TS.",
      "author": {
        "name": "Munawwar",
        "email": "munawwarfiroz@hotmail.com",
        "date": "2021-05-08T13:08:07Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/734816?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "-": "-Optionally, `createContext` accepts `initialState` to infer store types.\n-\n-```ts\n-const { Provider, useStore } = createContext(initialState)\n-```\n-\n",
            "+": ""
          }
        ],
        "a/src/context.ts": [
          {
            "+": "+function createContext<TState extends State>() {\n",
            "-": "-function createContext<TState extends State>(_initialState?: TState) {\n"
          }
        ]
      },
      "numOfFiles": 2,
      "numOfChanges": 2,
      "qualityScore": 50
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "bc5c6881e807d49676af6b6c95f100baee90127c",
      "url": "https://github.com/pmndrs/zustand/commit/bc5c6881e807d49676af6b6c95f100baee90127c",
      "message": "docs(readme): fix persist middleware example (#371)",
      "author": {
        "name": "Anatole Lucet",
        "email": "anatole@hey.com",
        "date": "2021-04-22T12:51:28Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/35486736?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+    addAFish: () => set({ fishes: get().fishes + 1 })\n",
            "-": "-    addAFish: () => set({ fish: get().fish + 1 })\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "ac30f3e56788965754e921d35efd26086c291cf1",
      "url": "https://github.com/pmndrs/zustand/commit/ac30f3e56788965754e921d35efd26086c291cf1",
      "message": "docs: update readme on devtools usage (#369)",
      "author": {
        "name": "Olavo Parno",
        "email": "olavoparno@gmail.com",
        "date": "2021-04-20T21:36:06Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/7513162?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+devtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "4c141c329a31fdc080005e37f49c698efef2e5bb",
      "url": "https://github.com/pmndrs/zustand/commit/4c141c329a31fdc080005e37f49c698efef2e5bb",
      "message": "Readme: be more explicit about equality function (#293)",
      "author": {
        "name": "✳️ Willian Krueger",
        "email": "wkrueger128@gmail.com",
        "date": "2021-04-01T12:32:07Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2209181?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+For more control over re-rendering, you may provide an alternative equality function on the second argument.\n+\n+```jsx\n+const treats = useStore(\n+  state => state.treats,\n+  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n+)\n+```\n+\n+For instance, if you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n",
            "-": "-If you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing an alternative equality function.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "c31c710e2c181870659862faceb828c25f33172a",
      "url": "https://github.com/pmndrs/zustand/commit/c31c710e2c181870659862faceb828c25f33172a",
      "message": "docs: add an example for setting the state outside event (#302) (#303)\n\n* feat(docs): add an example for setting the state outside event (#302)\r\n\r\n* fix gramar issues\r\n\r\n* Point more details URL to the issue instead of the tweet\r\n\r\n* Simplify example\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>\r\n\r\n* Update readme.md\r\n\r\n* Update readme.md\r\n\r\nCo-authored-by: Cristian Ratoi <cristian.ratoi@everymatrix.com>\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "ratoi-crysty",
        "email": "ratoi_crysty@yahoo.com",
        "date": "2021-02-11T12:42:08Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/3619531?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+## Calling actions outside a React event handler\n+\n+Because React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\n+In order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n+\n+```jsx\n+import { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n+\n+const useStore = create((set) => ({\n+  fishes: 0,\n+  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n+}))\n+\n+const nonReactCallback = () => {\n+  unstable_batchedUpdates(() => {\n+    useStore.getState().increaseFishes()\n+  })\n+}\n+```\n+\n+More details: https://github.com/pmndrs/zustand/issues/302\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "cf4d1365b66895e6fc776e27ef1f1d25476aed01",
      "url": "https://github.com/pmndrs/zustand/commit/cf4d1365b66895e6fc776e27ef1f1d25476aed01",
      "message": "doc(persist): fix miss-worded onRehydrateStorage jsdoc (#288)",
      "author": {
        "name": "Anatole Lucet",
        "email": "anatole@hey.com",
        "date": "2021-01-28T14:15:19Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/35486736?v=4"
      },
      "diffObj": {
        "a/src/middleware.ts": [
          {
            "+": "+   * The main function will be called before the state rehydration.\n+   * The returned function will be called after the state rehydration.\n",
            "-": "-   * The main function will be called before the storage rehydration.\n-   * The returned function will be called after the storage rehydration.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 0
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "0d81f4616b752ddc5949ef23d05eadee00ae8f78",
      "url": "https://github.com/pmndrs/zustand/commit/0d81f4616b752ddc5949ef23d05eadee00ae8f78",
      "message": "doc(persist): update doc on readme (#279)",
      "author": {
        "name": "Anatole Lucet",
        "email": "anatole@hey.com",
        "date": "2021-01-08T10:48:35Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/35486736?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+    fishes: 0,\n",
            "-": "-    fish: 0,\n"
          },
          {
            "+": "+    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n",
            "-": "-    storage: sessionStorage, // (optional) default is 'localStorage'\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "cc27c49bc5eb7dfccd11747ed82da21f57734d47",
      "url": "https://github.com/pmndrs/zustand/commit/cc27c49bc5eb7dfccd11747ed82da21f57734d47",
      "message": "docs: add testing section (#270)\n\n* docs: add testing section\r\n\r\n* chore: replace testing section with link to wiki",
      "author": {
        "name": "Aggelos Arvanitakis",
        "email": "agg.arvanitakis@gmail.com",
        "date": "2021-01-08T10:06:31Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/10436045?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+\n+## Testing\n+\n+For information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "a4307f32b317a2fae7f7fb602f3e3d6d3f9ca848",
      "url": "https://github.com/pmndrs/zustand/commit/a4307f32b317a2fae7f7fb602f3e3d6d3f9ca848",
      "message": "docs: add comment regarding TS State typing (#274)\n\n* docs: add comment regarding TS State typing\r\n\r\nMake sure to warn users against using `interfaces`\r\n\r\n* docs: remove comment & replace with an example\r\n\r\n* chore: cleanup recipe\r\n\r\n* chore: cleanup recipe\r\n\r\n* Update readme.md\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>\r\n\r\nCo-authored-by: Daishi Kato <dai-shi@users.noreply.github.com>",
      "author": {
        "name": "Aggelos Arvanitakis",
        "email": "agg.arvanitakis@gmail.com",
        "date": "2021-01-07T22:55:10Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/10436045?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+You can also use an `interface`:\n+\n+```tsx\n+import { State } from 'zustand';\n+\n+interface BearState extends State {\n+  bears: number\n+  increase: (by: number) => void\n+}\n+```\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "353ddec2914f3e76a666f5cd1d0aab7da824a9cd",
      "url": "https://github.com/pmndrs/zustand/commit/353ddec2914f3e76a666f5cd1d0aab7da824a9cd",
      "message": "remove travis yml",
      "author": {
        "name": "daishi",
        "email": "daishi@axlight.com",
        "date": "2020-12-03T14:29:40Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/490574?v=4"
      },
      "diffObj": {
        "a/.travis.yml": [
          {
            "-": "-language: node_js\n-node_js:\n-  - stable\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "prefix-style",
      "type": "docs",
      "sha": "de28e510e68c0aee799bd69450d3dd153cbfd53b",
      "url": "https://github.com/pmndrs/zustand/commit/de28e510e68c0aee799bd69450d3dd153cbfd53b",
      "message": "Readme: Add docs for subscribe equality function (#181)\n\nI was wondering if the `subscribe` function also supports an equality function as third parameter. Of course it does! But I had to look it up in the code – so I thought adding it to the readme might be helpful.",
      "author": {
        "name": "Timo Mämecke",
        "email": "timomeh@users.noreply.github.com",
        "date": "2020-09-07T21:59:39Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/4227520?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+// Subscribe also supports an optional equality function\n+const unsub3 = useStore.subscribe(console.log, state => [state.paw, state.fur], shallow)\n",
            "-": ""
          },
          {
            "+": "+unsub3()\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 2,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "docs",
      "sha": "5c3a31242651adf719bdfc4da6d9e1b53b14acc9",
      "url": "https://github.com/pmndrs/zustand/commit/5c3a31242651adf719bdfc4da6d9e1b53b14acc9",
      "message": "README update: complete code blocks (#153)\n\n* Complete code blocks\r\n\r\n* Fix bug in bears example",
      "author": {
        "name": "Matt Sutkowski",
        "email": "msutkowski@gmail.com",
        "date": "2020-08-17T22:46:47Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/784953?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n",
            "-": "-  increasePopulation: () => set(state => ({ count: state.bears + 1 })),\n"
          },
          {
            "+": "+  }\n+}))\n",
            "-": ""
          },
          {
            "+": "+  }\n+})\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "docs",
      "sha": "9251b50c2c68b18f9537ce9477042b18afe4bb56",
      "url": "https://github.com/pmndrs/zustand/commit/9251b50c2c68b18f9537ce9477042b18afe4bb56",
      "message": "docs",
      "author": {
        "name": "Paul Henschel",
        "email": "drcmda@gmail.com",
        "date": "2020-08-17T15:21:59Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2223602?v=4"
      },
      "diffObj": {
        "a/readme.md": [
          {
            "+": "+devtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.\n",
            "-": "-devtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "30c7df080e7b9162fa63f2d0c2cd519f0a13a762",
      "url": "https://github.com/pmndrs/zustand/commit/30c7df080e7b9162fa63f2d0c2cd519f0a13a762",
      "message": "removes debug stuff",
      "author": {
        "name": "Gianmarco Simone",
        "email": "gianmarcosimone89@gmail.com",
        "date": "2020-08-13T15:37:32Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/1862172?v=4"
      },
      "diffObj": {
        "a/example/src/App.js": [
          {
            "-": "-\n-      <Stats />\n",
            "+": ""
          },
          {
            "-": "-        <ambientLight />\n",
            "+": ""
          },
          {
            "-": "-        <OrbitControls />\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 3,
      "qualityScore": 100
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "5569f0b6bf32c4164b6cae3fd808fec40f3273a5",
      "url": "https://github.com/pmndrs/zustand/commit/5569f0b6bf32c4164b6cae3fd808fec40f3273a5",
      "message": "Remove manual check of passed State generic",
      "author": {
        "name": "JeremyHolcomb",
        "email": "jholcomb@kyriba.com",
        "date": "2019-07-20T21:17:13Z"
      },
      "diffObj": {
        "a/src/index.ts": [
          {
            "+": "+  createState: StateCreator<TState>\n",
            "-": "-  // Use TState for createState signature when available.\n-  // e.g. create<MyState>(set => ...\n-  createState: keyof TState extends never\n-    ? StateCreator<State>\n-    : StateCreator<TState>\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 0
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "b0d42c15376ba255d4b1acd4ef4e98cb859aafb7",
      "url": "https://github.com/pmndrs/zustand/commit/b0d42c15376ba255d4b1acd4ef4e98cb859aafb7",
      "message": "Remove shallowEqual, change subscribe signature, add tests",
      "author": {
        "name": "JeremyHolcomb",
        "email": "jholcomb@kyriba.com",
        "date": "2019-06-28T01:53:37Z"
      },
      "diffObj": {
        "a/.size-snapshot.json": [
          {
            "-": "-  \"dist/esm/index.js\": {\n-    \"bundled\": 3308,\n-    \"minified\": 1146,\n-    \"gzipped\": 584,\n-    \"treeshaked\": {\n-      \"rollup\": {\n-        \"code\": 14,\n-        \"import_statements\": 14\n-      },\n-      \"webpack\": {\n-        \"code\": 1061\n-      }\n-    }\n-  },\n-  \"dist/cjs/index.js\": {\n-    \"bundled\": 3628,\n-    \"minified\": 1254,\n-    \"gzipped\": 597\n-  },\n",
            "+": ""
          },
          {
            "+": "+    \"bundled\": 2683,\n+    \"minified\": 982,\n+    \"gzipped\": 510,\n",
            "-": "-    \"bundled\": 3333,\n-    \"minified\": 1107,\n-    \"gzipped\": 579,\n"
          },
          {
            "+": "+    \"bundled\": 3364,\n+    \"minified\": 1201,\n+    \"gzipped\": 583\n",
            "-": "-    \"bundled\": 3754,\n-    \"minified\": 1277,\n-    \"gzipped\": 624\n"
          }
        ],
        "a/readme.md": [
          {
            "+": "+zustand defaults to strict-equality (old === new) to detect changes, this is efficient for atomic state picks.\n",
            "-": "-zustand defaults to strict-equality (old === new) to detect changes, this is efficient for atomic state picks. \n"
          },
          {
            "+": "+const unsub2 = api.subscribe(a => console.log(\"a changed\", a), {\n+  selector: state => state.a\n+})\n",
            "-": "-const unsub2 = api.subscribe(state => state.a, a => console.log(\"a changed\", a))\n"
          },
          {
            "+": "+  useEffect(() => api.subscribe(\n+    coords => (xy.current = coords),\n+    { selector: state => state[id] }\n+  ), [id])\n",
            "-": "-  useEffect(() => api.subscribe(state => state[id], coords => (xy.current = coords)), [id])\n"
          }
        ],
        "a/src/index.ts": [
          {
            "-": "-import shallowEqual from './shallowEqual'\n",
            "+": ""
          },
          {
            "+": "+export type StateListener<T> = (state: T) => void\n",
            "-": "-export type StateListener<T extends State, U = T> = (state: U) => void\n"
          },
          {
            "+": "+export type EqualityChecker<T> = (state: T, newState: any) => boolean\n+export interface SubscribeOptions<T extends State, U> {\n+  selector?: StateSelector<T, U>\n+  equalityFn?: EqualityChecker<U>\n+  currentSlice?: U\n+}\n+export type StateCreator<T extends State> = (\n+  set: SetState<T>,\n+  get: GetState<T>,\n+  api: StoreApi<T>\n+) => T\n",
            "-": ""
          },
          {
            "+": "+export type Subscribe<T extends State> = <U>(\n+  listener: StateListener<U | void>,\n+  options?: SubscribeOptions<T, U>\n+) => () => void\n+export type Destroy = () => void\n+export type UseStore<T extends State> = <U>(\n+  selector?: StateSelector<T, U>,\n+  equalityFn?: EqualityChecker<U>\n+) => U\n+export interface StoreApi<T extends State> {\n",
            "-": "-\n-export interface Subscribe<T> {\n-  (listener: StateListener<T>): () => void\n-  <U>(selector: StateSelector<T, U>, listener: StateListener<T, U>): () => void\n-  <U>(\n-    selector: StateSelector<T, U>,\n-    listener: StateListener<T, U>,\n-    equalityFn: Function | undefined\n-  ): () => void\n-}\n-export interface UseStore<T> {\n-  (): T\n-  <U>(selector: StateSelector<T, U>, equalityFn?: Function): U\n-}\n-export interface StoreApi<T> {\n-  getState: GetState<T>\n"
          },
          {
            "+": "+  getState: GetState<T>\n",
            "-": ""
          },
          {
            "+": "+  destroy: Destroy\n",
            "-": "-  destroy: () => void\n"
          },
          {
            "+": "+const forceUpdateReducer = (state: boolean) => !state\n+// For server-side rendering: https://github.com/react-spring/zustand/pull/34\n",
            "-": "-const reducer = <T>(state: any, newState: T) => newState\n"
          },
          {
            "+": "+  typeof window === 'undefined' ? useEffect : useLayoutEffect\n",
            "-": "-  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n"
          },
          {
            "+": "+  // Use TState for createState signature when available.\n+  // e.g. create<MyState>(set => ...\n",
            "-": ""
          },
          {
            "+": "+    ? StateCreator<State>\n+    : StateCreator<TState>\n",
            "-": "-    ? (set: any, get: any, api: any) => TState\n-    : (set: SetState<TState>, get: GetState<TState>, api: any) => TState\n"
          },
          {
            "+": "+  const listeners: Set<StateListener<void>> = new Set()\n",
            "-": "-  const listeners: Set<StateListener<TState>> = new Set()\n"
          },
          {
            "+": "+      listeners.forEach(listener => listener())\n",
            "-": "-      listeners.forEach(listener => listener(state))\n"
          },
          {
            "+": "+  const subscribe: Subscribe<TState> = <StateSlice>(\n+    listener: StateListener<StateSlice | void>,\n+    options: SubscribeOptions<TState, StateSlice> = {}\n",
            "-": "-  // Optional selector param goes first so we can infer its return type and use\n-  // it for listener\n-  const subscribe: Subscribe<TState> = <TStateSlice>(\n-    selectorOrListener:\n-      | StateListener<TState>\n-      | StateSelector<TState, TStateSlice>,\n-    listenerOrUndef?: StateListener<TState, TStateSlice>,\n-    equalityFn?: Function\n"
          },
          {
            "+": "+    if (!('currentSlice' in options)) {\n+      options.currentSlice = (options.selector || getState)(state)\n+    }\n+    const listenerFn = () => {\n+      // Destructure in the listener to get current values. We rely on this\n+      // because options is mutated in useStore.\n+      const { selector = getState, equalityFn = Object.is } = options\n+      // Selector or equality function could throw but we don't want to stop\n+      // the listener from being called.\n+      // https://github.com/react-spring/zustand/pull/37\n+      try {\n+        const newStateSlice = selector(state)\n+        if (!equalityFn(options.currentSlice as StateSlice, newStateSlice)) {\n+          listener((options.currentSlice = newStateSlice))\n+        }\n+      } catch (error) {\n+        console.error(error)\n+        listener()\n",
            "-": "-    let listener = selectorOrListener\n-    // Existance of second param means a selector was passed in\n-    if (listenerOrUndef) {\n-      // We know selector is not type StateListener so it must be StateSelector\n-      const selector = selectorOrListener as StateSelector<TState, TStateSlice>\n-      let stateSlice = selector(state)\n-      listener = () => {\n-        try {\n-          const sel = selector(state)\n-          const old = stateSlice\n-          // Update local state slice\n-          stateSlice = sel\n-          // Test for changes\n-          const equal = equalityFn ? equalityFn(old, sel) : old === sel\n-          // Call listeners if state has changed\n-          if (!equal) listenerOrUndef(stateSlice)\n-        } catch {}\n"
          },
          {
            "+": "+    listeners.add(listenerFn)\n+    return () => void listeners.delete(listenerFn)\n",
            "-": "-    listeners.add(listener)\n-    return () => void listeners.delete(listener)\n-  }\n-\n-  const destroy: StoreApi<TState>['destroy'] = () => {\n-    listeners.clear()\n"
          },
          {
            "+": "+  const destroy: Destroy = () => listeners.clear()\n+\n+  const useStore = <StateSlice>(\n+    selector: StateSelector<TState, StateSlice> = getState,\n+    equalityFn?: EqualityChecker<StateSlice>\n+  ): StateSlice => {\n+    const isInitial = useRef(true)\n+    const options = useRef(\n+      // isInitial prevents the selector from being called every render.\n+      isInitial.current && {\n+        selector,\n+        equalityFn,\n+        currentSlice: ((isInitial.current = false), selector(state)),\n+      }\n+    ).current as SubscribeOptions<TState, StateSlice>\n",
            "-": "-  const useStore: UseStore<TState> = <TStateSlice>(\n-    selector?: StateSelector<TState, TStateSlice>,\n-    equalityFn?: Function\n-  ): TState | TStateSlice => {\n-    const selRef = useRef(selector)\n-    let [stateSlice, dispatch] = useReducer(\n-      reducer,\n-      state,\n-      // Optional third argument but required to not be 'undefined'\n-      selector as StateSelector<TState, TStateSlice>\n-    )\n"
          },
          {
            "+": "+    // Update state slice if selector has changed.\n+    if (selector !== options.selector) options.currentSlice = selector(state)\n",
            "-": "-    // Need to manually get state slice if selector has changed with no deps or\n-    // deps exist and have changed\n-    if (selector && selector !== selRef.current) stateSlice = selector(state)\n"
          },
          {
            "+": "+    const forceUpdate = useReducer(forceUpdateReducer, false)[1]\n",
            "-": "-    // Update refs synchronously after view has been updated\n-    useIsoLayoutEffect(() => void (selRef.current = selector), [selector])\n"
          },
          {
            "-": "-    // Subscribe to the store\n",
            "+": ""
          },
          {
            "+": "+      options.selector = selector\n+      options.equalityFn = equalityFn\n+    }, [selector, equalityFn])\n+\n+    useIsoLayoutEffect(() => subscribe(forceUpdate, options), [])\n",
            "-": "-      return selector\n-        ? subscribe(\n-            // Truthy check because it might be possible to set selRef to\n-            // undefined and call this subscriber before it resubscribes\n-            () => (selRef.current ? selRef.current(state) : state),\n-            dispatch,\n-            equalityFn\n-          )\n-        : subscribe(dispatch)\n-      // Only resubscribe to the store when changing selector from function to\n-      // undefined or undefined to function\n-    }, [!selector])\n"
          },
          {
            "+": "+    return options.currentSlice as StateSlice\n",
            "-": "-    return stateSlice\n"
          },
          {
            "+": "+  const api = { setState, getState, subscribe, destroy }\n",
            "-": "-  let api = { destroy, getState, setState, subscribe }\n"
          },
          {
            "-": "-\n-export { shallowEqual }\n",
            "+": ""
          }
        ],
        "a/src/shallowEqual.ts": [
          {
            "-": "-export default function shallowEqual(objA: any, objB: any) {\n-  if (Object.is(objA, objB)) {\n-    return true\n-  }\n-  if (\n-    typeof objA !== 'object' ||\n-    objA === null ||\n-    typeof objB !== 'object' ||\n-    objB === null\n-  ) {\n-    return false\n-  }\n-  const keysA = Object.keys(objA)\n-  if (keysA.length !== Object.keys(objB).length) {\n-    return false\n-  }\n-  for (let i = 0; i < keysA.length; i++) {\n-    if (\n-      !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||\n-      !Object.is(objA[keysA[i]], objB[keysA[i]])\n-    ) {\n-      return false\n-    }\n-  }\n-  return true\n-}\n",
            "+": ""
          }
        ],
        "a/tests/test.tsx": [
          {
            "-": "-  shallowEqual,\n-  GetState,\n-  PartialState,\n-  SetState,\n",
            "+": ""
          },
          {
            "+": "+  PartialState,\n+  EqualityChecker,\n+  SubscribeOptions,\n+  StateCreator,\n+  SetState,\n+  GetState,\n",
            "-": "-  StoreApi,\n"
          },
          {
            "+": "+  Destroy,\n",
            "-": ""
          },
          {
            "+": "+  StoreApi,\n",
            "-": ""
          },
          {
            "+": "+\n+const consoleError = console.error\n+afterEach(() => {\n+  cleanup()\n+  console.error = consoleError\n+})\n",
            "-": "-afterEach(cleanup)\n"
          },
          {
            "+": "+  let params\n+  const result = create((...args) => {\n+    params = args\n+    return { value: null }\n+  })\n+  expect({ params, result }).toMatchInlineSnapshot(`\n+    Object {\n+      \"params\": Array [\n+        [Function],\n+        [Function],\n+        Object {\n+          \"destroy\": [Function],\n+          \"getState\": [Function],\n+          \"setState\": [Function],\n+          \"subscribe\": [Function],\n+        },\n+      ],\n+      \"result\": Array [\n+        [Function],\n+        Object {\n+          \"destroy\": [Function],\n+          \"getState\": [Function],\n+          \"setState\": [Function],\n+          \"subscribe\": [Function],\n+        },\n+      ],\n+    }\n",
            "-": "-  const result = create(() => ({ value: null }))\n-  expect(result).toMatchInlineSnapshot(`\n-    Array [\n-      [Function],\n-      Object {\n-        \"destroy\": [Function],\n-        \"getState\": [Function],\n-        \"setState\": [Function],\n-        \"subscribe\": [Function],\n-      },\n-    ]\n"
          },
          {
            "+": "+it('uses the store with no args', async () => {\n",
            "-": "-it('updates the store', async () => {\n"
          },
          {
            "+": "+    count: 0,\n",
            "-": "-    count: 1,\n"
          },
          {
            "-": "-    dec: () => set(state => ({ count: state.count - 1 })),\n",
            "+": ""
          },
          {
            "+": "+    const { count, inc } = useStore()\n+    React.useEffect(inc, [])\n",
            "-": "-    const { count, dec } = useStore()\n-    React.useEffect(dec, [])\n"
          },
          {
            "+": "+  await waitForElement(() => getByText('count: 1'))\n",
            "-": "-  await waitForElement(() => getByText('count: 0'))\n"
          },
          {
            "+": "+it('uses the store with selectors', async () => {\n",
            "-": "-it('can subscribe to part of the store', async () => {\n"
          },
          {
            "+": "+    count: 0,\n+    inc: () => set(state => ({ count: state.count + 1 })),\n+  }))\n+\n+  function Counter() {\n+    const count = useStore(s => s.count)\n+    const inc = useStore(s => s.inc)\n+    React.useEffect(inc, [])\n+    return <div>count: {count}</div>\n+  }\n+\n+  const { getByText } = render(<Counter />)\n+\n+  await waitForElement(() => getByText('count: 1'))\n+})\n+\n+it('uses the store with a selector and equality checker', async () => {\n+  const [useStore, { setState }] = create(() => ({ value: 0 }))\n+  let renderCount = 0\n+\n+  function Component() {\n+    // Prevent re-render if new value === 1.\n+    const value = useStore(s => s.value, (_, newValue) => newValue === 1)\n+    return (\n+      <div>\n+        renderCount: {++renderCount}, value: {value}\n+      </div>\n+    )\n+  }\n+\n+  const { getByText } = render(<Component />)\n+\n+  await waitForElement(() => getByText('renderCount: 1, value: 0'))\n+\n+  // This will not cause a re-render.\n+  act(() => setState({ value: 1 }))\n+  await waitForElement(() => getByText('renderCount: 1, value: 0'))\n+\n+  // This will cause a re-render.\n+  act(() => setState({ value: 2 }))\n+  await waitForElement(() => getByText('renderCount: 2, value: 2'))\n+})\n+\n+it('only re-renders if selected state has changed', async () => {\n+  const [useStore] = create(set => ({\n+    count: 0,\n",
            "-": "-    count: 1,\n"
          },
          {
            "-": "-    dec: () => set(state => ({ count: state.count - 1 })),\n",
            "+": ""
          },
          {
            "+": "+  let controlRenderCount = 0\n",
            "-": "-  let controlsRenderCount = 0\n"
          },
          {
            "+": "+    return <div>count: {count}</div>\n",
            "-": "-    return <div>{count}</div>\n"
          },
          {
            "+": "+  function Control() {\n",
            "-": "-  function Controls() {\n"
          },
          {
            "+": "+    controlRenderCount++\n",
            "-": "-    controlsRenderCount++\n"
          },
          {
            "+": "+      <Control />\n",
            "-": "-      <Controls />\n"
          },
          {
            "+": "+  await waitForElement(() => getByText('count: 1'))\n",
            "-": "-  await waitForElement(() => getByText('2'))\n"
          },
          {
            "+": "+  expect(controlRenderCount).toBe(1)\n+})\n+\n+it('can update the selector', async () => {\n+  const [useStore] = create(() => ({\n+    one: 'one',\n+    two: 'two',\n+  }))\n+\n+  function Component({ selector }) {\n+    return <div>{useStore(selector)}</div>\n+  }\n+\n+  const { getByText, rerender } = render(<Component selector={s => s.one} />)\n+  await waitForElement(() => getByText('one'))\n+\n+  rerender(<Component selector={s => s.two} />)\n+  await waitForElement(() => getByText('two'))\n+})\n+\n+it('can update the equality checker', async () => {\n+  const [useStore, { setState }] = create(() => ({ value: 0 }))\n+  const selector = s => s.value\n+\n+  let renderCount = 0\n+  function Component({ equalityFn }) {\n+    const value = useStore(selector, equalityFn)\n+    return (\n+      <div>\n+        renderCount: {++renderCount}, value: {value}\n+      </div>\n+    )\n+  }\n+\n+  // Set an equality checker that always returns false to always re-render.\n+  const { getByText, rerender } = render(<Component equalityFn={() => false} />)\n+\n+  // This will cause a re-render due to the equality checker.\n+  act(() => setState({ value: 0 }))\n+  await waitForElement(() => getByText('renderCount: 2, value: 0'))\n+\n+  // Set an equality checker that always returns true to never re-render.\n+  rerender(<Component equalityFn={() => true} />)\n+\n+  // This will NOT cause a re-render due to the equality checker.\n+  act(() => setState({ value: 1 }))\n+  await waitForElement(() => getByText('renderCount: 3, value: 0'))\n+})\n+\n+it('can call useStore with progressively more arguments', async () => {\n+  const [useStore, { setState }] = create(() => ({ value: 0 }))\n+\n+  let renderCount = 0\n+  function Component({ selector, equalityFn }: any) {\n+    const value = useStore(selector, equalityFn)\n+    return (\n+      <div>\n+        renderCount: {++renderCount}, value: {JSON.stringify(value)}\n+      </div>\n+    )\n+  }\n+\n+  // Render with no args.\n+  const { getByText, rerender } = render(<Component />)\n+  await waitForElement(() => getByText('renderCount: 1, value: {\"value\":0}'))\n+\n+  // Render with selector.\n+  rerender(<Component selector={s => s.value} />)\n+  await waitForElement(() => getByText('renderCount: 2, value: 0'))\n+\n+  // Render with selector and equality checker.\n+  rerender(\n+    <Component\n+      selector={s => s.value}\n+      equalityFn={(oldV, newV) => oldV > newV}\n+    />\n+  )\n+\n+  // Should not cause a re-render because new value is less than previous.\n+  act(() => setState({ value: -1 }))\n+  await waitForElement(() => getByText('renderCount: 3, value: 0'))\n+\n+  act(() => setState({ value: 1 }))\n+  await waitForElement(() => getByText('renderCount: 4, value: 1'))\n+})\n+\n+it('can throw an error in selector', async () => {\n+  console.error = jest.fn()\n+\n+  const initialState = { value: 'foo' }\n+  const [useStore, { setState }] = create(() => initialState)\n+  const selector = jest.fn(s => s.value.toUpperCase())\n+\n+  function Component() {\n+    useStore(selector)\n+    return <div>no error</div>\n+  }\n+\n+  const { getByText } = render(<Component />)\n+  await waitForElement(() => getByText('no error'))\n+\n+  delete initialState.value\n+  act(() => {\n+    setState({})\n+  })\n+  expect(selector.mock.results).toMatchInlineSnapshot(`\n+    Array [\n+      Object {\n+        \"type\": \"return\",\n+        \"value\": \"FOO\",\n+      },\n+      Object {\n+        \"type\": \"throw\",\n+        \"value\": [TypeError: Cannot read property 'toUpperCase' of undefined],\n+      },\n+    ]\n+  `)\n+})\n+\n+it('can throw an error in equality checker', async () => {\n+  console.error = jest.fn()\n+\n+  const initialState = { value: 'foo' }\n+  const [useStore, { setState }] = create(() => initialState)\n+  const equalityFn = jest.fn((a, b) => a.value.trim() === b.value.trim())\n+\n+  function Component() {\n+    useStore(undefined, equalityFn)\n+    return <div>no error</div>\n+  }\n+\n+  const { getByText } = render(<Component />)\n+  await waitForElement(() => getByText('no error'))\n+\n+  delete initialState.value\n+  act(() => {\n+    setState({})\n+  })\n+  expect(equalityFn.mock.results).toMatchInlineSnapshot(`\n+    Array [\n+      Object {\n+        \"type\": \"throw\",\n+        \"value\": [TypeError: Cannot read property 'trim' of undefined],\n+      },\n+    ]\n+  `)\n",
            "-": "-  expect(controlsRenderCount).toBe(1)\n"
          },
          {
            "+": "+  const [, { getState }] = create((_, get) => ({\n",
            "-": "-  const [, { getState }] = create((set, get) => ({\n"
          },
          {
            "+": "+  const [, { setState, getState }] = create(set => ({\n",
            "-": "-  const [, { getState, setState }] = create(set => ({\n"
          },
          {
            "+": "+  getState().setState1({ value: 2 })\n",
            "-": "-  getState().setState1({ ...getState(), value: 2 })\n"
          },
          {
            "+": "+  getState().setState2({ value: 3 })\n",
            "-": "-  getState().setState2({ ...getState(), value: 3 })\n"
          },
          {
            "+": "+  getState().setState1(s => ({ value: ++s.value }))\n+  expect(getState().value).toBe(4)\n+  getState().setState2(s => ({ value: ++s.value }))\n+  expect(getState().value).toBe(5)\n",
            "-": ""
          },
          {
            "+": "+  // Should be called if new state identity is different\n+  unsub = subscribe((newState: { value: number; other: string }) => {\n",
            "-": "-  // Should be called even if shallow equal when no selector used\n-  unsub = subscribe(newState => {\n"
          },
          {
            "+": "+  // Should not be called when state slice is the same\n+  unsub = subscribe(\n+    () => {\n+      throw new Error('subscriber called when new state is the same')\n+    },\n+    { selector: s => s.value }\n+  )\n+  setState({ other: 'b' })\n",
            "-": "-  // Should be called when state changes\n-  unsub = subscribe(newState => {\n-    expect(newState.value).toBe(2)\n-  })\n-  setState({ value: 2 })\n"
          },
          {
            "+": "+  // Should be called when state slice changes\n",
            "-": "-  // Should not be called with selector if shallow equal\n"
          },
          {
            "+": "+    (value: number) => {\n+      expect(value).toBe(initialState.value + 1)\n+    },\n+    { selector: s => s.value }\n",
            "-": "-    state => state.value,\n-    () => {\n-      throw new Error('subscriber called when shallow equal and selector used')\n-    }\n"
          },
          {
            "+": "+  setState({ value: initialState.value + 1 })\n",
            "-": "-  setState({ ...getState() })\n"
          },
          {
            "+": "+  // Should not be called when equality checker returns true\n",
            "-": "-  // Should not be called with selector if non-selected part changes\n"
          },
          {
            "-": "-    state => state.value,\n",
            "+": ""
          },
          {
            "+": "+      throw new Error('subscriber called when equality checker returned true')\n+    },\n+    { equalityFn: () => true }\n",
            "-": "-      throw new Error('subscriber called when non-selected part changed')\n-    }\n"
          },
          {
            "+": "+  setState({ value: initialState.value + 2 })\n",
            "-": "-  setState({ other: 'b' })\n"
          },
          {
            "+": "+  // Should be called when equality checker returns false\n",
            "-": "-  // Should be called with selector if selected part changes\n"
          },
          {
            "+": "+    (value: number) => {\n+      expect(value).toBe(initialState.value + 2)\n+    },\n+    { selector: s => s.value, equalityFn: () => false }\n+  )\n+  setState(getState())\n+  unsub()\n+\n+  // Can pass in initial state when subscribing\n+  unsub = subscribe(\n+    () => {\n+      throw new Error(\n+        'subscriber called when initial state is the same as new state'\n+      )\n+    },\n+    { selector: s => s.value, currentSlice: initialState.value + 3 }\n",
            "-": "-    state => state.value,\n-    newValue => {\n-      expect(newValue).toBe(3)\n-    }\n"
          },
          {
            "+": "+  setState({ value: initialState.value + 3 })\n",
            "-": "-  setState({ value: 3 })\n"
          },
          {
            "-": "-  // should this throw?\n",
            "+": ""
          },
          {
            "+": "+it('only calls selectors when necessary', async () => {\n+  const [useStore, { setState }] = create(() => ({ a: 0, b: 0 }))\n+  let inlineSelectorCallCount = 0\n+  let staticSelectorCallCount = 0\n",
            "-": "-it('can update the selector even when the store does not change', async () => {\n-  const [useStore] = create(() => ({\n-    one: 'one',\n-    two: 'two',\n-  }))\n-\n-  function Component({ selector }) {\n-    return <div>{useStore(selector)}</div>\n-  }\n-\n-  const { getByText, rerender } = render(<Component selector={s => s.one} />)\n-  await waitForElement(() => getByText('one'))\n-\n-  rerender(<Component selector={s => s.two} />)\n-  await waitForElement(() => getByText('two'))\n-})\n-\n-it('can pass optional dependencies to restrict selector calls', () => {\n-  const [useStore] = create(() => ({}))\n-  let selectorCallCount = 0\n"
          },
          {
            "+": "+  function staticSelector(s) {\n+    staticSelectorCallCount++\n+    return s.a\n",
            "-": "-  function Component({ deps }) {\n-    const sel = React.useCallback(() => {\n-      selectorCallCount++\n-    }, deps)\n-    useStore(sel, deps)\n-    return <div>{selectorCallCount}</div>\n"
          },
          {
            "-": "-  const { rerender } = render(<Component deps={[true]} />)\n-  expect(selectorCallCount).toBe(2)\n-\n-  rerender(<Component deps={[true]} />)\n-  expect(selectorCallCount).toBe(2)\n-\n-  rerender(<Component deps={[false]} />)\n-  expect(selectorCallCount).toBe(3)\n-})\n-\n-it('can update state without updating dependencies', async () => {\n-  const [useStore, { setState }] = create(() => ({ value: 0 }))\n-\n-  function Component() {\n-    const sel = React.useCallback(state => state, [])\n-    const { value } = useStore(sel)\n-    return <div>value: {value}</div>\n-  }\n-\n-  const { getByText } = render(<Component />)\n-  await waitForElement(() => getByText('value: 0'))\n-\n-  act(() => {\n-    setState({ value: 1 })\n-  })\n-  await waitForElement(() => getByText('value: 1'))\n-})\n-\n-it('can fetch multiple entries with shallow equality', async () => {\n-  const [useStore, { setState }] = create(() => ({ a: 0, b: 0, c: 0 }))\n-\n-  let renderCount = 0\n",
            "+": ""
          },
          {
            "+": "+    useStore(s => (inlineSelectorCallCount++, s.b))\n+    useStore(staticSelector)\n",
            "-": "-    renderCount++\n-    const { a, b } = useStore(\n-      state => ({ a: state.a, b: state.b }),\n-      shallowEqual\n-    )\n"
          },
          {
            "+": "+      <>\n+        <div>inline: {inlineSelectorCallCount}</div>\n+        <div>static: {staticSelectorCallCount}</div>\n+      </>\n",
            "-": "-      <div>\n-        a: {a} b: {b}\n-      </div>\n"
          },
          {
            "+": "+  const { rerender, getByText } = render(<Component />)\n+  await waitForElement(() => getByText('inline: 1'))\n+  await waitForElement(() => getByText('static: 1'))\n",
            "-": "-  const { getByText } = render(<Component />)\n-  await waitForElement(() => getByText('a: 0 b: 0'))\n-\n-  act(() => {\n-    setState({ a: 1, b: 1 })\n-  })\n-  await waitForElement(() => getByText('a: 1 b: 1'))\n"
          },
          {
            "+": "+  rerender(<Component />)\n+  await waitForElement(() => getByText('inline: 2'))\n+  await waitForElement(() => getByText('static: 1'))\n",
            "-": "-  act(() => {\n-    setState({ c: 1 })\n-  })\n"
          },
          {
            "+": "+  act(() => setState({ a: 1, b: 1 }))\n+  await waitForElement(() => getByText('inline: 4'))\n+  await waitForElement(() => getByText('static: 2'))\n",
            "-": "-  expect(renderCount).toBe(2)\n"
          },
          {
            "+": "+  const equlaityFn: EqualityChecker<ExampleState> = (state, newState) =>\n+    state !== newState\n",
            "-": ""
          },
          {
            "+": "+  const stateCreator: StateCreator<ExampleState> = (set, get) => ({\n+    num: 1,\n+    numGet: () => get().num,\n+    numGetState: () => get().num,\n+    numSet: v => {\n+      set({ num: v })\n+    },\n+    numSetState: v => {\n+      set({ num: v })\n+    },\n+  })\n+\n+  const subscribeOptions: SubscribeOptions<ExampleState, number> = {\n+    selector: s => s.num,\n+    equalityFn: (a, b) => a < b,\n+    currentSlice: 1,\n+  }\n+\n",
            "-": ""
          },
          {
            "+": "+    destroy: Destroy,\n+    equalityFn: EqualityChecker<ExampleState>,\n+    stateCreator: StateCreator<ExampleState>,\n+    useStore: UseStore<ExampleState>,\n+    subscribeOptions: SubscribeOptions<ExampleState, number>\n",
            "-": "-    useStore: UseStore<ExampleState>\n"
          },
          {
            "+": "+    storeApi.destroy,\n+    equlaityFn,\n+    stateCreator,\n+    useStore,\n+    subscribeOptions\n",
            "-": "-    useStore\n"
          },
          {
            "+": "+    create(devtools(redux(reducer, initialState)))\n",
            "-": "-    const [useStore, api] = create(devtools(redux(reducer, initialState)))\n"
          }
        ]
      },
      "numOfFiles": 5,
      "numOfChanges": 82,
      "qualityScore": 31
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "6be659c28b876dfd2848a9f0ce37ac93e67d42de",
      "url": "https://github.com/pmndrs/zustand/commit/6be659c28b876dfd2848a9f0ce37ac93e67d42de",
      "message": "Remove partial shallow equal check when no selector used",
      "author": {
        "name": "JeremyHolcomb",
        "email": "jholcomb@kyriba.com",
        "date": "2019-06-02T14:32:16Z"
      },
      "diffObj": {
        "a/.size-snapshot.json": [
          {
            "+": "+    \"bundled\": 3092,\n+    \"minified\": 1031,\n+    \"gzipped\": 538,\n",
            "-": "-    \"bundled\": 3293,\n-    \"minified\": 1084,\n-    \"gzipped\": 566,\n"
          },
          {
            "+": "+    \"bundled\": 3425,\n+    \"minified\": 1149,\n+    \"gzipped\": 556\n",
            "-": "-    \"bundled\": 3698,\n-    \"minified\": 1230,\n-    \"gzipped\": 590\n"
          }
        ],
        "a/src/index.ts": [
          {
            "+": "+    if (partialState !== state) {\n",
            "-": "-    // Shallow equality check only on the values in partialState\n-    // This is (hopefully) a performance optimization\n-    if (\n-      partialState !== state &&\n-      Object.entries(partialState).some(\n-        ([key, value]) => !Object.is(state[key], value)\n-      )\n-    ) {\n"
          }
        ],
        "a/tests/test.tsx": [
          {
            "+": "+  const initialState = { value: 1, other: 'a' }\n+  const [, { setState, getState, subscribe }] = create(() => initialState)\n",
            "-": "-  expect.assertions(3)\n"
          },
          {
            "+": "+  // Should not be called if new state identity is the same\n+  let unsub = subscribe(() => {\n+    throw new Error('subscriber called when new state identity is the same')\n+  })\n+  setState(initialState)\n+  unsub()\n",
            "-": "-  const [, { setState, subscribe }] = create(() => ({ value: 1 }))\n"
          },
          {
            "+": "+  // Should be called even if shallow equal when no selector used\n+  unsub = subscribe(newState => {\n+    expect(newState.value).toBe(1)\n",
            "-": "-  const unsub1 = subscribe(newState => {\n-    expect(newState.value).toBe(2)\n-    unsub1()\n"
          },
          {
            "+": "+  setState({ ...getState() })\n+  unsub()\n+\n+  // Should be called when state changes\n+  unsub = subscribe(newState => {\n",
            "-": "-  const unsub2 = subscribe(newState => {\n"
          },
          {
            "-": "-    unsub2()\n",
            "+": ""
          },
          {
            "+": "+  setState({ value: 2 })\n+  unsub()\n+\n+  // Should not be called with selector if shallow equal\n+  unsub = subscribe(\n",
            "-": "-  const unsub3 = subscribe(\n"
          },
          {
            "+": "+    () => {\n+      throw new Error('subscriber called when shallow equal and selector used')\n",
            "-": "-    newValue => {\n-      expect(newValue).toBe(2)\n-      unsub3()\n"
          },
          {
            "+": "+  setState({ ...getState() })\n+  unsub()\n",
            "-": ""
          },
          {
            "+": "+  // Should not be called with selector if non-selected part changes\n+  unsub = subscribe(\n+    state => state.value,\n+    () => {\n+      throw new Error('subscriber called when non-selected part changed')\n+    }\n+  )\n+  setState({ other: 'b' })\n+  unsub()\n+\n+  // Should be called with selector if selected part changes\n+  unsub = subscribe(\n+    state => state.value,\n+    newValue => {\n+      expect(newValue).toBe(3)\n+    }\n+  )\n+  setState({ value: 3 })\n+  unsub()\n",
            "-": "-  setState({ value: 1 })\n-  setState({ value: 2 })\n"
          }
        ]
      },
      "numOfFiles": 3,
      "numOfChanges": 12,
      "qualityScore": 3
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "a337a2a89311331ec91cdeda6c16957371180c91",
      "url": "https://github.com/pmndrs/zustand/commit/a337a2a89311331ec91cdeda6c16957371180c91",
      "message": "Remove return types as they are now resolved correctly",
      "author": {
        "name": "Luxizzle",
        "email": "hi@lux.moe",
        "date": "2019-05-29T17:51:17Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/14966486?v=4"
      },
      "diffObj": {
        "a/src/index.ts": [
          {
            "+": "+  return [useStore, api]\n",
            "-": "-  return [useStore, api] as [typeof useStore, typeof api]\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 0
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "79dc424881e29362a363251d73108d8328bffa57",
      "url": "https://github.com/pmndrs/zustand/commit/79dc424881e29362a363251d73108d8328bffa57",
      "message": "Remove set and get generics",
      "author": {
        "name": "Luxizzle",
        "email": "hi@lux.moe",
        "date": "2019-05-29T17:49:36Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/14966486?v=4"
      },
      "diffObj": {
        "a/src/index.ts": [
          {
            "+": "+export default function create<TState extends State>(\n+  createState: (set: SetState<State>, get: GetState<State>) => TState\n",
            "-": "-export default function create<\n-  TState extends State,\n-  TSetState extends SetState<TState> = SetState<TState>,\n-  TGetState extends GetState<TState> = GetState<TState>\n->(\n-  createState: (set: TSetState, get: TGetState) => TState\n"
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 1,
      "qualityScore": 0
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "d309de7bb0c132567c2be406dc8b3b28c7e775fd",
      "url": "https://github.com/pmndrs/zustand/commit/d309de7bb0c132567c2be406dc8b3b28c7e775fd",
      "message": "Remove unnecessary subscribe callback code",
      "author": {
        "name": "JeremyHolcomb",
        "email": "jholcomb@kyriba.com",
        "date": "2019-05-10T16:31:08Z"
      },
      "diffObj": {
        "a/src/index.ts": [
          {
            "+": "+    // Nothing stored in useState, just using to enable forcing an update\n",
            "-": "-    // Not storing state in react hooks, just using to enable forcing an update\n"
          },
          {
            "+": "+    // Always get latest slice because selector can change\n",
            "-": ""
          },
          {
            "+": "+        // Update component if latest state slice doesn't match\n+        if (!shallowEqual(refs.stateSlice, refs.selectState(state)))\n",
            "-": "-        // Get fresh selected state\n-        const selected = refs.selectState(state)\n-        if (!shallowEqual(refs.stateSlice, selected)) {\n-          // Refresh local slice\n-          refs.stateSlice = selected\n"
          },
          {
            "-": "-        }\n",
            "+": ""
          }
        ]
      },
      "numOfFiles": 1,
      "numOfChanges": 4,
      "qualityScore": 25
    },
    {
      "formatStyle": "simple-text-style",
      "type": "test",
      "sha": "0a88672c16107a7e6d0481d28275dbef97d8f86d",
      "url": "https://github.com/pmndrs/zustand/commit/0a88672c16107a7e6d0481d28275dbef97d8f86d",
      "message": "tests first draft, fix #5",
      "author": {
        "name": "Paul Henschel",
        "email": "drcmda@gmail.com",
        "date": "2019-04-13T20:35:23Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2223602?v=4"
      },
      "diffObj": {
        "a/.babelrc": [
          {
            "+": "+{\n+  \"presets\": [\n+    \"@babel/preset-env\",\n+    \"@babel/preset-react\",\n+    \"@babel/preset-typescript\"\n+  ],\n+  \"env\": {\n+    \"test\": {\n+      \"plugins\": [\"@babel/transform-modules-commonjs\"]\n+    }\n+  }\n+}\n",
            "-": ""
          }
        ],
        "a/package.json": [
          {
            "+": "+    \"test\": \"jest\",\n+    \"test:dev\": \"jest --watch --no-coverage\",\n+    \"test:coverage:watch\": \"jest --watch\"\n",
            "-": "-    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n"
          },
          {
            "+": "+  \"jest\": {\n+    \"testPathIgnorePatterns\": [\n+      \"/node_modules/\",\n+      \"jest\",\n+      \"legacy\"\n+    ],\n+    \"testRegex\": \"test.(js|ts|tsx)$\",\n+    \"coverageDirectory\": \"./coverage/\",\n+    \"collectCoverage\": true,\n+    \"coverageReporters\": [\n+      \"json\",\n+      \"html\",\n+      \"text\",\n+      \"text-summary\"\n+    ],\n+    \"collectCoverageFrom\": [\n+      \"src/**/*.js\",\n+      \"tests/**/*.js\"\n+    ],\n+    \"setupFilesAfterEnv\": [\n+      \"<rootDir>/setupTests.js\"\n+    ]\n+  },\n",
            "-": ""
          },
          {
            "+": "+    \"enzyme\": \"^3.9.0\",\n+    \"enzyme-adapter-react-16\": \"^1.12.1\",\n",
            "-": ""
          },
          {
            "+": "+    \"jest\": \"^24.7.1\",\n",
            "-": ""
          },
          {
            "+": "+    \"react\": \"^16.8.6\",\n+    \"react-dom\": \"^16.8.6\",\n+    \"react-testing-library\": \"^6.1.2\",\n",
            "-": ""
          }
        ],
        "a/rollup.config.js": [
          {
            "+": "+export default [...createConfig('src/index', 'index')]\n",
            "-": "-export default [...createConfig('index', 'index')]\n"
          }
        ],
        "a/setupTests.js": [
          {
            "+": "+const Enzyme = require('enzyme')\n+const EnzymeAdapter = require('enzyme-adapter-react-16')\n+\n+// Setup enzyme's react adapter\n+Enzyme.configure({ adapter: new EnzymeAdapter() })\n",
            "-": ""
          }
        ],
        "a/index.js": [
          {
            "+": "+          if (sliceRef.current !== selected && selected === Object(selected)) {\n",
            "-": "-          if (\n-            sliceRef.current !== selected &&\n-            typeof selected === 'object' &&\n-            !Array.isArray(selected)\n-          ) {\n"
          }
        ],
        "a/tests/test.js": [
          {
            "+": "+import React, { useEffect } from 'react'\n+import { cleanup, render } from 'react-testing-library'\n+import create from '../src/index'\n+\n+afterEach(cleanup)\n+\n+it('creates an HTML element from a tag name', () => {\n+  //expect.assertions(2)\n+\n+  const [useStore] = create(set => ({\n+    count: 1,\n+    inc: () => set(state => ({ count: state.count + 1 })),\n+    dec: () => set(state => ({ count: state.count - 1 })),\n+  }))\n+\n+  function Counter() {\n+    const { count, inc, dec } = useStore()\n+    useEffect(() => {\n+      dec()\n+    }, [])\n+\n+    console.log('r', count)\n+\n+    expect(count).toBe(1)\n+    return count\n+  }\n+\n+  const { container } = render(<Counter />)\n+  //expect(container).toMatchSnapshot()\n+})\n",
            "-": ""
          }
        ],
        "a/yarn.lock": [
          {
            "+": "+\"@babel/core@^7.1.0\":\n+  version \"7.4.3\"\n+  resolved \"https://registry.yarnpkg.com/@babel/core/-/core-7.4.3.tgz#198d6d3af4567be3989550d97e068de94503074f\"\n+  integrity sha512-oDpASqKFlbspQfzAE7yaeTmdljSH2ADIvBlb0RwbStltTuWa0+7CCI1fYVINNv9saHPa1W7oaKeuNuKj+RQCvA==\n+  dependencies:\n+    \"@babel/code-frame\" \"^7.0.0\"\n+    \"@babel/generator\" \"^7.4.0\"\n+    \"@babel/helpers\" \"^7.4.3\"\n+    \"@babel/parser\" \"^7.4.3\"\n+    \"@babel/template\" \"^7.4.0\"\n+    \"@babel/traverse\" \"^7.4.3\"\n+    \"@babel/types\" \"^7.4.0\"\n+    convert-source-map \"^1.1.0\"\n+    debug \"^4.1.0\"\n+    json5 \"^2.1.0\"\n+    lodash \"^4.17.11\"\n+    resolve \"^1.3.2\"\n+    semver \"^5.4.1\"\n+    source-map \"^0.5.0\"\n+\n+\"@babel/generator@^7.0.0\", \"@babel/generator@^7.3.4\", \"@babel/generator@^7.4.0\":\n",
            "-": "-\"@babel/generator@^7.3.4\", \"@babel/generator@^7.4.0\":\n"
          },
          {
            "+": "+\"@babel/helpers@^7.2.0\", \"@babel/helpers@^7.4.3\":\n",
            "-": "-\"@babel/helpers@^7.2.0\":\n"
          },
          {
            "+": "+\"@babel/parser@^7.0.0\", \"@babel/parser@^7.1.0\", \"@babel/parser@^7.3.4\", \"@babel/parser@^7.4.0\", \"@babel/parser@^7.4.3\":\n",
            "-": "-\"@babel/parser@^7.3.4\", \"@babel/parser@^7.4.0\", \"@babel/parser@^7.4.3\":\n"
          },
          {
            "+": "+\"@babel/plugin-syntax-object-rest-spread@^7.0.0\", \"@babel/plugin-syntax-object-rest-spread@^7.2.0\":\n",
            "-": "-\"@babel/plugin-syntax-object-rest-spread@^7.2.0\":\n"
          },
          {
            "+": "+\"@babel/runtime@^7.3.4\", \"@babel/runtime@^7.4.2\":\n",
            "-": "-\"@babel/runtime@^7.4.3\":\n"
          },
          {
            "+": "+\"@babel/template@^7.0.0\", \"@babel/template@^7.1.0\", \"@babel/template@^7.2.2\", \"@babel/template@^7.4.0\":\n",
            "-": "-\"@babel/template@^7.1.0\", \"@babel/template@^7.2.2\", \"@babel/template@^7.4.0\":\n"
          },
          {
            "+": "+\"@babel/traverse@^7.0.0\", \"@babel/traverse@^7.1.0\", \"@babel/traverse@^7.3.4\", \"@babel/traverse@^7.4.0\", \"@babel/traverse@^7.4.3\":\n",
            "-": "-\"@babel/traverse@^7.1.0\", \"@babel/traverse@^7.3.4\", \"@babel/traverse@^7.4.0\", \"@babel/traverse@^7.4.3\":\n"
          },
          {
            "+": "+\"@cnakazawa/watch@^1.0.3\":\n+  version \"1.0.3\"\n+  resolved \"https://registry.yarnpkg.com/@cnakazawa/watch/-/watch-1.0.3.tgz#099139eaec7ebf07a27c1786a3ff64f39464d2ef\"\n+  integrity sha512-r5160ogAvGyHsal38Kux7YYtodEKOj89RGb28ht1jh3SJb08VwRwAKKJL0bGb04Zd/3r9FL3BFIc3bBidYffCA==\n+  dependencies:\n+    exec-sh \"^0.3.2\"\n+    minimist \"^1.2.0\"\n+\n+\"@jest/console@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/console/-/console-24.7.1.tgz#32a9e42535a97aedfe037e725bd67e954b459545\"\n+  integrity sha512-iNhtIy2M8bXlAOULWVTUxmnelTLFneTNEkHCgPmgd+zNwy9zVddJ6oS5rZ9iwoscNdT5mMwUd0C51v/fSlzItg==\n+  dependencies:\n+    \"@jest/source-map\" \"^24.3.0\"\n+    chalk \"^2.0.1\"\n+    slash \"^2.0.0\"\n+\n+\"@jest/core@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/core/-/core-24.7.1.tgz#6707f50db238d0c5988860680e2e414df0032024\"\n+  integrity sha512-ivlZ8HX/FOASfHcb5DJpSPFps8ydfUYzLZfgFFqjkLijYysnIEOieg72YRhO4ZUB32xu40hsSMmaw+IGYeKONA==\n+  dependencies:\n+    \"@jest/console\" \"^24.7.1\"\n+    \"@jest/reporters\" \"^24.7.1\"\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/transform\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    ansi-escapes \"^3.0.0\"\n+    chalk \"^2.0.1\"\n+    exit \"^0.1.2\"\n+    graceful-fs \"^4.1.15\"\n+    jest-changed-files \"^24.7.0\"\n+    jest-config \"^24.7.1\"\n+    jest-haste-map \"^24.7.1\"\n+    jest-message-util \"^24.7.1\"\n+    jest-regex-util \"^24.3.0\"\n+    jest-resolve-dependencies \"^24.7.1\"\n+    jest-runner \"^24.7.1\"\n+    jest-runtime \"^24.7.1\"\n+    jest-snapshot \"^24.7.1\"\n+    jest-util \"^24.7.1\"\n+    jest-validate \"^24.7.0\"\n+    jest-watcher \"^24.7.1\"\n+    micromatch \"^3.1.10\"\n+    p-each-series \"^1.0.0\"\n+    pirates \"^4.0.1\"\n+    realpath-native \"^1.1.0\"\n+    rimraf \"^2.5.4\"\n+    strip-ansi \"^5.0.0\"\n+\n+\"@jest/environment@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/environment/-/environment-24.7.1.tgz#9b9196bc737561f67ac07817d4c5ece772e33135\"\n+  integrity sha512-wmcTTYc4/KqA+U5h1zQd5FXXynfa7VGP2NfF+c6QeGJ7c+2nStgh65RQWNX62SC716dTtqheTRrZl0j+54oGHw==\n+  dependencies:\n+    \"@jest/fake-timers\" \"^24.7.1\"\n+    \"@jest/transform\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    jest-mock \"^24.7.0\"\n+\n+\"@jest/fake-timers@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/fake-timers/-/fake-timers-24.7.1.tgz#56e5d09bdec09ee81050eaff2794b26c71d19db2\"\n+  integrity sha512-4vSQJDKfR2jScOe12L9282uiwuwQv9Lk7mgrCSZHA9evB9efB/qx8i0KJxsAKtp8fgJYBJdYY7ZU6u3F4/pyjA==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    jest-message-util \"^24.7.1\"\n+    jest-mock \"^24.7.0\"\n+\n+\"@jest/reporters@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/reporters/-/reporters-24.7.1.tgz#38ac0b096cd691bbbe3051ddc25988d42e37773a\"\n+  integrity sha512-bO+WYNwHLNhrjB9EbPL4kX/mCCG4ZhhfWmO3m4FSpbgr7N83MFejayz30kKjgqr7smLyeaRFCBQMbXpUgnhAJw==\n+  dependencies:\n+    \"@jest/environment\" \"^24.7.1\"\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/transform\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    chalk \"^2.0.1\"\n+    exit \"^0.1.2\"\n+    glob \"^7.1.2\"\n+    istanbul-api \"^2.1.1\"\n+    istanbul-lib-coverage \"^2.0.2\"\n+    istanbul-lib-instrument \"^3.0.1\"\n+    istanbul-lib-source-maps \"^3.0.1\"\n+    jest-haste-map \"^24.7.1\"\n+    jest-resolve \"^24.7.1\"\n+    jest-runtime \"^24.7.1\"\n+    jest-util \"^24.7.1\"\n+    jest-worker \"^24.6.0\"\n+    node-notifier \"^5.2.1\"\n+    slash \"^2.0.0\"\n+    source-map \"^0.6.0\"\n+    string-length \"^2.0.0\"\n+\n+\"@jest/source-map@^24.3.0\":\n+  version \"24.3.0\"\n+  resolved \"https://registry.yarnpkg.com/@jest/source-map/-/source-map-24.3.0.tgz#563be3aa4d224caf65ff77edc95cd1ca4da67f28\"\n+  integrity sha512-zALZt1t2ou8le/crCeeiRYzvdnTzaIlpOWaet45lNSqNJUnXbppUUFR4ZUAlzgDmKee4Q5P/tKXypI1RiHwgag==\n+  dependencies:\n+    callsites \"^3.0.0\"\n+    graceful-fs \"^4.1.15\"\n+    source-map \"^0.6.0\"\n+\n+\"@jest/test-result@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/test-result/-/test-result-24.7.1.tgz#19eacdb29a114300aed24db651e5d975f08b6bbe\"\n+  integrity sha512-3U7wITxstdEc2HMfBX7Yx3JZgiNBubwDqQMh+BXmZXHa3G13YWF3p6cK+5g0hGkN3iufg/vGPl3hLxQXD74Npg==\n+  dependencies:\n+    \"@jest/console\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    \"@types/istanbul-lib-coverage\" \"^2.0.0\"\n+\n+\"@jest/test-sequencer@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/test-sequencer/-/test-sequencer-24.7.1.tgz#9c18e428e1ad945fa74f6233a9d35745ca0e63e0\"\n+  integrity sha512-84HQkCpVZI/G1zq53gHJvSmhUer4aMYp9tTaffW28Ih5OxfCg8hGr3nTSbL1OhVDRrFZwvF+/R9gY6JRkDUpUA==\n+  dependencies:\n+    \"@jest/test-result\" \"^24.7.1\"\n+    jest-haste-map \"^24.7.1\"\n+    jest-runner \"^24.7.1\"\n+    jest-runtime \"^24.7.1\"\n+\n+\"@jest/transform@^24.7.1\":\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/@jest/transform/-/transform-24.7.1.tgz#872318f125bcfab2de11f53b465ab1aa780789c2\"\n+  integrity sha512-EsOUqP9ULuJ66IkZQhI5LufCHlTbi7hrcllRMUEV/tOgqBVQi93+9qEvkX0n8mYpVXQ8VjwmICeRgg58mrtIEw==\n+  dependencies:\n+    \"@babel/core\" \"^7.1.0\"\n+    \"@jest/types\" \"^24.7.0\"\n+    babel-plugin-istanbul \"^5.1.0\"\n+    chalk \"^2.0.1\"\n+    convert-source-map \"^1.4.0\"\n+    fast-json-stable-stringify \"^2.0.0\"\n+    graceful-fs \"^4.1.15\"\n+    jest-haste-map \"^24.7.1\"\n+    jest-regex-util \"^24.3.0\"\n+    jest-util \"^24.7.1\"\n+    micromatch \"^3.1.10\"\n+    realpath-native \"^1.1.0\"\n+    slash \"^2.0.0\"\n+    source-map \"^0.6.1\"\n+    write-file-atomic \"2.4.1\"\n+\n+\"@jest/types@^24.7.0\":\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/@jest/types/-/types-24.7.0.tgz#c4ec8d1828cdf23234d9b4ee31f5482a3f04f48b\"\n+  integrity sha512-ipJUa2rFWiKoBqMKP63Myb6h9+iT3FHRTF2M8OR6irxWzItisa8i4dcSg14IbvmXUnBlHBlUQPYUHWyX3UPpYA==\n+  dependencies:\n+    \"@types/istanbul-lib-coverage\" \"^2.0.0\"\n+    \"@types/yargs\" \"^12.0.9\"\n+\n",
            "-": ""
          },
          {
            "+": "+\"@sheerun/mutationobserver-shim@^0.3.2\":\n+  version \"0.3.2\"\n+  resolved \"https://registry.yarnpkg.com/@sheerun/mutationobserver-shim/-/mutationobserver-shim-0.3.2.tgz#8013f2af54a2b7d735f71560ff360d3a8176a87b\"\n+  integrity sha512-vTCdPp/T/Q3oSqwHmZ5Kpa9oI7iLtGl3RQaA/NyLHikvcrPxACkkKVr/XzkSPJWXHRhKGzVvb0urJsbMlRxi1Q==\n+\n+\"@types/babel__core@^7.1.0\":\n+  version \"7.1.1\"\n+  resolved \"https://registry.yarnpkg.com/@types/babel__core/-/babel__core-7.1.1.tgz#ce9a9e5d92b7031421e1d0d74ae59f572ba48be6\"\n+  integrity sha512-+hjBtgcFPYyCTo0A15+nxrCVJL7aC6Acg87TXd5OW3QhHswdrOLoles+ldL2Uk8q++7yIfl4tURtztccdeeyOw==\n+  dependencies:\n+    \"@babel/parser\" \"^7.1.0\"\n+    \"@babel/types\" \"^7.0.0\"\n+    \"@types/babel__generator\" \"*\"\n+    \"@types/babel__template\" \"*\"\n+    \"@types/babel__traverse\" \"*\"\n+\n+\"@types/babel__generator@*\":\n+  version \"7.0.2\"\n+  resolved \"https://registry.yarnpkg.com/@types/babel__generator/-/babel__generator-7.0.2.tgz#d2112a6b21fad600d7674274293c85dce0cb47fc\"\n+  integrity sha512-NHcOfab3Zw4q5sEE2COkpfXjoE7o+PmqD9DQW4koUT3roNxwziUdXGnRndMat/LJNUtePwn1TlP4do3uoe3KZQ==\n+  dependencies:\n+    \"@babel/types\" \"^7.0.0\"\n+\n+\"@types/babel__template@*\":\n+  version \"7.0.2\"\n+  resolved \"https://registry.yarnpkg.com/@types/babel__template/-/babel__template-7.0.2.tgz#4ff63d6b52eddac1de7b975a5223ed32ecea9307\"\n+  integrity sha512-/K6zCpeW7Imzgab2bLkLEbz0+1JlFSrUMdw7KoIIu+IUdu51GWaBZpd3y1VXGVXzynvGa4DaIaxNZHiON3GXUg==\n+  dependencies:\n+    \"@babel/parser\" \"^7.1.0\"\n+    \"@babel/types\" \"^7.0.0\"\n+\n+\"@types/babel__traverse@*\", \"@types/babel__traverse@^7.0.6\":\n+  version \"7.0.6\"\n+  resolved \"https://registry.yarnpkg.com/@types/babel__traverse/-/babel__traverse-7.0.6.tgz#328dd1a8fc4cfe3c8458be9477b219ea158fd7b2\"\n+  integrity sha512-XYVgHF2sQ0YblLRMLNPB3CkFMewzFmlDsH/TneZFHUXDlABQgh88uOxuez7ZcXxayLFrqLwtDH1t+FmlFwNZxw==\n+  dependencies:\n+    \"@babel/types\" \"^7.3.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+\"@types/istanbul-lib-coverage@^2.0.0\":\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.0.tgz#1eb8c033e98cf4e1a4cedcaf8bcafe8cb7591e85\"\n+  integrity sha512-eAtOAFZefEnfJiRFQBGw1eYqa5GTLCZ1y86N0XSI/D6EB+E8z6VPV/UL7Gi5UEclFqoQk+6NRqEDsfmDLXn8sg==\n+\n",
            "-": ""
          },
          {
            "+": "+\"@types/stack-utils@^1.0.1\":\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/@types/stack-utils/-/stack-utils-1.0.1.tgz#0a851d3bd96498fa25c33ab7278ed3bd65f06c3e\"\n+  integrity sha512-l42BggppR6zLmpfU6fq9HEa2oGPEI8yrSPL3GITjfRInppYFahObbIQOQK3UGxEnyQpltZLaPe75046NOZQikw==\n+\n+\"@types/yargs@^12.0.2\", \"@types/yargs@^12.0.9\":\n+  version \"12.0.12\"\n+  resolved \"https://registry.yarnpkg.com/@types/yargs/-/yargs-12.0.12.tgz#45dd1d0638e8c8f153e87d296907659296873916\"\n+  integrity sha512-SOhuU4wNBxhhTHxYaiG5NY4HBhDIDnJF60GU+2LqHAdKKer86//e4yg69aENCtQ04n0ovz+tq2YPME5t5yp4pw==\n+\n",
            "-": ""
          },
          {
            "+": "+abab@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/abab/-/abab-2.0.0.tgz#aba0ab4c5eee2d4c79d3487d85450fb2376ebb0f\"\n+  integrity sha512-sY5AXXVZv4Y1VACTtR11UJCPHHudgY5i26Qj5TypE6DKlIApbwb5uqhXcJ5UUGbvZNRh7EeIoW+LrJumBsKp7w==\n+\n",
            "-": ""
          },
          {
            "+": "+acorn-globals@^4.1.0:\n+  version \"4.3.0\"\n+  resolved \"https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-4.3.0.tgz#e3b6f8da3c1552a95ae627571f7dd6923bb54103\"\n+  integrity sha512-hMtHj3s5RnuhvHPowpBYvJVj3rAar82JiDQHvGs1zO0l10ocX/xEdBShNHTJaboucJUsScghp74pH3s7EnHHQw==\n+  dependencies:\n+    acorn \"^6.0.1\"\n+    acorn-walk \"^6.0.1\"\n+\n+acorn-walk@^6.0.1:\n+  version \"6.1.1\"\n+  resolved \"https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-6.1.1.tgz#d363b66f5fac5f018ff9c3a1e7b6f8e310cc3913\"\n+  integrity sha512-OtUw6JUTgxA2QoqqmrmQ7F2NYqiBPi/L2jqHyFtllhOUvXYQXf0Z1CYUinIfyT4bTCGmrA7gX9FvHA81uzCoVw==\n+\n+acorn@^5.5.3:\n+  version \"5.7.3\"\n+  resolved \"https://registry.yarnpkg.com/acorn/-/acorn-5.7.3.tgz#67aa231bf8812974b85235a96771eb6bd07ea279\"\n+  integrity sha512-T/zvzYRfbVojPWahDsE5evJdHb3oJoQfFbsrKM7w5Zcs++Tr257tia3BmMP8XYVjp1S9RZXQMh7gao96BlqZOw==\n+\n+acorn@^6.0.1, acorn@^6.0.5, acorn@^6.1.1:\n",
            "-": "-acorn@^6.0.5, acorn@^6.1.1:\n"
          },
          {
            "+": "+airbnb-prop-types@^2.12.0:\n+  version \"2.13.2\"\n+  resolved \"https://registry.yarnpkg.com/airbnb-prop-types/-/airbnb-prop-types-2.13.2.tgz#43147a5062dd2a4a5600e748a47b64004cc5f7fc\"\n+  integrity sha512-2FN6DlHr6JCSxPPi25EnqGaXC4OC3/B3k1lCd6MMYrZ51/Gf/1qDfaR+JElzWa+Tl7cY2aYOlsYJGFeQyVHIeQ==\n+  dependencies:\n+    array.prototype.find \"^2.0.4\"\n+    function.prototype.name \"^1.1.0\"\n+    has \"^1.0.3\"\n+    is-regex \"^1.0.4\"\n+    object-is \"^1.0.1\"\n+    object.assign \"^4.1.0\"\n+    object.entries \"^1.1.0\"\n+    prop-types \"^15.7.2\"\n+    prop-types-exact \"^1.2.0\"\n+    react-is \"^16.8.6\"\n+\n",
            "-": ""
          },
          {
            "+": "+ajv@^6.1.0, ajv@^6.5.5:\n",
            "-": "-ajv@^6.1.0:\n"
          },
          {
            "+": "+ansi-regex@^4.0.0, ansi-regex@^4.1.0:\n+  version \"4.1.0\"\n+  resolved \"https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-4.1.0.tgz#8b9f8f08cf1acb843756a839ca8c7e3168c51997\"\n+  integrity sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg==\n+\n",
            "-": ""
          },
          {
            "+": "+append-transform@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/append-transform/-/append-transform-1.0.0.tgz#046a52ae582a228bd72f58acfbe2967c678759ab\"\n+  integrity sha512-P009oYkeHyU742iSZJzZZywj4QRJdnTWffaKuJQLablCZ1uz6/cW4yaRgcDaoQ+uwOxxnt0gRUcwfsNP2ri0gw==\n+  dependencies:\n+    default-require-extensions \"^2.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+array-equal@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/array-equal/-/array-equal-1.0.0.tgz#8c2a5ef2472fd9ea742b04c77a75093ba2757c93\"\n+  integrity sha1-jCpe8kcv2ep0KwTHenUJO6J1fJM=\n+\n+array-filter@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/array-filter/-/array-filter-1.0.0.tgz#baf79e62e6ef4c2a4c0b831232daffec251f9d83\"\n+  integrity sha1-uveeYubvTCpMC4MSMtr/7CUfnYM=\n+\n",
            "-": ""
          },
          {
            "+": "+array.prototype.find@^2.0.4:\n+  version \"2.0.4\"\n+  resolved \"https://registry.yarnpkg.com/array.prototype.find/-/array.prototype.find-2.0.4.tgz#556a5c5362c08648323ddaeb9de9d14bc1864c90\"\n+  integrity sha1-VWpcU2LAhkgyPdrrnenRS8GGTJA=\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    es-abstract \"^1.7.0\"\n+\n+array.prototype.flat@^1.2.1:\n+  version \"1.2.1\"\n+  resolved \"https://registry.yarnpkg.com/array.prototype.flat/-/array.prototype.flat-1.2.1.tgz#812db8f02cad24d3fab65dd67eabe3b8903494a4\"\n+  integrity sha512-rVqIs330nLJvfC7JqYvEWwqVr5QjYF1ib02i3YJtR/fICO6527Tjpc/e4Mvmxh3GIePPreRXMdaGyC99YphWEw==\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    es-abstract \"^1.10.0\"\n+    function-bind \"^1.1.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+asn1@~0.2.3:\n+  version \"0.2.4\"\n+  resolved \"https://registry.yarnpkg.com/asn1/-/asn1-0.2.4.tgz#8d2475dfab553bb33e77b54e59e880bb8ce23136\"\n+  integrity sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==\n+  dependencies:\n+    safer-buffer \"~2.1.0\"\n+\n+assert-plus@1.0.0, assert-plus@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/assert-plus/-/assert-plus-1.0.0.tgz#f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525\"\n+  integrity sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=\n+\n",
            "-": ""
          },
          {
            "+": "+astral-regex@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/astral-regex/-/astral-regex-1.0.0.tgz#6c8c3fb827dd43ee3918f27b82782ab7658a6fd9\"\n+  integrity sha512-+Ryf6g3BKoRc7jfp7ad8tM4TtMiaWvbF/1/sQcZPkkS7ag3D5nMBCe2UfOTONtAkaG0tO0ij3C5Lwmf1EiyjHg==\n+\n",
            "-": ""
          },
          {
            "+": "+async-limiter@~1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/async-limiter/-/async-limiter-1.0.0.tgz#78faed8c3d074ab81f22b4e985d79e8738f720f8\"\n+  integrity sha512-jp/uFnooOiO+L211eZOoSyzpOITMXx1rBITauYykG3BRYPu8h0UcxsPNB04RR5vo4Tyz3+ay17tR6JVf9qzYWg==\n+\n+async@^2.6.1:\n+  version \"2.6.2\"\n+  resolved \"https://registry.yarnpkg.com/async/-/async-2.6.2.tgz#18330ea7e6e313887f5d2f2a904bac6fe4dd5381\"\n+  integrity sha512-H1qVYh1MYhEEFLsP97cVKqCGo7KfCyTt6uEWqsTBr9SO84oK9Uwbyd/yCW+6rKJLHksBNUVWZDAjfS+Ccx0Bbg==\n+  dependencies:\n+    lodash \"^4.17.11\"\n+\n+asynckit@^0.4.0:\n+  version \"0.4.0\"\n+  resolved \"https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79\"\n+  integrity sha1-x57Zf380y48robyXkLzDZkdLS3k=\n+\n",
            "-": ""
          },
          {
            "+": "+aws-sign2@~0.7.0:\n+  version \"0.7.0\"\n+  resolved \"https://registry.yarnpkg.com/aws-sign2/-/aws-sign2-0.7.0.tgz#b46e890934a9591f2d2f6f86d7e6a9f1b3fe76a8\"\n+  integrity sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=\n+\n+aws4@^1.8.0:\n+  version \"1.8.0\"\n+  resolved \"https://registry.yarnpkg.com/aws4/-/aws4-1.8.0.tgz#f0e003d9ca9e7f59c7a508945d7b2ef9a04a542f\"\n+  integrity sha512-ReZxvNHIOv88FlT7rxcXIIC0fPt4KZqZbOlivyWtXLt8ESx84zd3kMC6iK5jVeS2qt+g7ftS7ye4fi06X5rtRQ==\n+\n+babel-jest@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/babel-jest/-/babel-jest-24.7.1.tgz#73902c9ff15a7dfbdc9994b0b17fcefd96042178\"\n+  integrity sha512-GPnLqfk8Mtt0i4OemjWkChi73A3ALs4w2/QbG64uAj8b5mmwzxc7jbJVRZt8NJkxi6FopVHog9S3xX6UJKb2qg==\n+  dependencies:\n+    \"@jest/transform\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    \"@types/babel__core\" \"^7.1.0\"\n+    babel-plugin-istanbul \"^5.1.0\"\n+    babel-preset-jest \"^24.6.0\"\n+    chalk \"^2.4.2\"\n+    slash \"^2.0.0\"\n+\n+babel-plugin-istanbul@^5.1.0:\n+  version \"5.1.1\"\n+  resolved \"https://registry.yarnpkg.com/babel-plugin-istanbul/-/babel-plugin-istanbul-5.1.1.tgz#7981590f1956d75d67630ba46f0c22493588c893\"\n+  integrity sha512-RNNVv2lsHAXJQsEJ5jonQwrJVWK8AcZpG1oxhnjCUaAjL7xahYLANhPUZbzEQHjKy1NMYUwn+0NPKQc8iSY4xQ==\n+  dependencies:\n+    find-up \"^3.0.0\"\n+    istanbul-lib-instrument \"^3.0.0\"\n+    test-exclude \"^5.0.0\"\n+\n+babel-plugin-jest-hoist@^24.6.0:\n+  version \"24.6.0\"\n+  resolved \"https://registry.yarnpkg.com/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-24.6.0.tgz#f7f7f7ad150ee96d7a5e8e2c5da8319579e78019\"\n+  integrity sha512-3pKNH6hMt9SbOv0F3WVmy5CWQ4uogS3k0GY5XLyQHJ9EGpAT9XWkFd2ZiXXtkwFHdAHa5j7w7kfxSP5lAIwu7w==\n+  dependencies:\n+    \"@types/babel__traverse\" \"^7.0.6\"\n+\n+babel-preset-jest@^24.6.0:\n+  version \"24.6.0\"\n+  resolved \"https://registry.yarnpkg.com/babel-preset-jest/-/babel-preset-jest-24.6.0.tgz#66f06136eefce87797539c0d63f1769cc3915984\"\n+  integrity sha512-pdZqLEdmy1ZK5kyRUfvBb2IfTPb2BUvIJczlPspS8fWmBQslNNDBqVfh7BW5leOVJMDZKzjD8XEyABTk6gQ5yw==\n+  dependencies:\n+    \"@babel/plugin-syntax-object-rest-spread\" \"^7.0.0\"\n+    babel-plugin-jest-hoist \"^24.6.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+bcrypt-pbkdf@^1.0.0:\n+  version \"1.0.2\"\n+  resolved \"https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz#a4301d389b6a43f9b67ff3ca11a3f6637e360e9e\"\n+  integrity sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=\n+  dependencies:\n+    tweetnacl \"^0.14.3\"\n+\n",
            "-": ""
          },
          {
            "+": "+boolbase@~1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/boolbase/-/boolbase-1.0.0.tgz#68dff5fbe60c51eb37725ea9e3ed310dcc1e776e\"\n+  integrity sha1-aN/1++YMUes3cl6p4+0xDcwed24=\n+\n",
            "-": ""
          },
          {
            "+": "+browser-process-hrtime@^0.1.2:\n+  version \"0.1.3\"\n+  resolved \"https://registry.yarnpkg.com/browser-process-hrtime/-/browser-process-hrtime-0.1.3.tgz#616f00faef1df7ec1b5bf9cfe2bdc3170f26c7b4\"\n+  integrity sha512-bRFnI4NnjO6cnyLmOV/7PVoDEMJChlcfN0z4s1YMBY989/SvlfMI1lgCnkFUs53e9gQF+w7qu7XdllSTiSl8Aw==\n+\n+browser-resolve@^1.11.3:\n+  version \"1.11.3\"\n+  resolved \"https://registry.yarnpkg.com/browser-resolve/-/browser-resolve-1.11.3.tgz#9b7cbb3d0f510e4cb86bdbd796124d28b5890af6\"\n+  integrity sha512-exDi1BYWB/6raKHmDTCicQfTkqwN5fioMFV4j8BsfMU4R2DK/QfZfK7kOVkmWCNANf0snkBzqGqAJBao9gZMdQ==\n+  dependencies:\n+    resolve \"1.1.7\"\n+\n",
            "-": ""
          },
          {
            "+": "+bser@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/bser/-/bser-2.0.0.tgz#9ac78d3ed5d915804fd87acb158bc797147a1719\"\n+  integrity sha1-mseNPtXZFYBP2HrLFYvHlxR6Fxk=\n+  dependencies:\n+    node-int64 \"^0.4.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+callsites@^3.0.0:\n+  version \"3.1.0\"\n+  resolved \"https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73\"\n+  integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==\n+\n+camelcase@^5.0.0:\n+  version \"5.3.1\"\n+  resolved \"https://registry.yarnpkg.com/camelcase/-/camelcase-5.3.1.tgz#e3c9b31569e106811df242f715725a1f4c494320\"\n+  integrity sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==\n+\n",
            "-": ""
          },
          {
            "+": "+capture-exit@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/capture-exit/-/capture-exit-2.0.0.tgz#fb953bfaebeb781f62898239dabb426d08a509a4\"\n+  integrity sha512-PiT/hQmTonHhl/HFGN+Lx3JJUznrVYJ3+AQsnthneZbvW7x+f08Tk7yLJTLEOUvBTbduLeeBkxEaYXUOUrRq6g==\n+  dependencies:\n+    rsvp \"^4.8.4\"\n+\n+caseless@~0.12.0:\n+  version \"0.12.0\"\n+  resolved \"https://registry.yarnpkg.com/caseless/-/caseless-0.12.0.tgz#1b681c21ff84033c826543090689420d187151dc\"\n+  integrity sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=\n+\n",
            "-": ""
          },
          {
            "+": "+cheerio@^1.0.0-rc.2:\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/cheerio/-/cheerio-1.0.0-rc.3.tgz#094636d425b2e9c0f4eb91a46c05630c9a1a8bf6\"\n+  integrity sha512-0td5ijfUPuubwLUu0OBoe98gZj8C/AA+RW3v67GPlGOrvxWjZmBXiBCRU+I8VEiNyJzjth40POfHiz2RB3gImA==\n+  dependencies:\n+    css-select \"~1.2.0\"\n+    dom-serializer \"~0.1.1\"\n+    entities \"~1.1.1\"\n+    htmlparser2 \"^3.9.1\"\n+    lodash \"^4.15.0\"\n+    parse5 \"^3.0.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+cliui@^4.0.0:\n+  version \"4.1.0\"\n+  resolved \"https://registry.yarnpkg.com/cliui/-/cliui-4.1.0.tgz#348422dbe82d800b3022eef4f6ac10bf2e4d1b49\"\n+  integrity sha512-4FG+RSG9DL7uEwRUZXZn3SS34DiDPfzP0VOiEwtUWlE+AR2EIg+hSyvrIgUUfhdgR/UkAeW2QHgeP+hWrXs7jQ==\n+  dependencies:\n+    string-width \"^2.1.1\"\n+    strip-ansi \"^4.0.0\"\n+    wrap-ansi \"^2.0.0\"\n+\n+co@^4.6.0:\n+  version \"4.6.0\"\n+  resolved \"https://registry.yarnpkg.com/co/-/co-4.6.0.tgz#6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184\"\n+  integrity sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=\n+\n",
            "-": ""
          },
          {
            "+": "+combined-stream@^1.0.6, combined-stream@~1.0.6:\n+  version \"1.0.7\"\n+  resolved \"https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.7.tgz#2d1d24317afb8abe95d6d2c0b07b57813539d828\"\n+  integrity sha512-brWl9y6vOB1xYPZcpZde3N9zDByXTosAeMDo4p1wzo6UMOX4vumB+TP1RZ76sfE6Md68Q0NJSrE/gbezd4Ul+w==\n+  dependencies:\n+    delayed-stream \"~1.0.0\"\n+\n+commander@^2.14.1, commander@^2.19.0, commander@^2.9.0, commander@~2.20.0:\n",
            "-": "-commander@^2.14.1, commander@^2.19.0, commander@^2.9.0:\n"
          },
          {
            "+": "+compare-versions@^3.2.1:\n+  version \"3.4.0\"\n+  resolved \"https://registry.yarnpkg.com/compare-versions/-/compare-versions-3.4.0.tgz#e0747df5c9cb7f054d6d3dc3e1dbc444f9e92b26\"\n+  integrity sha512-tK69D7oNXXqUW3ZNo/z7NXTEz22TCF0pTE+YF9cxvaAM9XnkLo1fV621xCLrRR6aevJlKxExkss0vWqUCUpqdg==\n+\n",
            "-": ""
          },
          {
            "+": "+convert-source-map@^1.1.0, convert-source-map@^1.4.0:\n",
            "-": "-convert-source-map@^1.1.0:\n"
          },
          {
            "+": "+core-util-is@1.0.2, core-util-is@~1.0.0:\n",
            "-": "-core-util-is@~1.0.0:\n"
          },
          {
            "+": "+css-select@~1.2.0:\n+  version \"1.2.0\"\n+  resolved \"https://registry.yarnpkg.com/css-select/-/css-select-1.2.0.tgz#2b3a110539c5355f1cd8d314623e870b121ec858\"\n+  integrity sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg=\n+  dependencies:\n+    boolbase \"~1.0.0\"\n+    css-what \"2.1\"\n+    domutils \"1.5.1\"\n+    nth-check \"~1.0.1\"\n+\n+css-what@2.1:\n+  version \"2.1.3\"\n+  resolved \"https://registry.yarnpkg.com/css-what/-/css-what-2.1.3.tgz#a6d7604573365fe74686c3f311c56513d88285f2\"\n+  integrity sha512-a+EPoD+uZiNfh+5fxw2nO9QwFa6nJe2Or35fGY6Ipw1R3R4AGz1d1TEZrCegvw2YTmZ0jXirGYlzxxpYSHwpEg==\n+\n+cssom@0.3.x, \"cssom@>= 0.3.2 < 0.4.0\":\n+  version \"0.3.6\"\n+  resolved \"https://registry.yarnpkg.com/cssom/-/cssom-0.3.6.tgz#f85206cee04efa841f3c5982a74ba96ab20d65ad\"\n+  integrity sha512-DtUeseGk9/GBW0hl0vVPpU22iHL6YB5BUX7ml1hB+GMpo0NX5G4voX3kdWiMSEguFtcW3Vh3djqNF4aIe6ne0A==\n+\n+cssstyle@^1.0.0:\n+  version \"1.2.2\"\n+  resolved \"https://registry.yarnpkg.com/cssstyle/-/cssstyle-1.2.2.tgz#427ea4d585b18624f6fdbf9de7a2a1a3ba713077\"\n+  integrity sha512-43wY3kl1CVQSvL7wUY1qXkxVGkStjpkDmVjiIKX8R97uhajy8Bybay78uOtqvh7Q5GK75dNPfW0geWjE6qQQow==\n+  dependencies:\n+    cssom \"0.3.x\"\n+\n",
            "-": ""
          },
          {
            "+": "+dashdash@^1.12.0:\n+  version \"1.14.1\"\n+  resolved \"https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0\"\n+  integrity sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=\n+  dependencies:\n+    assert-plus \"^1.0.0\"\n+\n+data-urls@^1.0.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/data-urls/-/data-urls-1.1.0.tgz#15ee0582baa5e22bb59c77140da8f9c76963bbfe\"\n+  integrity sha512-YTWYI9se1P55u58gL5GkQHW4P6VJBJ5iBT+B5a7i2Tjadhv52paJG0qHX4A0OR6/t52odI64KP2YvFpkDOi3eQ==\n+  dependencies:\n+    abab \"^2.0.0\"\n+    whatwg-mimetype \"^2.2.0\"\n+    whatwg-url \"^7.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+debug@^4.0.1, debug@^4.1.0, debug@^4.1.1:\n",
            "-": "-debug@^4.0.1, debug@^4.1.0:\n"
          },
          {
            "+": "+decamelize@^1.2.0:\n+  version \"1.2.0\"\n+  resolved \"https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290\"\n+  integrity sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=\n+\n",
            "-": ""
          },
          {
            "+": "+deep-is@~0.1.3:\n+  version \"0.1.3\"\n+  resolved \"https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.3.tgz#b369d6fb5dbc13eecf524f91b070feedc357cf34\"\n+  integrity sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=\n+\n+default-require-extensions@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/default-require-extensions/-/default-require-extensions-2.0.0.tgz#f5f8fbb18a7d6d50b21f641f649ebb522cfe24f7\"\n+  integrity sha1-9fj7sYp9bVCyH2QfZJ67Uiz+JPc=\n+  dependencies:\n+    strip-bom \"^3.0.0\"\n+\n+define-properties@^1.1.2, define-properties@^1.1.3:\n+  version \"1.1.3\"\n+  resolved \"https://registry.yarnpkg.com/define-properties/-/define-properties-1.1.3.tgz#cf88da6cbee26fe6db7094f61d870cbd84cee9f1\"\n+  integrity sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==\n+  dependencies:\n+    object-keys \"^1.0.12\"\n+\n",
            "-": ""
          },
          {
            "+": "+delayed-stream@~1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619\"\n+  integrity sha1-3zrhmayt+31ECqrgsp4icrJOxhk=\n+\n",
            "-": ""
          },
          {
            "+": "+detect-newline@^2.1.0:\n+  version \"2.1.0\"\n+  resolved \"https://registry.yarnpkg.com/detect-newline/-/detect-newline-2.1.0.tgz#f41f1c10be4b00e87b5f13da680759f2c5bfd3e2\"\n+  integrity sha1-9B8cEL5LAOh7XxPaaAdZ8sW/0+I=\n+\n+diff-sequences@^24.3.0:\n+  version \"24.3.0\"\n+  resolved \"https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-24.3.0.tgz#0f20e8a1df1abddaf4d9c226680952e64118b975\"\n+  integrity sha512-xLqpez+Zj9GKSnPWS0WZw1igGocZ+uua8+y+5dDNTT934N3QuY1sp2LkHzwiaYQGz60hMq0pjAshdeXm5VUOEw==\n+\n",
            "-": ""
          },
          {
            "+": "+discontinuous-range@1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/discontinuous-range/-/discontinuous-range-1.0.0.tgz#e38331f0844bba49b9a9cb71c771585aab1bc65a\"\n+  integrity sha1-44Mx8IRLukm5qctxx3FYWqsbxlo=\n+\n+dom-serializer@0, dom-serializer@~0.1.1:\n+  version \"0.1.1\"\n+  resolved \"https://registry.yarnpkg.com/dom-serializer/-/dom-serializer-0.1.1.tgz#1ec4059e284babed36eec2941d4a970a189ce7c0\"\n+  integrity sha512-l0IU0pPzLWSHBcieZbpOKgkIn3ts3vAh7ZuFyXNwJxJXk/c4Gwj9xaTJwIDVQCXawWD0qb3IzMGH5rglQaO0XA==\n+  dependencies:\n+    domelementtype \"^1.3.0\"\n+    entities \"^1.1.1\"\n+\n+dom-testing-library@^3.19.0:\n+  version \"3.19.0\"\n+  resolved \"https://registry.yarnpkg.com/dom-testing-library/-/dom-testing-library-3.19.0.tgz#652ade2cd93ae98beb52b2878eeb9420d7599832\"\n+  integrity sha512-gkGXP5GevcjC24Tk6Y6RwrZ7Nz0Ul4bchXV4yHLcnMidMp/EdBCvtHEgHTsZ2yZ4DhUpLowGbJv/1u1Z7bPvtw==\n+  dependencies:\n+    \"@babel/runtime\" \"^7.3.4\"\n+    \"@sheerun/mutationobserver-shim\" \"^0.3.2\"\n+    pretty-format \"^24.5.0\"\n+    wait-for-expect \"^1.1.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+domelementtype@1, domelementtype@^1.3.0, domelementtype@^1.3.1:\n+  version \"1.3.1\"\n+  resolved \"https://registry.yarnpkg.com/domelementtype/-/domelementtype-1.3.1.tgz#d048c44b37b0d10a7f2a3d5fee3f4333d790481f\"\n+  integrity sha512-BSKB+TSpMpFI/HOxCNr1O8aMOTZ8hT3pM3GQ0w/mWRmkhEDSFJkkyzz4XQsBV44BChwGkrDfMyjVD0eA2aFV3w==\n+\n+domexception@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/domexception/-/domexception-1.0.1.tgz#937442644ca6a31261ef36e3ec677fe805582c90\"\n+  integrity sha512-raigMkn7CJNNo6Ihro1fzG7wr3fHuYVytzquZKX5n0yizGsTcYgzdIUwj1X9pK0VvjeihV+XiclP+DjwbsSKug==\n+  dependencies:\n+    webidl-conversions \"^4.0.2\"\n+\n+domhandler@^2.3.0:\n+  version \"2.4.2\"\n+  resolved \"https://registry.yarnpkg.com/domhandler/-/domhandler-2.4.2.tgz#8805097e933d65e85546f726d60f5eb88b44f803\"\n+  integrity sha512-JiK04h0Ht5u/80fdLMCEmV4zkNh2BcoMFBmZ/91WtYZ8qVXSKjiw7fXMgFPnHcSZgOo3XdinHvmnDUeMf5R4wA==\n+  dependencies:\n+    domelementtype \"1\"\n+\n+domutils@1.5.1:\n+  version \"1.5.1\"\n+  resolved \"https://registry.yarnpkg.com/domutils/-/domutils-1.5.1.tgz#dcd8488a26f563d61079e48c9f7b7e32373682cf\"\n+  integrity sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8=\n+  dependencies:\n+    dom-serializer \"0\"\n+    domelementtype \"1\"\n+\n+domutils@^1.5.1:\n+  version \"1.7.0\"\n+  resolved \"https://registry.yarnpkg.com/domutils/-/domutils-1.7.0.tgz#56ea341e834e06e6748af7a1cb25da67ea9f8c2a\"\n+  integrity sha512-Lgd2XcJ/NjEw+7tFvfKxOzCYKZsdct5lczQ2ZaQY8Djz7pfAD3Gbp8ySJWtreII/vDlMVmxwa6pHmdxIYgttDg==\n+  dependencies:\n+    dom-serializer \"0\"\n+    domelementtype \"1\"\n+\n",
            "-": ""
          },
          {
            "+": "+ecc-jsbn@~0.1.1:\n+  version \"0.1.2\"\n+  resolved \"https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz#3a83a904e54353287874c564b7549386849a98c9\"\n+  integrity sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=\n+  dependencies:\n+    jsbn \"~0.1.0\"\n+    safer-buffer \"^2.1.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+entities@^1.1.1, entities@~1.1.1:\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/entities/-/entities-1.1.2.tgz#bdfa735299664dfafd34529ed4f8522a275fea56\"\n+  integrity sha512-f2LZMYl1Fzu7YSBKg+RoROelpOaNrcGmE9AZubeDfrCEia483oW4MI4VyFd5VNHIgQ/7qm1I0wUHK1eJnn2y2w==\n+\n+enzyme-adapter-react-16@^1.12.1:\n+  version \"1.12.1\"\n+  resolved \"https://registry.yarnpkg.com/enzyme-adapter-react-16/-/enzyme-adapter-react-16-1.12.1.tgz#6a2d74c80559d35ac0a91ca162fa45f4186290cf\"\n+  integrity sha512-GB61gvY97XvrA6qljExGY+lgI6BBwz+ASLaRKct9VQ3ozu0EraqcNn3CcrUckSGIqFGa1+CxO5gj5is5t3lwrw==\n+  dependencies:\n+    enzyme-adapter-utils \"^1.11.0\"\n+    object.assign \"^4.1.0\"\n+    object.values \"^1.1.0\"\n+    prop-types \"^15.7.2\"\n+    react-is \"^16.8.6\"\n+    react-test-renderer \"^16.0.0-0\"\n+    semver \"^5.6.0\"\n+\n+enzyme-adapter-utils@^1.11.0:\n+  version \"1.11.0\"\n+  resolved \"https://registry.yarnpkg.com/enzyme-adapter-utils/-/enzyme-adapter-utils-1.11.0.tgz#6ffff782b1b57dd46c72a845a91fc4103956a117\"\n+  integrity sha512-0VZeoE9MNx+QjTfsjmO1Mo+lMfunucYB4wt5ficU85WB/LoetTJrbuujmHP3PJx6pSoaAuLA+Mq877x4LoxdNg==\n+  dependencies:\n+    airbnb-prop-types \"^2.12.0\"\n+    function.prototype.name \"^1.1.0\"\n+    object.assign \"^4.1.0\"\n+    object.fromentries \"^2.0.0\"\n+    prop-types \"^15.7.2\"\n+    semver \"^5.6.0\"\n+\n+enzyme@^3.9.0:\n+  version \"3.9.0\"\n+  resolved \"https://registry.yarnpkg.com/enzyme/-/enzyme-3.9.0.tgz#2b491f06ca966eb56b6510068c7894a7e0be3909\"\n+  integrity sha512-JqxI2BRFHbmiP7/UFqvsjxTirWoM1HfeaJrmVSZ9a1EADKkZgdPcAuISPMpoUiHlac9J4dYt81MC5BBIrbJGMg==\n+  dependencies:\n+    array.prototype.flat \"^1.2.1\"\n+    cheerio \"^1.0.0-rc.2\"\n+    function.prototype.name \"^1.1.0\"\n+    has \"^1.0.3\"\n+    html-element-map \"^1.0.0\"\n+    is-boolean-object \"^1.0.0\"\n+    is-callable \"^1.1.4\"\n+    is-number-object \"^1.0.3\"\n+    is-regex \"^1.0.4\"\n+    is-string \"^1.0.4\"\n+    is-subset \"^0.1.1\"\n+    lodash.escape \"^4.0.1\"\n+    lodash.isequal \"^4.5.0\"\n+    object-inspect \"^1.6.0\"\n+    object-is \"^1.0.1\"\n+    object.assign \"^4.1.0\"\n+    object.entries \"^1.0.4\"\n+    object.values \"^1.0.4\"\n+    raf \"^3.4.0\"\n+    rst-selector-parser \"^2.2.3\"\n+    string.prototype.trim \"^1.1.2\"\n+\n",
            "-": ""
          },
          {
            "+": "+es-abstract@^1.10.0, es-abstract@^1.11.0, es-abstract@^1.12.0, es-abstract@^1.5.0, es-abstract@^1.5.1, es-abstract@^1.7.0:\n+  version \"1.13.0\"\n+  resolved \"https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.13.0.tgz#ac86145fdd5099d8dd49558ccba2eaf9b88e24e9\"\n+  integrity sha512-vDZfg/ykNxQVwup/8E1BZhVzFfBxs9NqMzGcvIJrqg5k2/5Za2bWo40dK2J1pgLngZ7c+Shh8lwYtLGyrwPutg==\n+  dependencies:\n+    es-to-primitive \"^1.2.0\"\n+    function-bind \"^1.1.1\"\n+    has \"^1.0.3\"\n+    is-callable \"^1.1.4\"\n+    is-regex \"^1.0.4\"\n+    object-keys \"^1.0.12\"\n+\n+es-to-primitive@^1.2.0:\n+  version \"1.2.0\"\n+  resolved \"https://registry.yarnpkg.com/es-to-primitive/-/es-to-primitive-1.2.0.tgz#edf72478033456e8dda8ef09e00ad9650707f377\"\n+  integrity sha512-qZryBOJjV//LaxLTV6UC//WewneB3LcXOL9NP++ozKVXsIIIpm/2c13UDiD9Jp2eThsecw9m3jPqDwTyobcdbg==\n+  dependencies:\n+    is-callable \"^1.1.4\"\n+    is-date-object \"^1.0.1\"\n+    is-symbol \"^1.0.2\"\n+\n",
            "-": ""
          },
          {
            "+": "+escodegen@^1.9.1:\n+  version \"1.11.1\"\n+  resolved \"https://registry.yarnpkg.com/escodegen/-/escodegen-1.11.1.tgz#c485ff8d6b4cdb89e27f4a856e91f118401ca510\"\n+  integrity sha512-JwiqFD9KdGVVpeuRa68yU3zZnBEOcPs0nKW7wZzXky8Z7tffdYUHbe11bPCV5jYlK6DVdKLWLm0f5I/QlL0Kmw==\n+  dependencies:\n+    esprima \"^3.1.3\"\n+    estraverse \"^4.2.0\"\n+    esutils \"^2.0.2\"\n+    optionator \"^0.8.1\"\n+  optionalDependencies:\n+    source-map \"~0.6.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+esprima@^3.1.3:\n+  version \"3.1.3\"\n+  resolved \"https://registry.yarnpkg.com/esprima/-/esprima-3.1.3.tgz#fdca51cee6133895e3c88d535ce49dbff62a4633\"\n+  integrity sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM=\n+\n",
            "-": ""
          },
          {
            "+": "+estraverse@^4.1.0, estraverse@^4.1.1, estraverse@^4.2.0:\n",
            "-": "-estraverse@^4.1.0, estraverse@^4.1.1:\n"
          },
          {
            "+": "+exec-sh@^0.3.2:\n+  version \"0.3.2\"\n+  resolved \"https://registry.yarnpkg.com/exec-sh/-/exec-sh-0.3.2.tgz#6738de2eb7c8e671d0366aea0b0db8c6f7d7391b\"\n+  integrity sha512-9sLAvzhI5nc8TpuQUh4ahMdCrWT00wPWz7j47/emR5+2qEfoZP5zzUXvx+vdx+H6ohhnsYC31iX04QLYJK8zTg==\n+\n",
            "-": ""
          },
          {
            "+": "+exit@^0.1.2:\n+  version \"0.1.2\"\n+  resolved \"https://registry.yarnpkg.com/exit/-/exit-0.1.2.tgz#0632638f8d877cc82107d30a0fff1a17cba1cd0c\"\n+  integrity sha1-BjJjj42HfMghB9MKD/8aF8uhzQw=\n+\n",
            "-": ""
          },
          {
            "+": "+expect@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/expect/-/expect-24.7.1.tgz#d91defbab4e627470a152feaf35b3c31aa1c7c14\"\n+  integrity sha512-mGfvMTPduksV3xoI0xur56pQsg2vJjNf5+a+bXOjqCkiCBbmCayrBbHS/75y9K430cfqyocPr2ZjiNiRx4SRKw==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    ansi-styles \"^3.2.0\"\n+    jest-get-type \"^24.3.0\"\n+    jest-matcher-utils \"^24.7.0\"\n+    jest-message-util \"^24.7.1\"\n+    jest-regex-util \"^24.3.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+extend@~3.0.2:\n+  version \"3.0.2\"\n+  resolved \"https://registry.yarnpkg.com/extend/-/extend-3.0.2.tgz#f8b1136b4071fbd8eb140aff858b1019ec2915fa\"\n+  integrity sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==\n+\n",
            "-": ""
          },
          {
            "+": "+extsprintf@1.3.0:\n+  version \"1.3.0\"\n+  resolved \"https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.3.0.tgz#96918440e3041a7a414f8c52e3c574eb3c3e1e05\"\n+  integrity sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=\n+\n+extsprintf@^1.2.0:\n+  version \"1.4.0\"\n+  resolved \"https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.4.0.tgz#e2689f8f356fad62cca65a3a91c5df5f9551692f\"\n+  integrity sha1-4mifjzVvrWLMplo6kcXfX5VRaS8=\n+\n",
            "-": ""
          },
          {
            "+": "+fast-levenshtein@~2.0.4:\n+  version \"2.0.6\"\n+  resolved \"https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917\"\n+  integrity sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=\n+\n+fb-watchman@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/fb-watchman/-/fb-watchman-2.0.0.tgz#54e9abf7dfa2f26cd9b1636c588c1afc05de5d58\"\n+  integrity sha1-VOmr99+i8mzZsWNsWIwa/AXeXVg=\n+  dependencies:\n+    bser \"^2.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+fileset@^2.0.3:\n+  version \"2.0.3\"\n+  resolved \"https://registry.yarnpkg.com/fileset/-/fileset-2.0.3.tgz#8e7548a96d3cc2327ee5e674168723a333bba2a0\"\n+  integrity sha1-jnVIqW08wjJ+5eZ0FocjozO7oqA=\n+  dependencies:\n+    glob \"^7.0.3\"\n+    minimatch \"^3.0.3\"\n+\n",
            "-": ""
          },
          {
            "+": "+forever-agent@~0.6.1:\n+  version \"0.6.1\"\n+  resolved \"https://registry.yarnpkg.com/forever-agent/-/forever-agent-0.6.1.tgz#fbc71f0c41adeb37f96c577ad1ed42d8fdacca91\"\n+  integrity sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=\n+\n+form-data@~2.3.2:\n+  version \"2.3.3\"\n+  resolved \"https://registry.yarnpkg.com/form-data/-/form-data-2.3.3.tgz#dcce52c05f644f298c6a7ab936bd724ceffbf3a6\"\n+  integrity sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==\n+  dependencies:\n+    asynckit \"^0.4.0\"\n+    combined-stream \"^1.0.6\"\n+    mime-types \"^2.1.12\"\n+\n",
            "-": ""
          },
          {
            "+": "+function-bind@^1.0.2, function-bind@^1.1.1:\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.1.tgz#a56899d3ea3c9bab874bb9773b7c5ede92f4895d\"\n+  integrity sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\n+\n+function.prototype.name@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/function.prototype.name/-/function.prototype.name-1.1.0.tgz#8bd763cc0af860a859cc5d49384d74b932cd2327\"\n+  integrity sha512-Bs0VRrTz4ghD8pTmbJQD1mZ8A/mN0ur/jGz+A6FBxPDUPkm1tNfF6bhTYPA7i7aF4lZJVr+OXTNNrnnIl58Wfg==\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    function-bind \"^1.1.1\"\n+    is-callable \"^1.1.3\"\n+\n",
            "-": ""
          },
          {
            "+": "+get-caller-file@^1.0.1:\n+  version \"1.0.3\"\n+  resolved \"https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-1.0.3.tgz#f978fa4c90d1dfe7ff2d6beda2a515e713bdcf4a\"\n+  integrity sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w==\n+\n",
            "-": ""
          },
          {
            "+": "+getpass@^0.1.1:\n+  version \"0.1.7\"\n+  resolved \"https://registry.yarnpkg.com/getpass/-/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa\"\n+  integrity sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=\n+  dependencies:\n+    assert-plus \"^1.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+glob@^7.0.3, glob@^7.1.1, glob@^7.1.2, glob@^7.1.3:\n",
            "-": "-glob@^7.0.3, glob@^7.1.3:\n"
          },
          {
            "+": "+growly@^1.3.0:\n+  version \"1.3.0\"\n+  resolved \"https://registry.yarnpkg.com/growly/-/growly-1.3.0.tgz#f10748cbe76af964b7c96c93c6bcc28af120c081\"\n+  integrity sha1-8QdIy+dq+WS3yWyTxrzCivEgwIE=\n+\n",
            "-": ""
          },
          {
            "+": "+handlebars@^4.1.0:\n+  version \"4.1.1\"\n+  resolved \"https://registry.yarnpkg.com/handlebars/-/handlebars-4.1.1.tgz#6e4e41c18ebe7719ae4d38e5aca3d32fa3dd23d3\"\n+  integrity sha512-3Zhi6C0euYZL5sM0Zcy7lInLXKQ+YLcF/olbN010mzGQ4XVm50JeyBnMqofHh696GrciGruC7kCcApPDJvVgwA==\n+  dependencies:\n+    neo-async \"^2.6.0\"\n+    optimist \"^0.6.1\"\n+    source-map \"^0.6.1\"\n+  optionalDependencies:\n+    uglify-js \"^3.1.4\"\n+\n+har-schema@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/har-schema/-/har-schema-2.0.0.tgz#a94c2224ebcac04782a0d9035521f24735b7ec92\"\n+  integrity sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=\n+\n+har-validator@~5.1.0:\n+  version \"5.1.3\"\n+  resolved \"https://registry.yarnpkg.com/har-validator/-/har-validator-5.1.3.tgz#1ef89ebd3e4996557675eed9893110dc350fa080\"\n+  integrity sha512-sNvOCzEQNr/qrvJgc3UG/kD4QtlHycrzwS+6mfTrrSq97BvaYcPZZI1ZSqGSPR73Cxn4LKTD4PttRwfU7jWq5g==\n+  dependencies:\n+    ajv \"^6.5.5\"\n+    har-schema \"^2.0.0\"\n+\n+has-ansi@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/has-ansi/-/has-ansi-2.0.0.tgz#34f5049ce1ecdf2b0649af3ef24e45ed35416d91\"\n+  integrity sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=\n",
            "-": "-has-ansi@^2.0.0:\n-  version \"2.0.0\"\n-  resolved \"https://registry.yarnpkg.com/has-ansi/-/has-ansi-2.0.0.tgz#34f5049ce1ecdf2b0649af3ef24e45ed35416d91\"\n-  integrity sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=\n"
          },
          {
            "+": "+has-symbols@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/has-symbols/-/has-symbols-1.0.0.tgz#ba1a8f1af2a0fc39650f5c850367704122063b44\"\n+  integrity sha1-uhqPGvKg/DllD1yFA2dwQSIGO0Q=\n+\n",
            "-": ""
          },
          {
            "+": "+has@^1.0.1, has@^1.0.3:\n+  version \"1.0.3\"\n+  resolved \"https://registry.yarnpkg.com/has/-/has-1.0.3.tgz#722d7cbfc1f6aa8241f16dd814e011e1f41e8796\"\n+  integrity sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\n+  dependencies:\n+    function-bind \"^1.1.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+html-element-map@^1.0.0:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/html-element-map/-/html-element-map-1.0.1.tgz#3c4fcb4874ebddfe4283b51c8994e7713782b592\"\n+  integrity sha512-BZSfdEm6n706/lBfXKWa4frZRZcT5k1cOusw95ijZsHlI+GdgY0v95h6IzO3iIDf2ROwq570YTwqNPqHcNMozw==\n+  dependencies:\n+    array-filter \"^1.0.0\"\n+\n+html-encoding-sniffer@^1.0.2:\n+  version \"1.0.2\"\n+  resolved \"https://registry.yarnpkg.com/html-encoding-sniffer/-/html-encoding-sniffer-1.0.2.tgz#e70d84b94da53aa375e11fe3a351be6642ca46f8\"\n+  integrity sha512-71lZziiDnsuabfdYiUeWdCVyKuqwWi23L8YeIgV9jSSZHCtb6wB1BKWooH7L3tn4/FuZJMVWyNaIDr4RGmaSYw==\n+  dependencies:\n+    whatwg-encoding \"^1.0.1\"\n+\n+htmlparser2@^3.9.1:\n+  version \"3.10.1\"\n+  resolved \"https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-3.10.1.tgz#bd679dc3f59897b6a34bb10749c855bb53a9392f\"\n+  integrity sha512-IgieNijUMbkDovyoKObU1DUhm1iwNYE/fuifEoEHfd1oZKZDaONBSkal7Y01shxsM49R4XaMdGez3WnF9UfiCQ==\n+  dependencies:\n+    domelementtype \"^1.3.1\"\n+    domhandler \"^2.3.0\"\n+    domutils \"^1.5.1\"\n+    entities \"^1.1.1\"\n+    inherits \"^2.0.1\"\n+    readable-stream \"^3.1.1\"\n+\n+http-signature@~1.2.0:\n+  version \"1.2.0\"\n+  resolved \"https://registry.yarnpkg.com/http-signature/-/http-signature-1.2.0.tgz#9aecd925114772f3d95b65a60abb8f7c18fbace1\"\n+  integrity sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=\n+  dependencies:\n+    assert-plus \"^1.0.0\"\n+    jsprim \"^1.2.2\"\n+    sshpk \"^1.7.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+iconv-lite@0.4.24, iconv-lite@^0.4.4:\n",
            "-": "-iconv-lite@^0.4.4:\n"
          },
          {
            "+": "+import-local@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/import-local/-/import-local-2.0.0.tgz#55070be38a5993cf18ef6db7e961f5bee5c5a09d\"\n+  integrity sha512-b6s04m3O+s3CGSbqDIyP4R6aAwAeYlVq9+WUWep6iHa8ETRf9yei1U48C5MmfJmV9AiLYYBKPMq/W+/WRpQmCQ==\n+  dependencies:\n+    pkg-dir \"^3.0.0\"\n+    resolve-cwd \"^2.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+invariant@^2.2.2, invariant@^2.2.4:\n",
            "-": "-invariant@^2.2.2:\n"
          },
          {
            "+": "+invert-kv@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/invert-kv/-/invert-kv-2.0.0.tgz#7393f5afa59ec9ff5f67a27620d11c226e3eec02\"\n+  integrity sha512-wPVv/y/QQ/Uiirj/vh3oP+1Ww+AWehmi1g5fFWGPF6IpCBCDVrhgHRMvrLfdYcwDh3QJbGXDW4JAuzxElLSqKA==\n+\n",
            "-": ""
          },
          {
            "+": "+is-boolean-object@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/is-boolean-object/-/is-boolean-object-1.0.0.tgz#98f8b28030684219a95f375cfbd88ce3405dff93\"\n+  integrity sha1-mPiygDBoQhmpXzdc+9iM40Bd/5M=\n+\n",
            "-": ""
          },
          {
            "+": "+is-callable@^1.1.3, is-callable@^1.1.4:\n+  version \"1.1.4\"\n+  resolved \"https://registry.yarnpkg.com/is-callable/-/is-callable-1.1.4.tgz#1e1adf219e1eeb684d691f9d6a05ff0d30a24d75\"\n+  integrity sha512-r5p9sxJjYnArLjObpjA4xu5EKI3CuKHkJXMhT7kwbpUyIFD1n5PMAsoPvWnvtZiNz7LjkYDRZhd7FlI0eMijEA==\n+\n",
            "-": ""
          },
          {
            "+": "+is-date-object@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/is-date-object/-/is-date-object-1.0.1.tgz#9aa20eb6aeebbff77fbd33e74ca01b33581d3a16\"\n+  integrity sha1-mqIOtq7rv/d/vTPnTKAbM1gdOhY=\n+\n",
            "-": ""
          },
          {
            "+": "+is-generator-fn@^2.0.0:\n+  version \"2.1.0\"\n+  resolved \"https://registry.yarnpkg.com/is-generator-fn/-/is-generator-fn-2.1.0.tgz#7d140adc389aaf3011a8f2a2a4cfa6faadffb118\"\n+  integrity sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==\n+\n",
            "-": ""
          },
          {
            "+": "+is-number-object@^1.0.3:\n+  version \"1.0.3\"\n+  resolved \"https://registry.yarnpkg.com/is-number-object/-/is-number-object-1.0.3.tgz#f265ab89a9f445034ef6aff15a8f00b00f551799\"\n+  integrity sha1-8mWrian0RQNO9q/xWo8AsA9VF5k=\n+\n",
            "-": ""
          },
          {
            "+": "+is-regex@^1.0.4:\n+  version \"1.0.4\"\n+  resolved \"https://registry.yarnpkg.com/is-regex/-/is-regex-1.0.4.tgz#5517489b547091b0930e095654ced25ee97e9491\"\n+  integrity sha1-VRdIm1RwkbCTDglWVM7SXul+lJE=\n+  dependencies:\n+    has \"^1.0.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+is-string@^1.0.4:\n+  version \"1.0.4\"\n+  resolved \"https://registry.yarnpkg.com/is-string/-/is-string-1.0.4.tgz#cc3a9b69857d621e963725a24caeec873b826e64\"\n+  integrity sha1-zDqbaYV9Yh6WNyWiTK7shzuCbmQ=\n+\n+is-subset@^0.1.1:\n+  version \"0.1.1\"\n+  resolved \"https://registry.yarnpkg.com/is-subset/-/is-subset-0.1.1.tgz#8a59117d932de1de00f245fcdd39ce43f1e939a6\"\n+  integrity sha1-ilkRfZMt4d4A8kX83TnOQ/HpOaY=\n+\n+is-symbol@^1.0.2:\n+  version \"1.0.2\"\n+  resolved \"https://registry.yarnpkg.com/is-symbol/-/is-symbol-1.0.2.tgz#a055f6ae57192caee329e7a860118b497a950f38\"\n+  integrity sha512-HS8bZ9ox60yCJLH9snBpIwv9pYUAkcuLhSA1oero1UB5y9aiQpRA8y2ex945AOtCZL1lJDeIk3G5LthswI46Lw==\n+  dependencies:\n+    has-symbols \"^1.0.0\"\n+\n+is-typedarray@~1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a\"\n+  integrity sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=\n+\n",
            "-": ""
          },
          {
            "+": "+is-wsl@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/is-wsl/-/is-wsl-1.1.0.tgz#1f16e4aa22b04d1336b66188a66af3c600c3a66d\"\n+  integrity sha1-HxbkqiKwTRM2tmGIpmrzxgDDpm0=\n+\n",
            "-": ""
          },
          {
            "+": "+isstream@~0.1.2:\n+  version \"0.1.2\"\n+  resolved \"https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a\"\n+  integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=\n+\n+istanbul-api@^2.1.1:\n+  version \"2.1.1\"\n+  resolved \"https://registry.yarnpkg.com/istanbul-api/-/istanbul-api-2.1.1.tgz#194b773f6d9cbc99a9258446848b0f988951c4d0\"\n+  integrity sha512-kVmYrehiwyeBAk/wE71tW6emzLiHGjYIiDrc8sfyty4F8M02/lrgXSm+R1kXysmF20zArvmZXjlE/mg24TVPJw==\n+  dependencies:\n+    async \"^2.6.1\"\n+    compare-versions \"^3.2.1\"\n+    fileset \"^2.0.3\"\n+    istanbul-lib-coverage \"^2.0.3\"\n+    istanbul-lib-hook \"^2.0.3\"\n+    istanbul-lib-instrument \"^3.1.0\"\n+    istanbul-lib-report \"^2.0.4\"\n+    istanbul-lib-source-maps \"^3.0.2\"\n+    istanbul-reports \"^2.1.1\"\n+    js-yaml \"^3.12.0\"\n+    make-dir \"^1.3.0\"\n+    minimatch \"^3.0.4\"\n+    once \"^1.4.0\"\n+\n+istanbul-lib-coverage@^2.0.2, istanbul-lib-coverage@^2.0.3:\n+  version \"2.0.3\"\n+  resolved \"https://registry.yarnpkg.com/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.3.tgz#0b891e5ad42312c2b9488554f603795f9a2211ba\"\n+  integrity sha512-dKWuzRGCs4G+67VfW9pBFFz2Jpi4vSp/k7zBcJ888ofV5Mi1g5CUML5GvMvV6u9Cjybftu+E8Cgp+k0dI1E5lw==\n+\n+istanbul-lib-hook@^2.0.3:\n+  version \"2.0.3\"\n+  resolved \"https://registry.yarnpkg.com/istanbul-lib-hook/-/istanbul-lib-hook-2.0.3.tgz#e0e581e461c611be5d0e5ef31c5f0109759916fb\"\n+  integrity sha512-CLmEqwEhuCYtGcpNVJjLV1DQyVnIqavMLFHV/DP+np/g3qvdxu3gsPqYoJMXm15sN84xOlckFB3VNvRbf5yEgA==\n+  dependencies:\n+    append-transform \"^1.0.0\"\n+\n+istanbul-lib-instrument@^3.0.0, istanbul-lib-instrument@^3.0.1, istanbul-lib-instrument@^3.1.0:\n+  version \"3.1.0\"\n+  resolved \"https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-3.1.0.tgz#a2b5484a7d445f1f311e93190813fa56dfb62971\"\n+  integrity sha512-ooVllVGT38HIk8MxDj/OIHXSYvH+1tq/Vb38s8ixt9GoJadXska4WkGY+0wkmtYCZNYtaARniH/DixUGGLZ0uA==\n+  dependencies:\n+    \"@babel/generator\" \"^7.0.0\"\n+    \"@babel/parser\" \"^7.0.0\"\n+    \"@babel/template\" \"^7.0.0\"\n+    \"@babel/traverse\" \"^7.0.0\"\n+    \"@babel/types\" \"^7.0.0\"\n+    istanbul-lib-coverage \"^2.0.3\"\n+    semver \"^5.5.0\"\n+\n+istanbul-lib-report@^2.0.4:\n+  version \"2.0.4\"\n+  resolved \"https://registry.yarnpkg.com/istanbul-lib-report/-/istanbul-lib-report-2.0.4.tgz#bfd324ee0c04f59119cb4f07dab157d09f24d7e4\"\n+  integrity sha512-sOiLZLAWpA0+3b5w5/dq0cjm2rrNdAfHWaGhmn7XEFW6X++IV9Ohn+pnELAl9K3rfpaeBfbmH9JU5sejacdLeA==\n+  dependencies:\n+    istanbul-lib-coverage \"^2.0.3\"\n+    make-dir \"^1.3.0\"\n+    supports-color \"^6.0.0\"\n+\n+istanbul-lib-source-maps@^3.0.1, istanbul-lib-source-maps@^3.0.2:\n+  version \"3.0.2\"\n+  resolved \"https://registry.yarnpkg.com/istanbul-lib-source-maps/-/istanbul-lib-source-maps-3.0.2.tgz#f1e817229a9146e8424a28e5d69ba220fda34156\"\n+  integrity sha512-JX4v0CiKTGp9fZPmoxpu9YEkPbEqCqBbO3403VabKjH+NRXo72HafD5UgnjTEqHL2SAjaZK1XDuDOkn6I5QVfQ==\n+  dependencies:\n+    debug \"^4.1.1\"\n+    istanbul-lib-coverage \"^2.0.3\"\n+    make-dir \"^1.3.0\"\n+    rimraf \"^2.6.2\"\n+    source-map \"^0.6.1\"\n+\n+istanbul-reports@^2.1.1:\n+  version \"2.1.1\"\n+  resolved \"https://registry.yarnpkg.com/istanbul-reports/-/istanbul-reports-2.1.1.tgz#72ef16b4ecb9a4a7bd0e2001e00f95d1eec8afa9\"\n+  integrity sha512-FzNahnidyEPBCI0HcufJoSEoKykesRlFcSzQqjH9x0+LC8tnnE/p/90PBLu8iZTxr8yYZNyTtiAujUqyN+CIxw==\n+  dependencies:\n+    handlebars \"^4.1.0\"\n+\n+jest-changed-files@^24.7.0:\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-changed-files/-/jest-changed-files-24.7.0.tgz#39d723a11b16ed7b373ac83adc76a69464b0c4fa\"\n+  integrity sha512-33BgewurnwSfJrW7T5/ZAXGE44o7swLslwh8aUckzq2e17/2Os1V0QU506ZNik3hjs8MgnEMKNkcud442NCDTw==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    execa \"^1.0.0\"\n+    throat \"^4.0.0\"\n+\n+jest-cli@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-cli/-/jest-cli-24.7.1.tgz#6093a539073b6f4953145abeeb9709cd621044f1\"\n+  integrity sha512-32OBoSCVPzcTslGFl6yVCMzB2SqX3IrWwZCY5mZYkb0D2WsogmU3eV2o8z7+gRQa4o4sZPX/k7GU+II7CxM6WQ==\n+  dependencies:\n+    \"@jest/core\" \"^24.7.1\"\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    chalk \"^2.0.1\"\n+    exit \"^0.1.2\"\n+    import-local \"^2.0.0\"\n+    is-ci \"^2.0.0\"\n+    jest-config \"^24.7.1\"\n+    jest-util \"^24.7.1\"\n+    jest-validate \"^24.7.0\"\n+    prompts \"^2.0.1\"\n+    realpath-native \"^1.1.0\"\n+    yargs \"^12.0.2\"\n+\n+jest-config@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-config/-/jest-config-24.7.1.tgz#6c1dd4db82a89710a3cf66bdba97827c9a1cf052\"\n+  integrity sha512-8FlJNLI+X+MU37j7j8RE4DnJkvAghXmBWdArVzypW6WxfGuxiL/CCkzBg0gHtXhD2rxla3IMOSUAHylSKYJ83g==\n+  dependencies:\n+    \"@babel/core\" \"^7.1.0\"\n+    \"@jest/test-sequencer\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    babel-jest \"^24.7.1\"\n+    chalk \"^2.0.1\"\n+    glob \"^7.1.1\"\n+    jest-environment-jsdom \"^24.7.1\"\n+    jest-environment-node \"^24.7.1\"\n+    jest-get-type \"^24.3.0\"\n+    jest-jasmine2 \"^24.7.1\"\n+    jest-regex-util \"^24.3.0\"\n+    jest-resolve \"^24.7.1\"\n+    jest-util \"^24.7.1\"\n+    jest-validate \"^24.7.0\"\n+    micromatch \"^3.1.10\"\n+    pretty-format \"^24.7.0\"\n+    realpath-native \"^1.1.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+jest-diff@^24.7.0:\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-diff/-/jest-diff-24.7.0.tgz#5d862899be46249754806f66e5729c07fcb3580f\"\n+  integrity sha512-ULQZ5B1lWpH70O4xsANC4tf4Ko6RrpwhE3PtG6ERjMg1TiYTC2Wp4IntJVGro6a8HG9luYHhhmF4grF0Pltckg==\n+  dependencies:\n+    chalk \"^2.0.1\"\n+    diff-sequences \"^24.3.0\"\n+    jest-get-type \"^24.3.0\"\n+    pretty-format \"^24.7.0\"\n+\n+jest-docblock@^24.3.0:\n+  version \"24.3.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-docblock/-/jest-docblock-24.3.0.tgz#b9c32dac70f72e4464520d2ba4aec02ab14db5dd\"\n+  integrity sha512-nlANmF9Yq1dufhFlKG9rasfQlrY7wINJbo3q01tu56Jv5eBU5jirylhF2O5ZBnLxzOVBGRDz/9NAwNyBtG4Nyg==\n+  dependencies:\n+    detect-newline \"^2.1.0\"\n+\n+jest-each@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-each/-/jest-each-24.7.1.tgz#fcc7dda4147c28430ad9fb6dc7211cd17ab54e74\"\n+  integrity sha512-4fsS8fEfLa3lfnI1Jw6NxjhyRTgfpuOVTeUZZFyVYqeTa4hPhr2YkToUhouuLTrL2eMGOfpbdMyRx0GQ/VooKA==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    chalk \"^2.0.1\"\n+    jest-get-type \"^24.3.0\"\n+    jest-util \"^24.7.1\"\n+    pretty-format \"^24.7.0\"\n+\n+jest-environment-jsdom@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-environment-jsdom/-/jest-environment-jsdom-24.7.1.tgz#a40e004b4458ebeb8a98082df135fd501b9fbbd6\"\n+  integrity sha512-Gnhb+RqE2JuQGb3kJsLF8vfqjt3PHKSstq4Xc8ic+ax7QKo4Z0RWGucU3YV+DwKR3T9SYc+3YCUQEJs8r7+Jxg==\n+  dependencies:\n+    \"@jest/environment\" \"^24.7.1\"\n+    \"@jest/fake-timers\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    jest-mock \"^24.7.0\"\n+    jest-util \"^24.7.1\"\n+    jsdom \"^11.5.1\"\n+\n+jest-environment-node@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-environment-node/-/jest-environment-node-24.7.1.tgz#fa2c047a31522a48038d26ee4f7c8fd9c1ecfe12\"\n+  integrity sha512-GJJQt1p9/C6aj6yNZMvovZuxTUd+BEJprETdvTKSb4kHcw4mFj8777USQV0FJoJ4V3djpOwA5eWyPwfq//PFBA==\n+  dependencies:\n+    \"@jest/environment\" \"^24.7.1\"\n+    \"@jest/fake-timers\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    jest-mock \"^24.7.0\"\n+    jest-util \"^24.7.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+jest-get-type@^24.3.0:\n+  version \"24.3.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-24.3.0.tgz#582cfd1a4f91b5cdad1d43d2932f816d543c65da\"\n+  integrity sha512-HYF6pry72YUlVcvUx3sEpMRwXEWGEPlJ0bSPVnB3b3n++j4phUEoSPcS6GC0pPJ9rpyPSe4cb5muFo6D39cXow==\n+\n+jest-haste-map@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-24.7.1.tgz#772e215cd84080d4bbcb759cfb668ad649a21471\"\n+  integrity sha512-g0tWkzjpHD2qa03mTKhlydbmmYiA2KdcJe762SbfFo/7NIMgBWAA0XqQlApPwkWOF7Cxoi/gUqL0i6DIoLpMBw==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    anymatch \"^2.0.0\"\n+    fb-watchman \"^2.0.0\"\n+    graceful-fs \"^4.1.15\"\n+    invariant \"^2.2.4\"\n+    jest-serializer \"^24.4.0\"\n+    jest-util \"^24.7.1\"\n+    jest-worker \"^24.6.0\"\n+    micromatch \"^3.1.10\"\n+    sane \"^4.0.3\"\n+    walker \"^1.0.7\"\n+  optionalDependencies:\n+    fsevents \"^1.2.7\"\n+\n+jest-jasmine2@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-jasmine2/-/jest-jasmine2-24.7.1.tgz#01398686dabe46553716303993f3be62e5d9d818\"\n+  integrity sha512-Y/9AOJDV1XS44wNwCaThq4Pw3gBPiOv/s6NcbOAkVRRUEPu+36L2xoPsqQXsDrxoBerqeyslpn2TpCI8Zr6J2w==\n+  dependencies:\n+    \"@babel/traverse\" \"^7.1.0\"\n+    \"@jest/environment\" \"^24.7.1\"\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    chalk \"^2.0.1\"\n+    co \"^4.6.0\"\n+    expect \"^24.7.1\"\n+    is-generator-fn \"^2.0.0\"\n+    jest-each \"^24.7.1\"\n+    jest-matcher-utils \"^24.7.0\"\n+    jest-message-util \"^24.7.1\"\n+    jest-runtime \"^24.7.1\"\n+    jest-snapshot \"^24.7.1\"\n+    jest-util \"^24.7.1\"\n+    pretty-format \"^24.7.0\"\n+    throat \"^4.0.0\"\n+\n+jest-leak-detector@^24.7.0:\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-24.7.0.tgz#323ff93ed69be12e898f5b040952f08a94288ff9\"\n+  integrity sha512-zV0qHKZGXtmPVVzT99CVEcHE9XDf+8LwiE0Ob7jjezERiGVljmqKFWpV2IkG+rkFIEUHFEkMiICu7wnoPM/RoQ==\n+  dependencies:\n+    pretty-format \"^24.7.0\"\n+\n+jest-matcher-utils@^24.7.0:\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-24.7.0.tgz#bbee1ff37bc8b2e4afcaabc91617c1526af4bcd4\"\n+  integrity sha512-158ieSgk3LNXeUhbVJYRXyTPSCqNgVXOp/GT7O94mYd3pk/8+odKTyR1JLtNOQSPzNi8NFYVONtvSWA/e1RDXg==\n+  dependencies:\n+    chalk \"^2.0.1\"\n+    jest-diff \"^24.7.0\"\n+    jest-get-type \"^24.3.0\"\n+    pretty-format \"^24.7.0\"\n+\n+jest-message-util@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-24.7.1.tgz#f1dc3a6c195647096a99d0f1dadbc447ae547018\"\n+  integrity sha512-dk0gqVtyqezCHbcbk60CdIf+8UHgD+lmRHifeH3JRcnAqh4nEyPytSc9/L1+cQyxC+ceaeP696N4ATe7L+omcg==\n+  dependencies:\n+    \"@babel/code-frame\" \"^7.0.0\"\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    \"@types/stack-utils\" \"^1.0.1\"\n+    chalk \"^2.0.1\"\n+    micromatch \"^3.1.10\"\n+    slash \"^2.0.0\"\n+    stack-utils \"^1.0.1\"\n+\n+jest-mock@^24.7.0:\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-mock/-/jest-mock-24.7.0.tgz#e49ce7262c12d7f5897b0d8af77f6db8e538023b\"\n+  integrity sha512-6taW4B4WUcEiT2V9BbOmwyGuwuAFT2G8yghF7nyNW1/2gq5+6aTqSPcS9lS6ArvEkX55vbPAS/Jarx5LSm4Fng==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+\n+jest-pnp-resolver@^1.2.1:\n+  version \"1.2.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-pnp-resolver/-/jest-pnp-resolver-1.2.1.tgz#ecdae604c077a7fbc70defb6d517c3c1c898923a\"\n+  integrity sha512-pgFw2tm54fzgYvc/OHrnysABEObZCUNFnhjoRjaVOCN8NYc032/gVjPaHD4Aq6ApkSieWtfKAFQtmDKAmhupnQ==\n+\n+jest-regex-util@^24.3.0:\n+  version \"24.3.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-24.3.0.tgz#d5a65f60be1ae3e310d5214a0307581995227b36\"\n+  integrity sha512-tXQR1NEOyGlfylyEjg1ImtScwMq8Oh3iJbGTjN7p0J23EuVX1MA8rwU69K4sLbCmwzgCUbVkm0FkSF9TdzOhtg==\n+\n+jest-resolve-dependencies@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-resolve-dependencies/-/jest-resolve-dependencies-24.7.1.tgz#cf93bbef26999488a96a2b2012f9fe7375aa378f\"\n+  integrity sha512-2Eyh5LJB2liNzfk4eo7bD1ZyBbqEJIyyrFtZG555cSWW9xVHxII2NuOkSl1yUYTAYCAmM2f2aIT5A7HzNmubyg==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    jest-regex-util \"^24.3.0\"\n+    jest-snapshot \"^24.7.1\"\n+\n+jest-resolve@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-resolve/-/jest-resolve-24.7.1.tgz#e4150198299298380a75a9fd55043fa3b9b17fde\"\n+  integrity sha512-Bgrc+/UUZpGJ4323sQyj85hV9d+ANyPNu6XfRDUcyFNX1QrZpSoM0kE4Mb2vZMAYTJZsBFzYe8X1UaOkOELSbw==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    browser-resolve \"^1.11.3\"\n+    chalk \"^2.0.1\"\n+    jest-pnp-resolver \"^1.2.1\"\n+    realpath-native \"^1.1.0\"\n+\n+jest-runner@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-runner/-/jest-runner-24.7.1.tgz#41c8a02a06aa23ea82d8bffd69d7fa98d32f85bf\"\n+  integrity sha512-aNFc9liWU/xt+G9pobdKZ4qTeG/wnJrJna3VqunziDNsWT3EBpmxXZRBMKCsNMyfy+A/XHiV+tsMLufdsNdgCw==\n+  dependencies:\n+    \"@jest/console\" \"^24.7.1\"\n+    \"@jest/environment\" \"^24.7.1\"\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    chalk \"^2.4.2\"\n+    exit \"^0.1.2\"\n+    graceful-fs \"^4.1.15\"\n+    jest-config \"^24.7.1\"\n+    jest-docblock \"^24.3.0\"\n+    jest-haste-map \"^24.7.1\"\n+    jest-jasmine2 \"^24.7.1\"\n+    jest-leak-detector \"^24.7.0\"\n+    jest-message-util \"^24.7.1\"\n+    jest-resolve \"^24.7.1\"\n+    jest-runtime \"^24.7.1\"\n+    jest-util \"^24.7.1\"\n+    jest-worker \"^24.6.0\"\n+    source-map-support \"^0.5.6\"\n+    throat \"^4.0.0\"\n+\n+jest-runtime@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-runtime/-/jest-runtime-24.7.1.tgz#2ffd70b22dd03a5988c0ab9465c85cdf5d25c597\"\n+  integrity sha512-0VAbyBy7tll3R+82IPJpf6QZkokzXPIS71aDeqh+WzPRXRCNz6StQ45otFariPdJ4FmXpDiArdhZrzNAC3sj6A==\n+  dependencies:\n+    \"@jest/console\" \"^24.7.1\"\n+    \"@jest/environment\" \"^24.7.1\"\n+    \"@jest/source-map\" \"^24.3.0\"\n+    \"@jest/transform\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    \"@types/yargs\" \"^12.0.2\"\n+    chalk \"^2.0.1\"\n+    exit \"^0.1.2\"\n+    glob \"^7.1.3\"\n+    graceful-fs \"^4.1.15\"\n+    jest-config \"^24.7.1\"\n+    jest-haste-map \"^24.7.1\"\n+    jest-message-util \"^24.7.1\"\n+    jest-mock \"^24.7.0\"\n+    jest-regex-util \"^24.3.0\"\n+    jest-resolve \"^24.7.1\"\n+    jest-snapshot \"^24.7.1\"\n+    jest-util \"^24.7.1\"\n+    jest-validate \"^24.7.0\"\n+    realpath-native \"^1.1.0\"\n+    slash \"^2.0.0\"\n+    strip-bom \"^3.0.0\"\n+    yargs \"^12.0.2\"\n+\n+jest-serializer@^24.4.0:\n+  version \"24.4.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-24.4.0.tgz#f70c5918c8ea9235ccb1276d232e459080588db3\"\n+  integrity sha512-k//0DtglVstc1fv+GY/VHDIjrtNjdYvYjMlbLUed4kxrE92sIUewOi5Hj3vrpB8CXfkJntRPDRjCrCvUhBdL8Q==\n+\n+jest-snapshot@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-24.7.1.tgz#bd5a35f74aedff070975e9e9c90024f082099568\"\n+  integrity sha512-8Xk5O4p+JsZZn4RCNUS3pxA+ORKpEKepE+a5ejIKrId9CwrVN0NY+vkqEkXqlstA5NMBkNahXkR/4qEBy0t5yA==\n+  dependencies:\n+    \"@babel/types\" \"^7.0.0\"\n+    \"@jest/types\" \"^24.7.0\"\n+    chalk \"^2.0.1\"\n+    expect \"^24.7.1\"\n+    jest-diff \"^24.7.0\"\n+    jest-matcher-utils \"^24.7.0\"\n+    jest-message-util \"^24.7.1\"\n+    jest-resolve \"^24.7.1\"\n+    mkdirp \"^0.5.1\"\n+    natural-compare \"^1.4.0\"\n+    pretty-format \"^24.7.0\"\n+    semver \"^5.5.0\"\n+\n+jest-util@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-util/-/jest-util-24.7.1.tgz#b4043df57b32a23be27c75a2763d8faf242038ff\"\n+  integrity sha512-/KilOue2n2rZ5AnEBYoxOXkeTu6vi7cjgQ8MXEkih0oeAXT6JkS3fr7/j8+engCjciOU1Nq5loMSKe0A1oeX0A==\n+  dependencies:\n+    \"@jest/console\" \"^24.7.1\"\n+    \"@jest/fake-timers\" \"^24.7.1\"\n+    \"@jest/source-map\" \"^24.3.0\"\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    callsites \"^3.0.0\"\n+    chalk \"^2.0.1\"\n+    graceful-fs \"^4.1.15\"\n+    is-ci \"^2.0.0\"\n+    mkdirp \"^0.5.1\"\n+    slash \"^2.0.0\"\n+    source-map \"^0.6.0\"\n+\n+jest-validate@^24.7.0:\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-validate/-/jest-validate-24.7.0.tgz#70007076f338528ee1b1c8a8258b1b0bb982508d\"\n+  integrity sha512-cgai/gts9B2chz1rqVdmLhzYxQbgQurh1PEQSvSgPZ8KGa1AqXsqC45W5wKEwzxKrWqypuQrQxnF4+G9VejJJA==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    camelcase \"^5.0.0\"\n+    chalk \"^2.0.1\"\n+    jest-get-type \"^24.3.0\"\n+    leven \"^2.1.0\"\n+    pretty-format \"^24.7.0\"\n+\n+jest-watcher@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest-watcher/-/jest-watcher-24.7.1.tgz#e161363d7f3f4e1ef3d389b7b3a0aad247b673f5\"\n+  integrity sha512-Wd6TepHLRHVKLNPacEsBwlp9raeBIO+01xrN24Dek4ggTS8HHnOzYSFnvp+6MtkkJ3KfMzy220KTi95e2rRkrw==\n+  dependencies:\n+    \"@jest/test-result\" \"^24.7.1\"\n+    \"@jest/types\" \"^24.7.0\"\n+    \"@types/yargs\" \"^12.0.9\"\n+    ansi-escapes \"^3.0.0\"\n+    chalk \"^2.0.1\"\n+    jest-util \"^24.7.1\"\n+    string-length \"^2.0.0\"\n+\n+jest-worker@^24.6.0:\n+  version \"24.6.0\"\n+  resolved \"https://registry.yarnpkg.com/jest-worker/-/jest-worker-24.6.0.tgz#7f81ceae34b7cde0c9827a6980c35b7cdc0161b3\"\n+  integrity sha512-jDwgW5W9qGNvpI1tNnvajh0a5IE/PuGLFmHk6aR/BZFz8tSgGw17GsDPXAJ6p91IvYDjOw8GpFbvvZGAK+DPQQ==\n+  dependencies:\n+    merge-stream \"^1.0.1\"\n+    supports-color \"^6.1.0\"\n+\n+jest@^24.7.1:\n+  version \"24.7.1\"\n+  resolved \"https://registry.yarnpkg.com/jest/-/jest-24.7.1.tgz#0d94331cf510c75893ee32f87d7321d5bf8f2501\"\n+  integrity sha512-AbvRar5r++izmqo5gdbAjTeA6uNRGoNRuj5vHB0OnDXo2DXWZJVuaObiGgtlvhKb+cWy2oYbQSfxv7Q7GjnAtA==\n+  dependencies:\n+    import-local \"^2.0.0\"\n+    jest-cli \"^24.7.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+js-yaml@^3.12.0, js-yaml@^3.13.0:\n",
            "-": "-js-yaml@^3.13.0:\n"
          },
          {
            "+": "+jsbn@~0.1.0:\n+  version \"0.1.1\"\n+  resolved \"https://registry.yarnpkg.com/jsbn/-/jsbn-0.1.1.tgz#a5e654c2e5a2deb5f201d96cefbca80c0ef2f513\"\n+  integrity sha1-peZUwuWi3rXyAdls77yoDA7y9RM=\n+\n+jsdom@^11.5.1:\n+  version \"11.12.0\"\n+  resolved \"https://registry.yarnpkg.com/jsdom/-/jsdom-11.12.0.tgz#1a80d40ddd378a1de59656e9e6dc5a3ba8657bc8\"\n+  integrity sha512-y8Px43oyiBM13Zc1z780FrfNLJCXTL40EWlty/LXUtcjykRBNgLlCjWXpfSPBl2iv+N7koQN+dvqszHZgT/Fjw==\n+  dependencies:\n+    abab \"^2.0.0\"\n+    acorn \"^5.5.3\"\n+    acorn-globals \"^4.1.0\"\n+    array-equal \"^1.0.0\"\n+    cssom \">= 0.3.2 < 0.4.0\"\n+    cssstyle \"^1.0.0\"\n+    data-urls \"^1.0.0\"\n+    domexception \"^1.0.1\"\n+    escodegen \"^1.9.1\"\n+    html-encoding-sniffer \"^1.0.2\"\n+    left-pad \"^1.3.0\"\n+    nwsapi \"^2.0.7\"\n+    parse5 \"4.0.0\"\n+    pn \"^1.1.0\"\n+    request \"^2.87.0\"\n+    request-promise-native \"^1.0.5\"\n+    sax \"^1.2.4\"\n+    symbol-tree \"^3.2.2\"\n+    tough-cookie \"^2.3.4\"\n+    w3c-hr-time \"^1.0.1\"\n+    webidl-conversions \"^4.0.2\"\n+    whatwg-encoding \"^1.0.3\"\n+    whatwg-mimetype \"^2.1.0\"\n+    whatwg-url \"^6.4.1\"\n+    ws \"^5.2.0\"\n+    xml-name-validator \"^3.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+json-schema@0.2.3:\n+  version \"0.2.3\"\n+  resolved \"https://registry.yarnpkg.com/json-schema/-/json-schema-0.2.3.tgz#b480c892e59a2f05954ce727bd3f2a4e882f9e13\"\n+  integrity sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=\n+\n+json-stringify-safe@~5.0.1:\n+  version \"5.0.1\"\n+  resolved \"https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb\"\n+  integrity sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=\n+\n",
            "-": ""
          },
          {
            "+": "+jsprim@^1.2.2:\n+  version \"1.4.1\"\n+  resolved \"https://registry.yarnpkg.com/jsprim/-/jsprim-1.4.1.tgz#313e66bc1e5cc06e438bc1b7499c2e5c56acb6a2\"\n+  integrity sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=\n+  dependencies:\n+    assert-plus \"1.0.0\"\n+    extsprintf \"1.3.0\"\n+    json-schema \"0.2.3\"\n+    verror \"1.10.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+kleur@^3.0.2:\n+  version \"3.0.3\"\n+  resolved \"https://registry.yarnpkg.com/kleur/-/kleur-3.0.3.tgz#a79c9ecc86ee1ce3fa6206d1216c501f147fc07e\"\n+  integrity sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==\n+\n+lcid@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/lcid/-/lcid-2.0.0.tgz#6ef5d2df60e52f82eb228a4c373e8d1f397253cf\"\n+  integrity sha512-avPEb8P8EGnwXKClwsNUgryVjllcRqtMYa49NTsbQagYuT1DcXnl1915oxWjoyGrXR6zH/Y0Zc96xWsPcoDKeA==\n+  dependencies:\n+    invert-kv \"^2.0.0\"\n+\n+left-pad@^1.3.0:\n+  version \"1.3.0\"\n+  resolved \"https://registry.yarnpkg.com/left-pad/-/left-pad-1.3.0.tgz#5b8a3a7765dfe001261dde915589e782f8c94d1e\"\n+  integrity sha512-XI5MPzVNApjAyhQzphX8BkmKsKUxD4LdyK24iZeQGinBN9yTQT3bFlCBy/aVx2HrNcqQGsdot8ghrjyrvMCoEA==\n+\n+leven@^2.1.0:\n+  version \"2.1.0\"\n+  resolved \"https://registry.yarnpkg.com/leven/-/leven-2.1.0.tgz#c2e7a9f772094dee9d34202ae8acce4687875580\"\n+  integrity sha1-wuep93IJTe6dNCAq6KzORoeHVYA=\n+\n+levn@~0.3.0:\n+  version \"0.3.0\"\n+  resolved \"https://registry.yarnpkg.com/levn/-/levn-0.3.0.tgz#3b09924edf9f083c0490fdd4c0bc4421e04764ee\"\n+  integrity sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=\n+  dependencies:\n+    prelude-ls \"~1.1.2\"\n+    type-check \"~0.3.2\"\n+\n",
            "-": ""
          },
          {
            "+": "+load-json-file@^4.0.0:\n+  version \"4.0.0\"\n+  resolved \"https://registry.yarnpkg.com/load-json-file/-/load-json-file-4.0.0.tgz#2f5f45ab91e33216234fd53adab668eb4ec0993b\"\n+  integrity sha1-L19Fq5HjMhYjT9U62rZo607AmTs=\n+  dependencies:\n+    graceful-fs \"^4.1.2\"\n+    parse-json \"^4.0.0\"\n+    pify \"^3.0.0\"\n+    strip-bom \"^3.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+lodash.escape@^4.0.1:\n+  version \"4.0.1\"\n+  resolved \"https://registry.yarnpkg.com/lodash.escape/-/lodash.escape-4.0.1.tgz#c9044690c21e04294beaa517712fded1fa88de98\"\n+  integrity sha1-yQRGkMIeBClL6qUXcS/e0fqI3pg=\n+\n+lodash.flattendeep@^4.4.0:\n+  version \"4.4.0\"\n+  resolved \"https://registry.yarnpkg.com/lodash.flattendeep/-/lodash.flattendeep-4.4.0.tgz#fb030917f86a3134e5bc9bec0d69e0013ddfedb2\"\n+  integrity sha1-+wMJF/hqMTTlvJvsDWngAT3f7bI=\n+\n+lodash.isequal@^4.5.0:\n+  version \"4.5.0\"\n+  resolved \"https://registry.yarnpkg.com/lodash.isequal/-/lodash.isequal-4.5.0.tgz#415c4478f2bcc30120c22ce10ed3226f7d3e18e0\"\n+  integrity sha1-QVxEePK8wwEgwizhDtMib30+GOA=\n+\n+lodash.sortby@^4.7.0:\n+  version \"4.7.0\"\n+  resolved \"https://registry.yarnpkg.com/lodash.sortby/-/lodash.sortby-4.7.0.tgz#edd14c824e2cc9c1e0b0a1b42bb5210516a42438\"\n+  integrity sha1-7dFMgk4sycHgsKG0K7UhBRakJDg=\n+\n+lodash@^4.15.0, lodash@^4.17.10, lodash@^4.17.11:\n",
            "-": "-lodash@^4.17.10, lodash@^4.17.11:\n"
          },
          {
            "+": "+loose-envify@^1.0.0, loose-envify@^1.1.0, loose-envify@^1.4.0:\n",
            "-": "-loose-envify@^1.0.0:\n"
          },
          {
            "+": "+make-dir@^1.3.0:\n+  version \"1.3.0\"\n+  resolved \"https://registry.yarnpkg.com/make-dir/-/make-dir-1.3.0.tgz#79c1033b80515bd6d24ec9933e860ca75ee27f0c\"\n+  integrity sha512-2w31R7SJtieJJnQtGc7RVL2StM2vGYVfqUOvUDxH6bC6aJTxPxTF0GnIgCyu7tjockiUWAYQRbxa7vKn34s5sQ==\n+  dependencies:\n+    pify \"^3.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+makeerror@1.0.x:\n+  version \"1.0.11\"\n+  resolved \"https://registry.yarnpkg.com/makeerror/-/makeerror-1.0.11.tgz#e01a5c9109f2af79660e4e8b9587790184f5a96c\"\n+  integrity sha1-4BpckQnyr3lmDk6LlYd5AYT1qWw=\n+  dependencies:\n+    tmpl \"1.0.x\"\n+\n",
            "-": ""
          },
          {
            "+": "+map-age-cleaner@^0.1.1:\n+  version \"0.1.3\"\n+  resolved \"https://registry.yarnpkg.com/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz#7d583a7306434c055fe474b0f45078e6e1b4b92a\"\n+  integrity sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==\n+  dependencies:\n+    p-defer \"^1.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+mem@^4.0.0:\n+  version \"4.3.0\"\n+  resolved \"https://registry.yarnpkg.com/mem/-/mem-4.3.0.tgz#461af497bc4ae09608cdb2e60eefb69bff744178\"\n+  integrity sha512-qX2bG48pTqYRVmDB37rn/6PT7LcR8T7oAX3bf99u1Tt1nzxYfxkgqDwUwolPlXweM0XzBOBFzSx4kfp7KP1s/w==\n+  dependencies:\n+    map-age-cleaner \"^0.1.1\"\n+    mimic-fn \"^2.0.0\"\n+    p-is-promise \"^2.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+merge-stream@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/merge-stream/-/merge-stream-1.0.1.tgz#4041202d508a342ba00174008df0c251b8c135e1\"\n+  integrity sha1-QEEgLVCKNCugAXQAjfDCUbjBNeE=\n+  dependencies:\n+    readable-stream \"^2.0.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+mime-db@~1.38.0:\n+  version \"1.38.0\"\n+  resolved \"https://registry.yarnpkg.com/mime-db/-/mime-db-1.38.0.tgz#1a2aab16da9eb167b49c6e4df2d9c68d63d8e2ad\"\n+  integrity sha512-bqVioMFFzc2awcdJZIzR3HjZFX20QhilVS7hytkKrv7xFAn8bM1gzc/FOX2awLISvWe0PV8ptFKcon+wZ5qYkg==\n+\n+mime-types@^2.1.12, mime-types@~2.1.19:\n+  version \"2.1.22\"\n+  resolved \"https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.22.tgz#fe6b355a190926ab7698c9a0556a11199b2199bd\"\n+  integrity sha512-aGl6TZGnhm/li6F7yx82bJiBZwgiEa4Hf6CNr8YO+r5UHr53tSTYZb102zyU50DOWWKeOv0uQLRL0/9EiKWCog==\n+  dependencies:\n+    mime-db \"~1.38.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+mimic-fn@^2.0.0:\n+  version \"2.1.0\"\n+  resolved \"https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b\"\n+  integrity sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\n+\n",
            "-": ""
          },
          {
            "+": "+minimatch@^3.0.3, minimatch@^3.0.4:\n",
            "-": "-minimatch@^3.0.4:\n"
          },
          {
            "+": "+minimist@^1.1.1, minimist@^1.2.0:\n",
            "-": "-minimist@^1.2.0:\n"
          },
          {
            "+": "+minimist@~0.0.1:\n+  version \"0.0.10\"\n+  resolved \"https://registry.yarnpkg.com/minimist/-/minimist-0.0.10.tgz#de3f98543dbf96082be48ad1a0c7cda836301dcf\"\n+  integrity sha1-3j+YVD2/lggr5IrRoMfNqDYwHc8=\n+\n",
            "-": ""
          },
          {
            "+": "+moo@^0.4.3:\n+  version \"0.4.3\"\n+  resolved \"https://registry.yarnpkg.com/moo/-/moo-0.4.3.tgz#3f847a26f31cf625a956a87f2b10fbc013bfd10e\"\n+  integrity sha512-gFD2xGCl8YFgGHsqJ9NKRVdwlioeW3mI1iqfLNYQOv0+6JRwG58Zk9DIGQgyIaffSYaO1xsKnMaYzzNr1KyIAw==\n+\n",
            "-": ""
          },
          {
            "+": "+natural-compare@^1.4.0:\n+  version \"1.4.0\"\n+  resolved \"https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7\"\n+  integrity sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=\n+\n+nearley@^2.7.10:\n+  version \"2.16.0\"\n+  resolved \"https://registry.yarnpkg.com/nearley/-/nearley-2.16.0.tgz#77c297d041941d268290ec84b739d0ee297e83a7\"\n+  integrity sha512-Tr9XD3Vt/EujXbZBv6UAHYoLUSMQAxSsTnm9K3koXzjzNWY195NqALeyrzLZBKzAkL3gl92BcSogqrHjD8QuUg==\n+  dependencies:\n+    commander \"^2.19.0\"\n+    moo \"^0.4.3\"\n+    railroad-diagrams \"^1.0.0\"\n+    randexp \"0.4.6\"\n+    semver \"^5.4.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+neo-async@^2.5.0, neo-async@^2.6.0:\n",
            "-": "-neo-async@^2.5.0:\n"
          },
          {
            "+": "+node-int64@^0.4.0:\n+  version \"0.4.0\"\n+  resolved \"https://registry.yarnpkg.com/node-int64/-/node-int64-0.4.0.tgz#87a9065cdb355d3182d8f94ce11188b825c68a3b\"\n+  integrity sha1-h6kGXNs1XTGC2PlM4RGIuCXGijs=\n+\n",
            "-": ""
          },
          {
            "+": "+node-modules-regexp@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/node-modules-regexp/-/node-modules-regexp-1.0.0.tgz#8d9dbe28964a4ac5712e9131642107c71e90ec40\"\n+  integrity sha1-jZ2+KJZKSsVxLpExZCEHxx6Q7EA=\n+\n+node-notifier@^5.2.1:\n+  version \"5.4.0\"\n+  resolved \"https://registry.yarnpkg.com/node-notifier/-/node-notifier-5.4.0.tgz#7b455fdce9f7de0c63538297354f3db468426e6a\"\n+  integrity sha512-SUDEb+o71XR5lXSTyivXd9J7fCloE3SyP4lSgt3lU2oSANiox+SxlNRGPjDKrwU1YN3ix2KN/VGGCg0t01rttQ==\n+  dependencies:\n+    growly \"^1.3.0\"\n+    is-wsl \"^1.1.0\"\n+    semver \"^5.5.0\"\n+    shellwords \"^0.1.1\"\n+    which \"^1.3.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+nth-check@~1.0.1:\n+  version \"1.0.2\"\n+  resolved \"https://registry.yarnpkg.com/nth-check/-/nth-check-1.0.2.tgz#b2bd295c37e3dd58a3bf0700376663ba4d9cf05c\"\n+  integrity sha512-WeBOdju8SnzPN5vTUJYxYUxLeXpCaVP5i5e0LF8fg7WORF2Wd7wFX/pk0tYZk7s8T+J7VLy0Da6J1+wCT0AtHg==\n+  dependencies:\n+    boolbase \"~1.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+nwsapi@^2.0.7:\n+  version \"2.1.3\"\n+  resolved \"https://registry.yarnpkg.com/nwsapi/-/nwsapi-2.1.3.tgz#25f3a5cec26c654f7376df6659cdf84b99df9558\"\n+  integrity sha512-RowAaJGEgYXEZfQ7tvvdtAQUKPyTR6T6wNu0fwlNsGQYr/h3yQc6oI8WnVZh3Y/Sylwc+dtAlvPqfFZjhTyk3A==\n+\n+oauth-sign@~0.9.0:\n+  version \"0.9.0\"\n+  resolved \"https://registry.yarnpkg.com/oauth-sign/-/oauth-sign-0.9.0.tgz#47a7b016baa68b5fa0ecf3dee08a85c679ac6455\"\n+  integrity sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==\n+\n+object-assign@^4.0.1, object-assign@^4.1.0, object-assign@^4.1.1:\n",
            "-": "-object-assign@^4.0.1, object-assign@^4.1.0:\n"
          },
          {
            "+": "+object-inspect@^1.6.0:\n+  version \"1.6.0\"\n+  resolved \"https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.6.0.tgz#c70b6cbf72f274aab4c34c0c82f5167bf82cf15b\"\n+  integrity sha512-GJzfBZ6DgDAmnuaM3104jR4s1Myxr3Y3zfIyN4z3UdqN69oSRacNK8UhnobDdC+7J2AHCjGwxQubNJfE70SXXQ==\n+\n+object-is@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/object-is/-/object-is-1.0.1.tgz#0aa60ec9989a0b3ed795cf4d06f62cf1ad6539b6\"\n+  integrity sha1-CqYOyZiaCz7Xlc9NBvYs8a1lObY=\n+\n+object-keys@^1.0.11, object-keys@^1.0.12:\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/object-keys/-/object-keys-1.1.1.tgz#1c47f272df277f3b1daf061677d9c82e2322c60e\"\n+  integrity sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==\n+\n",
            "-": ""
          },
          {
            "+": "+object.assign@^4.1.0:\n+  version \"4.1.0\"\n+  resolved \"https://registry.yarnpkg.com/object.assign/-/object.assign-4.1.0.tgz#968bf1100d7956bb3ca086f006f846b3bc4008da\"\n+  integrity sha512-exHJeq6kBKj58mqGyTQ9DFvrZC/eR6OwxzoM9YRoGBqrXYonaFyGiFMuc9VZrXf7DarreEwMpurG3dd+CNyW5w==\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    function-bind \"^1.1.1\"\n+    has-symbols \"^1.0.0\"\n+    object-keys \"^1.0.11\"\n+\n+object.entries@^1.0.4, object.entries@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/object.entries/-/object.entries-1.1.0.tgz#2024fc6d6ba246aee38bdb0ffd5cfbcf371b7519\"\n+  integrity sha512-l+H6EQ8qzGRxbkHOd5I/aHRhHDKoQXQ8g0BYt4uSweQU1/J6dZUOyWh9a2Vky35YCKjzmgxOzta2hH6kf9HuXA==\n+  dependencies:\n+    define-properties \"^1.1.3\"\n+    es-abstract \"^1.12.0\"\n+    function-bind \"^1.1.1\"\n+    has \"^1.0.3\"\n+\n+object.fromentries@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/object.fromentries/-/object.fromentries-2.0.0.tgz#49a543d92151f8277b3ac9600f1e930b189d30ab\"\n+  integrity sha512-9iLiI6H083uiqUuvzyY6qrlmc/Gz8hLQFOcb/Ri/0xXFkSNS3ctV+CbE6yM2+AnkYfOB3dGjdzC0wrMLIhQICA==\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    es-abstract \"^1.11.0\"\n+    function-bind \"^1.1.1\"\n+    has \"^1.0.1\"\n+\n+object.getownpropertydescriptors@^2.0.3:\n+  version \"2.0.3\"\n+  resolved \"https://registry.yarnpkg.com/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.0.3.tgz#8758c846f5b407adab0f236e0986f14b051caa16\"\n+  integrity sha1-h1jIRvW0B62rDyNuCYbxSwUcqhY=\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    es-abstract \"^1.5.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+object.values@^1.0.4, object.values@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/object.values/-/object.values-1.1.0.tgz#bf6810ef5da3e5325790eaaa2be213ea84624da9\"\n+  integrity sha512-8mf0nKLAoFX6VlNVdhGj31SVYpaNFtUnuoOXWyFEstsWRgU837AK+JYM0iAxwkSzGRbwn8cbFmgbyxj1j4VbXg==\n+  dependencies:\n+    define-properties \"^1.1.3\"\n+    es-abstract \"^1.12.0\"\n+    function-bind \"^1.1.1\"\n+    has \"^1.0.3\"\n+\n",
            "-": ""
          },
          {
            "+": "+optimist@^0.6.1:\n+  version \"0.6.1\"\n+  resolved \"https://registry.yarnpkg.com/optimist/-/optimist-0.6.1.tgz#da3ea74686fa21a19a111c326e90eb15a0196686\"\n+  integrity sha1-2j6nRob6IaGaERwybpDrFaAZZoY=\n+  dependencies:\n+    minimist \"~0.0.1\"\n+    wordwrap \"~0.0.2\"\n+\n+optionator@^0.8.1:\n+  version \"0.8.2\"\n+  resolved \"https://registry.yarnpkg.com/optionator/-/optionator-0.8.2.tgz#364c5e409d3f4d6301d6c0b4c05bba50180aeb64\"\n+  integrity sha1-NkxeQJ0/TWMB1sC0wFu6UBgK62Q=\n+  dependencies:\n+    deep-is \"~0.1.3\"\n+    fast-levenshtein \"~2.0.4\"\n+    levn \"~0.3.0\"\n+    prelude-ls \"~1.1.2\"\n+    type-check \"~0.3.2\"\n+    wordwrap \"~1.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+os-locale@^3.0.0:\n+  version \"3.1.0\"\n+  resolved \"https://registry.yarnpkg.com/os-locale/-/os-locale-3.1.0.tgz#a802a6ee17f24c10483ab9935719cef4ed16bf1a\"\n+  integrity sha512-Z8l3R4wYWM40/52Z+S265okfFj8Kt2cC2MKY+xNi3kFs+XGI7WXu/I309QQQYbRW4ijiZ+yxs9pqEhJh0DqW3Q==\n+  dependencies:\n+    execa \"^1.0.0\"\n+    lcid \"^2.0.0\"\n+    mem \"^4.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+p-defer@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/p-defer/-/p-defer-1.0.0.tgz#9f6eb182f6c9aa8cd743004a7d4f96b196b0fb0c\"\n+  integrity sha1-n26xgvbJqozXQwBKfU+WsZaw+ww=\n+\n+p-each-series@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/p-each-series/-/p-each-series-1.0.0.tgz#930f3d12dd1f50e7434457a22cd6f04ac6ad7f71\"\n+  integrity sha1-kw89Et0fUOdDRFeiLNbwSsatf3E=\n+  dependencies:\n+    p-reduce \"^1.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+p-is-promise@^2.0.0:\n+  version \"2.1.0\"\n+  resolved \"https://registry.yarnpkg.com/p-is-promise/-/p-is-promise-2.1.0.tgz#918cebaea248a62cf7ffab8e3bca8c5f882fc42e\"\n+  integrity sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\n+\n",
            "-": ""
          },
          {
            "+": "+p-reduce@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/p-reduce/-/p-reduce-1.0.0.tgz#18c2b0dd936a4690a529f8231f58a0fdb6a47dfa\"\n+  integrity sha1-GMKw3ZNqRpClKfgjH1ig/bakffo=\n+\n",
            "-": ""
          },
          {
            "+": "+parse5@4.0.0:\n+  version \"4.0.0\"\n+  resolved \"https://registry.yarnpkg.com/parse5/-/parse5-4.0.0.tgz#6d78656e3da8d78b4ec0b906f7c08ef1dfe3f608\"\n+  integrity sha512-VrZ7eOd3T1Fk4XWNXMgiGBK/z0MG48BWG2uQNU4I72fkQuKUTZpl+u9k+CxEG0twMVzSmXEEz12z5Fnw1jIQFA==\n+\n+parse5@^3.0.1:\n+  version \"3.0.3\"\n+  resolved \"https://registry.yarnpkg.com/parse5/-/parse5-3.0.3.tgz#042f792ffdd36851551cf4e9e066b3874ab45b5c\"\n+  integrity sha512-rgO9Zg5LLLkfJF9E6CCmXlSE4UVceloys8JrFqCcHloC3usd/kJCyPDwH2SOlzix2j3xaP9sUX3e8+kvkuleAA==\n+  dependencies:\n+    \"@types/node\" \"*\"\n+\n",
            "-": ""
          },
          {
            "+": "+path-type@^3.0.0:\n+  version \"3.0.0\"\n+  resolved \"https://registry.yarnpkg.com/path-type/-/path-type-3.0.0.tgz#cef31dc8e0a1a3bb0d105c0cd97cf3bf47f4e36f\"\n+  integrity sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==\n+  dependencies:\n+    pify \"^3.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+performance-now@^2.1.0:\n+  version \"2.1.0\"\n+  resolved \"https://registry.yarnpkg.com/performance-now/-/performance-now-2.1.0.tgz#6309f4e0e5fa913ec1c69307ae364b4b377c9e7b\"\n+  integrity sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=\n+\n",
            "-": ""
          },
          {
            "+": "+pirates@^4.0.1:\n+  version \"4.0.1\"\n+  resolved \"https://registry.yarnpkg.com/pirates/-/pirates-4.0.1.tgz#643a92caf894566f91b2b986d2c66950a8e2fb87\"\n+  integrity sha512-WuNqLTbMI3tmfef2TKxlQmAiLHKtFhlsCZnPIpuv2Ow0RDVO8lfy1Opf4NUzlMXLjPl+Men7AuVdX6TA+s+uGA==\n+  dependencies:\n+    node-modules-regexp \"^1.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+pn@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/pn/-/pn-1.1.0.tgz#e2f4cef0e219f463c179ab37463e4e1ecdccbafb\"\n+  integrity sha512-2qHaIQr2VLRFoxe2nASzsV6ef4yOOH+Fi9FBOVH6cqeSgUnoyySPZkxzLuzd+RYOQTRpROA0ztTMqxROKSb/nA==\n+\n",
            "-": ""
          },
          {
            "+": "+prelude-ls@~1.1.2:\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54\"\n+  integrity sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=\n+\n",
            "-": ""
          },
          {
            "+": "+pretty-format@^24.5.0, pretty-format@^24.7.0:\n+  version \"24.7.0\"\n+  resolved \"https://registry.yarnpkg.com/pretty-format/-/pretty-format-24.7.0.tgz#d23106bc2edcd776079c2daa5da02bcb12ed0c10\"\n+  integrity sha512-apen5cjf/U4dj7tHetpC7UEFCvtAgnNZnBDkfPv3fokzIqyOJckAG9OlAPC1BlFALnqT/lGB2tl9EJjlK6eCsA==\n+  dependencies:\n+    \"@jest/types\" \"^24.7.0\"\n+    ansi-regex \"^4.0.0\"\n+    ansi-styles \"^3.2.0\"\n+    react-is \"^16.8.4\"\n+\n",
            "-": ""
          },
          {
            "+": "+prompts@^2.0.1:\n+  version \"2.0.4\"\n+  resolved \"https://registry.yarnpkg.com/prompts/-/prompts-2.0.4.tgz#179f9d4db3128b9933aa35f93a800d8fce76a682\"\n+  integrity sha512-HTzM3UWp/99A0gk51gAegwo1QRYA7xjcZufMNe33rCclFszUYAuHe1fIN/3ZmiHeGPkUsNaRyQm1hHOfM0PKxA==\n+  dependencies:\n+    kleur \"^3.0.2\"\n+    sisteransi \"^1.0.0\"\n+\n+prop-types-exact@^1.2.0:\n+  version \"1.2.0\"\n+  resolved \"https://registry.yarnpkg.com/prop-types-exact/-/prop-types-exact-1.2.0.tgz#825d6be46094663848237e3925a98c6e944e9869\"\n+  integrity sha512-K+Tk3Kd9V0odiXFP9fwDHUYRyvK3Nun3GVyPapSIs5OBkITAm15W0CPFD/YKTkMUAbc0b9CUwRQp2ybiBIq+eA==\n+  dependencies:\n+    has \"^1.0.3\"\n+    object.assign \"^4.1.0\"\n+    reflect.ownkeys \"^0.2.0\"\n+\n+prop-types@^15.6.2, prop-types@^15.7.2:\n+  version \"15.7.2\"\n+  resolved \"https://registry.yarnpkg.com/prop-types/-/prop-types-15.7.2.tgz#52c41e75b8c87e72b9d9360e0206b99dcbffa6c5\"\n+  integrity sha512-8QQikdH7//R2vurIJSutZ1smHYTcLpRWEOlHnzcWHmBYrOGUysKwSsrC89BCiFj3CbrfJ/nXFdJepOVrY1GCHQ==\n+  dependencies:\n+    loose-envify \"^1.4.0\"\n+    object-assign \"^4.1.1\"\n+    react-is \"^16.8.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+psl@^1.1.24, psl@^1.1.28:\n+  version \"1.1.31\"\n+  resolved \"https://registry.yarnpkg.com/psl/-/psl-1.1.31.tgz#e9aa86d0101b5b105cbe93ac6b784cd547276184\"\n+  integrity sha512-/6pt4+C+T+wZUieKR620OpzN/LlnNKuWjy1iFLQ/UG35JqHlR/89MP1d96dUfkf6Dne3TuLQzOYEYshJ+Hx8mw==\n+\n",
            "-": ""
          },
          {
            "+": "+punycode@^1.2.4, punycode@^1.4.1:\n",
            "-": "-punycode@^1.2.4:\n"
          },
          {
            "+": "+punycode@^2.1.0, punycode@^2.1.1:\n",
            "-": "-punycode@^2.1.0:\n"
          },
          {
            "+": "+qs@~6.5.2:\n+  version \"6.5.2\"\n+  resolved \"https://registry.yarnpkg.com/qs/-/qs-6.5.2.tgz#cb3ae806e8740444584ef154ce8ee98d403f3e36\"\n+  integrity sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==\n+\n",
            "-": ""
          },
          {
            "+": "+raf@^3.4.0:\n+  version \"3.4.1\"\n+  resolved \"https://registry.yarnpkg.com/raf/-/raf-3.4.1.tgz#0742e99a4a6552f445d73e3ee0328af0ff1ede39\"\n+  integrity sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==\n+  dependencies:\n+    performance-now \"^2.1.0\"\n+\n+railroad-diagrams@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/railroad-diagrams/-/railroad-diagrams-1.0.0.tgz#eb7e6267548ddedfb899c1b90e57374559cddb7e\"\n+  integrity sha1-635iZ1SN3t+4mcG5Dlc3RVnN234=\n+\n+randexp@0.4.6:\n+  version \"0.4.6\"\n+  resolved \"https://registry.yarnpkg.com/randexp/-/randexp-0.4.6.tgz#e986ad5e5e31dae13ddd6f7b3019aa7c87f60ca3\"\n+  integrity sha512-80WNmd9DA0tmZrw9qQa62GPPWfuXJknrmVmLcxvq4uZBdYqb1wYoKTmnlGUchvVWe0XiLupYkBoXVOxz3C8DYQ==\n+  dependencies:\n+    discontinuous-range \"1.0.0\"\n+    ret \"~0.1.10\"\n+\n",
            "-": ""
          },
          {
            "+": "+react-dom@^16.8.6:\n+  version \"16.8.6\"\n+  resolved \"https://registry.yarnpkg.com/react-dom/-/react-dom-16.8.6.tgz#71d6303f631e8b0097f56165ef608f051ff6e10f\"\n+  integrity sha512-1nL7PIq9LTL3fthPqwkvr2zY7phIPjYrT0jp4HjyEQrEROnw4dG41VVwi/wfoCneoleqrNX7iAD+pXebJZwrwA==\n+  dependencies:\n+    loose-envify \"^1.1.0\"\n+    object-assign \"^4.1.1\"\n+    prop-types \"^15.6.2\"\n+    scheduler \"^0.13.6\"\n+\n+react-is@^16.8.1, react-is@^16.8.4, react-is@^16.8.6:\n+  version \"16.8.6\"\n+  resolved \"https://registry.yarnpkg.com/react-is/-/react-is-16.8.6.tgz#5bbc1e2d29141c9fbdfed456343fe2bc430a6a16\"\n+  integrity sha512-aUk3bHfZ2bRSVFFbbeVS4i+lNPZr3/WM5jT2J5omUVV1zzcs1nAaf3l51ctA5FFvCRbhrH0bdAsRRQddFJZPtA==\n+\n+react-test-renderer@^16.0.0-0:\n+  version \"16.8.6\"\n+  resolved \"https://registry.yarnpkg.com/react-test-renderer/-/react-test-renderer-16.8.6.tgz#188d8029b8c39c786f998aa3efd3ffe7642d5ba1\"\n+  integrity sha512-H2srzU5IWYT6cZXof6AhUcx/wEyJddQ8l7cLM/F7gDXYyPr4oq+vCIxJYXVGhId1J706sqziAjuOEjyNkfgoEw==\n+  dependencies:\n+    object-assign \"^4.1.1\"\n+    prop-types \"^15.6.2\"\n+    react-is \"^16.8.6\"\n+    scheduler \"^0.13.6\"\n+\n+react-testing-library@^6.1.2:\n+  version \"6.1.2\"\n+  resolved \"https://registry.yarnpkg.com/react-testing-library/-/react-testing-library-6.1.2.tgz#f6bba6eeecedac736eb00b22b4c70bae04535a4f\"\n+  integrity sha512-z69lhRDGe7u/NOjDCeFRoe1cB5ckJ4656n0tj/Fdcr6OoBUu7q9DBw0ftR7v5i3GRpdSWelnvl+feZFOyXyxwg==\n+  dependencies:\n+    \"@babel/runtime\" \"^7.4.2\"\n+    dom-testing-library \"^3.19.0\"\n+\n+react@^16.8.6:\n+  version \"16.8.6\"\n+  resolved \"https://registry.yarnpkg.com/react/-/react-16.8.6.tgz#ad6c3a9614fd3a4e9ef51117f54d888da01f2bbe\"\n+  integrity sha512-pC0uMkhLaHm11ZSJULfOBqV4tIZkx87ZLvbbQYunNixAAvjnC+snJCg0XQXn9VIsttVsbZP/H/ewzgsd5fxKXw==\n+  dependencies:\n+    loose-envify \"^1.1.0\"\n+    object-assign \"^4.1.1\"\n+    prop-types \"^15.6.2\"\n+    scheduler \"^0.13.6\"\n+\n+read-pkg-up@^4.0.0:\n+  version \"4.0.0\"\n+  resolved \"https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-4.0.0.tgz#1b221c6088ba7799601c808f91161c66e58f8978\"\n+  integrity sha512-6etQSH7nJGsK0RbG/2TeDzZFa8shjQ1um+SwQQ5cwKy0dhSXdOncEhb1CPpvQG4h7FyOV6EB6YlV0yJvZQNAkA==\n+  dependencies:\n+    find-up \"^3.0.0\"\n+    read-pkg \"^3.0.0\"\n+\n+read-pkg@^3.0.0:\n+  version \"3.0.0\"\n+  resolved \"https://registry.yarnpkg.com/read-pkg/-/read-pkg-3.0.0.tgz#9cbc686978fee65d16c00e2b19c237fcf6e38389\"\n+  integrity sha1-nLxoaXj+5l0WwA4rGcI3/Pbjg4k=\n+  dependencies:\n+    load-json-file \"^4.0.0\"\n+    normalize-package-data \"^2.3.2\"\n+    path-type \"^3.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+readable-stream@^3.1.1:\n+  version \"3.3.0\"\n+  resolved \"https://registry.yarnpkg.com/readable-stream/-/readable-stream-3.3.0.tgz#cb8011aad002eb717bf040291feba8569c986fb9\"\n+  integrity sha512-EsI+s3k3XsW+fU8fQACLN59ky34AZ14LoeVZpYwmZvldCFo0r0gnelwF2TcMjLor/BTL5aDJVBMkss0dthToPw==\n+  dependencies:\n+    inherits \"^2.0.3\"\n+    string_decoder \"^1.1.1\"\n+    util-deprecate \"^1.0.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+realpath-native@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/realpath-native/-/realpath-native-1.1.0.tgz#2003294fea23fb0672f2476ebe22fcf498a2d65c\"\n+  integrity sha512-wlgPA6cCIIg9gKz0fgAPjnzh4yR/LnXovwuo9hvyGvx3h8nX4+/iLZplfUWasXpqD8BdnGnP5njOFjkUwPzvjA==\n+  dependencies:\n+    util.promisify \"^1.0.0\"\n+\n+reflect.ownkeys@^0.2.0:\n+  version \"0.2.0\"\n+  resolved \"https://registry.yarnpkg.com/reflect.ownkeys/-/reflect.ownkeys-0.2.0.tgz#749aceec7f3fdf8b63f927a04809e90c5c0b3460\"\n+  integrity sha1-dJrO7H8/34tj+SegSAnpDFwLNGA=\n+\n",
            "-": ""
          },
          {
            "+": "+request-promise-core@1.1.2:\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/request-promise-core/-/request-promise-core-1.1.2.tgz#339f6aababcafdb31c799ff158700336301d3346\"\n+  integrity sha512-UHYyq1MO8GsefGEt7EprS8UrXsm1TxEvFUX1IMTuSLU2Rh7fTIdFtl8xD7JiEYiWU2dl+NYAjCTksTehQUxPag==\n+  dependencies:\n+    lodash \"^4.17.11\"\n+\n+request-promise-native@^1.0.5:\n+  version \"1.0.7\"\n+  resolved \"https://registry.yarnpkg.com/request-promise-native/-/request-promise-native-1.0.7.tgz#a49868a624bdea5069f1251d0a836e0d89aa2c59\"\n+  integrity sha512-rIMnbBdgNViL37nZ1b3L/VfPOpSi0TqVDQPAvO6U14lMzOLrt5nilxCQqtDKhZeDiW0/hkCXGoQjhgJd/tCh6w==\n+  dependencies:\n+    request-promise-core \"1.1.2\"\n+    stealthy-require \"^1.1.1\"\n+    tough-cookie \"^2.3.3\"\n+\n+request@^2.87.0:\n+  version \"2.88.0\"\n+  resolved \"https://registry.yarnpkg.com/request/-/request-2.88.0.tgz#9c2fca4f7d35b592efe57c7f0a55e81052124fef\"\n+  integrity sha512-NAqBSrijGLZdM0WZNsInLJpkJokL72XYjUpnB0iwsRgxh7dB6COrHnTBNwN0E+lHDAJzu7kLAkDeY08z2/A0hg==\n+  dependencies:\n+    aws-sign2 \"~0.7.0\"\n+    aws4 \"^1.8.0\"\n+    caseless \"~0.12.0\"\n+    combined-stream \"~1.0.6\"\n+    extend \"~3.0.2\"\n+    forever-agent \"~0.6.1\"\n+    form-data \"~2.3.2\"\n+    har-validator \"~5.1.0\"\n+    http-signature \"~1.2.0\"\n+    is-typedarray \"~1.0.0\"\n+    isstream \"~0.1.2\"\n+    json-stringify-safe \"~5.0.1\"\n+    mime-types \"~2.1.19\"\n+    oauth-sign \"~0.9.0\"\n+    performance-now \"^2.1.0\"\n+    qs \"~6.5.2\"\n+    safe-buffer \"^5.1.2\"\n+    tough-cookie \"~2.4.3\"\n+    tunnel-agent \"^0.6.0\"\n+    uuid \"^3.3.2\"\n+\n+require-directory@^2.1.1:\n+  version \"2.1.1\"\n+  resolved \"https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42\"\n+  integrity sha1-jGStX9MNqxyXbiNE/+f3kqam30I=\n+\n+require-main-filename@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-1.0.1.tgz#97f717b69d48784f5f526a6c5aa8ffdda055a4d1\"\n+  integrity sha1-l/cXtp1IeE9fUmpsWqj/3aBVpNE=\n+\n+resolve-cwd@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/resolve-cwd/-/resolve-cwd-2.0.0.tgz#00a9f7387556e27038eae232caa372a6a59b665a\"\n+  integrity sha1-AKn3OHVW4nA46uIyyqNypqWbZlo=\n+  dependencies:\n+    resolve-from \"^3.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+resolve@1.1.7:\n+  version \"1.1.7\"\n+  resolved \"https://registry.yarnpkg.com/resolve/-/resolve-1.1.7.tgz#203114d82ad2c5ed9e8e0411b3932875e889e97b\"\n+  integrity sha1-IDEU2CrSxe2ejgQRs5ModeiJ6Xs=\n+\n",
            "-": ""
          },
          {
            "+": "+rst-selector-parser@^2.2.3:\n+  version \"2.2.3\"\n+  resolved \"https://registry.yarnpkg.com/rst-selector-parser/-/rst-selector-parser-2.2.3.tgz#81b230ea2fcc6066c89e3472de794285d9b03d91\"\n+  integrity sha1-gbIw6i/MYGbInjRy3nlChdmwPZE=\n+  dependencies:\n+    lodash.flattendeep \"^4.4.0\"\n+    nearley \"^2.7.10\"\n+\n+rsvp@^4.8.4:\n+  version \"4.8.4\"\n+  resolved \"https://registry.yarnpkg.com/rsvp/-/rsvp-4.8.4.tgz#b50e6b34583f3dd89329a2f23a8a2be072845911\"\n+  integrity sha512-6FomvYPfs+Jy9TfXmBpBuMWNH94SgCsZmJKcanySzgNNP6LjWxBvyLTa9KaMfDDM5oxRfrKDB0r/qeRsLwnBfA==\n+\n",
            "-": ""
          },
          {
            "+": "+\"safer-buffer@>= 2.1.2 < 3\", safer-buffer@^2.0.2, safer-buffer@^2.1.0, safer-buffer@~2.1.0:\n",
            "-": "-\"safer-buffer@>= 2.1.2 < 3\":\n"
          },
          {
            "+": "+sane@^4.0.3:\n+  version \"4.1.0\"\n+  resolved \"https://registry.yarnpkg.com/sane/-/sane-4.1.0.tgz#ed881fd922733a6c461bc189dc2b6c006f3ffded\"\n+  integrity sha512-hhbzAgTIX8O7SHfp2c8/kREfEn4qO/9q8C9beyY6+tvZ87EpoZ3i1RIEvp27YBswnNbY9mWd6paKVmKbAgLfZA==\n+  dependencies:\n+    \"@cnakazawa/watch\" \"^1.0.3\"\n+    anymatch \"^2.0.0\"\n+    capture-exit \"^2.0.0\"\n+    exec-sh \"^0.3.2\"\n+    execa \"^1.0.0\"\n+    fb-watchman \"^2.0.0\"\n+    micromatch \"^3.1.4\"\n+    minimist \"^1.1.1\"\n+    walker \"~1.0.5\"\n+\n",
            "-": ""
          },
          {
            "+": "+scheduler@^0.13.6:\n+  version \"0.13.6\"\n+  resolved \"https://registry.yarnpkg.com/scheduler/-/scheduler-0.13.6.tgz#466a4ec332467b31a91b9bf74e5347072e4cd889\"\n+  integrity sha512-IWnObHt413ucAYKsD9J1QShUKkbKLQQHdxRyw73sw4FN26iWr3DY/H34xGPe4nmL1DwXyWmSWmMrA9TfQbE/XQ==\n+  dependencies:\n+    loose-envify \"^1.1.0\"\n+    object-assign \"^4.1.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+set-blocking@^2.0.0, set-blocking@~2.0.0:\n",
            "-": "-set-blocking@~2.0.0:\n"
          },
          {
            "+": "+shellwords@^0.1.1:\n+  version \"0.1.1\"\n+  resolved \"https://registry.yarnpkg.com/shellwords/-/shellwords-0.1.1.tgz#d6b9181c1a48d397324c84871efbcfc73fc0654b\"\n+  integrity sha512-vFwSUfQvqybiICwZY5+DAWIPLKsWO31Q91JSKl3UYv+K5c2QRPzn0qzec6QPu1Qc9eHYItiP3NdJqNVqetYAww==\n+\n",
            "-": ""
          },
          {
            "+": "+sisteransi@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/sisteransi/-/sisteransi-1.0.0.tgz#77d9622ff909080f1c19e5f4a1df0c1b0a27b88c\"\n+  integrity sha512-N+z4pHB4AmUv0SjveWRd6q1Nj5w62m5jodv+GD8lvmbY/83T/rpbJGZOnK5T149OldDj4Db07BSv9xY4K6NTPQ==\n+\n",
            "-": ""
          },
          {
            "+": "+source-map-support@^0.5.6, source-map-support@~0.5.10:\n",
            "-": "-source-map-support@~0.5.10:\n"
          },
          {
            "+": "+sshpk@^1.7.0:\n+  version \"1.16.1\"\n+  resolved \"https://registry.yarnpkg.com/sshpk/-/sshpk-1.16.1.tgz#fb661c0bef29b39db40769ee39fa70093d6f6877\"\n+  integrity sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==\n+  dependencies:\n+    asn1 \"~0.2.3\"\n+    assert-plus \"^1.0.0\"\n+    bcrypt-pbkdf \"^1.0.0\"\n+    dashdash \"^1.12.0\"\n+    ecc-jsbn \"~0.1.1\"\n+    getpass \"^0.1.1\"\n+    jsbn \"~0.1.0\"\n+    safer-buffer \"^2.0.2\"\n+    tweetnacl \"~0.14.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+stack-utils@^1.0.1:\n+  version \"1.0.2\"\n+  resolved \"https://registry.yarnpkg.com/stack-utils/-/stack-utils-1.0.2.tgz#33eba3897788558bebfc2db059dc158ec36cebb8\"\n+  integrity sha512-MTX+MeG5U994cazkjd/9KNAapsHnibjMLnfXodlkXw76JEea0UiNzrqidzo1emMwk7w5Qhc9jd4Bn9TBb1MFwA==\n+\n",
            "-": ""
          },
          {
            "+": "+stealthy-require@^1.1.1:\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/stealthy-require/-/stealthy-require-1.1.1.tgz#35b09875b4ff49f26a777e509b3090a3226bf24b\"\n+  integrity sha1-NbCYdbT/SfJqd35QmzCQoyJr8ks=\n+\n",
            "-": ""
          },
          {
            "+": "+string-length@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/string-length/-/string-length-2.0.0.tgz#d40dbb686a3ace960c1cffca562bf2c45f8363ed\"\n+  integrity sha1-1A27aGo6zpYMHP/KVivyxF+DY+0=\n+  dependencies:\n+    astral-regex \"^1.0.0\"\n+    strip-ansi \"^4.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+\"string-width@^1.0.2 || 2\", string-width@^2.0.0, string-width@^2.1.1:\n",
            "-": "-\"string-width@^1.0.2 || 2\", string-width@^2.1.1:\n"
          },
          {
            "+": "+string.prototype.trim@^1.1.2:\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/string.prototype.trim/-/string.prototype.trim-1.1.2.tgz#d04de2c89e137f4d7d206f086b5ed2fae6be8cea\"\n+  integrity sha1-0E3iyJ4Tf019IG8Ia17S+ua+jOo=\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    es-abstract \"^1.5.0\"\n+    function-bind \"^1.0.2\"\n+\n+string_decoder@^1.0.0, string_decoder@^1.1.1:\n",
            "-": "-string_decoder@^1.0.0:\n"
          },
          {
            "+": "+strip-ansi@^5.0.0:\n+  version \"5.2.0\"\n+  resolved \"https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-5.2.0.tgz#8c9a536feb6afc962bdfa5b104a5091c1ad9c0ae\"\n+  integrity sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==\n+  dependencies:\n+    ansi-regex \"^4.1.0\"\n+\n+strip-bom@^3.0.0:\n+  version \"3.0.0\"\n+  resolved \"https://registry.yarnpkg.com/strip-bom/-/strip-bom-3.0.0.tgz#2334c18e9c759f7bdd56fdef7e9ae3d588e68ed3\"\n+  integrity sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM=\n+\n",
            "-": ""
          },
          {
            "+": "+supports-color@^6.0.0, supports-color@^6.1.0:\n+  version \"6.1.0\"\n+  resolved \"https://registry.yarnpkg.com/supports-color/-/supports-color-6.1.0.tgz#0764abc69c63d5ac842dd4867e8d025e880df8f3\"\n+  integrity sha512-qe1jfm1Mg7Nq/NSh6XE24gPXROEVsWHxC1LIx//XNlD9iw7YZQGjZNjYN7xGaEG6iKdA8EtNFW6R0gjnVXp+wQ==\n+  dependencies:\n+    has-flag \"^3.0.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+symbol-tree@^3.2.2:\n+  version \"3.2.2\"\n+  resolved \"https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.2.tgz#ae27db38f660a7ae2e1c3b7d1bc290819b8519e6\"\n+  integrity sha1-rifbOPZgp64uHDt9G8KQgZuFGeY=\n+\n",
            "-": ""
          },
          {
            "+": "+test-exclude@^5.0.0:\n+  version \"5.1.0\"\n+  resolved \"https://registry.yarnpkg.com/test-exclude/-/test-exclude-5.1.0.tgz#6ba6b25179d2d38724824661323b73e03c0c1de1\"\n+  integrity sha512-gwf0S2fFsANC55fSeSqpb8BYk6w3FDvwZxfNjeF6FRgvFa43r+7wRiA/Q0IxoRU37wB/LE8IQ4221BsNucTaCA==\n+  dependencies:\n+    arrify \"^1.0.1\"\n+    minimatch \"^3.0.4\"\n+    read-pkg-up \"^4.0.0\"\n+    require-main-filename \"^1.0.1\"\n+\n+throat@^4.0.0:\n+  version \"4.1.0\"\n+  resolved \"https://registry.yarnpkg.com/throat/-/throat-4.1.0.tgz#89037cbc92c56ab18926e6ba4cbb200e15672a6a\"\n+  integrity sha1-iQN8vJLFarGJJua6TLsgDhVnKmo=\n+\n",
            "-": ""
          },
          {
            "+": "+tmpl@1.0.x:\n+  version \"1.0.4\"\n+  resolved \"https://registry.yarnpkg.com/tmpl/-/tmpl-1.0.4.tgz#23640dd7b42d00433911140820e5cf440e521dd1\"\n+  integrity sha1-I2QN17QtAEM5ERQIIOXPRA5SHdE=\n+\n",
            "-": ""
          },
          {
            "+": "+tough-cookie@^2.3.3, tough-cookie@^2.3.4:\n+  version \"2.5.0\"\n+  resolved \"https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.5.0.tgz#cd9fb2a0aa1d5a12b473bd9fb96fa3dcff65ade2\"\n+  integrity sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==\n+  dependencies:\n+    psl \"^1.1.28\"\n+    punycode \"^2.1.1\"\n+\n+tough-cookie@~2.4.3:\n+  version \"2.4.3\"\n+  resolved \"https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.4.3.tgz#53f36da3f47783b0925afa06ff9f3b165280f781\"\n+  integrity sha512-Q5srk/4vDM54WJsJio3XNn6K2sCG+CQ8G5Wz6bZhRZoAe/+TxjWB/GlFAnYEbkYVlON9FMk/fE3h2RLpPXo4lQ==\n+  dependencies:\n+    psl \"^1.1.24\"\n+    punycode \"^1.4.1\"\n+\n+tr46@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/tr46/-/tr46-1.0.1.tgz#a8b13fd6bfd2489519674ccde55ba3693b706d09\"\n+  integrity sha1-qLE/1r/SSJUZZ0zN5VujaTtwbQk=\n+  dependencies:\n+    punycode \"^2.1.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+tunnel-agent@^0.6.0:\n+  version \"0.6.0\"\n+  resolved \"https://registry.yarnpkg.com/tunnel-agent/-/tunnel-agent-0.6.0.tgz#27a5dea06b36b04a0a9966774b290868f0fc40fd\"\n+  integrity sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=\n+  dependencies:\n+    safe-buffer \"^5.0.1\"\n+\n+tweetnacl@^0.14.3, tweetnacl@~0.14.0:\n+  version \"0.14.5\"\n+  resolved \"https://registry.yarnpkg.com/tweetnacl/-/tweetnacl-0.14.5.tgz#5ae68177f192d4456269d108afa93ff8743f4f64\"\n+  integrity sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=\n+\n+type-check@~0.3.2:\n+  version \"0.3.2\"\n+  resolved \"https://registry.yarnpkg.com/type-check/-/type-check-0.3.2.tgz#5884cab512cf1d355e3fb784f30804b2b520db72\"\n+  integrity sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=\n+  dependencies:\n+    prelude-ls \"~1.1.2\"\n+\n",
            "-": ""
          },
          {
            "+": "+uglify-js@^3.1.4:\n+  version \"3.5.4\"\n+  resolved \"https://registry.yarnpkg.com/uglify-js/-/uglify-js-3.5.4.tgz#4a64d57f590e20a898ba057f838dcdfb67a939b9\"\n+  integrity sha512-GpKo28q/7Bm5BcX9vOu4S46FwisbPbAmkkqPnGIpKvKTM96I85N6XHQV+k4I6FA2wxgLhcsSyHoNhzucwCflvA==\n+  dependencies:\n+    commander \"~2.20.0\"\n+    source-map \"~0.6.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+util-deprecate@^1.0.1, util-deprecate@~1.0.1:\n",
            "-": "-util-deprecate@~1.0.1:\n"
          },
          {
            "+": "+util.promisify@^1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/util.promisify/-/util.promisify-1.0.0.tgz#440f7165a459c9a16dc145eb8e72f35687097030\"\n+  integrity sha512-i+6qA2MPhvoKLuxnJNpXAGhg7HphQOSUq2LKMZD0m15EiskXUkMvKdF4Uui0WYeCUGea+o2cw/ZuwehtfsrNkA==\n+  dependencies:\n+    define-properties \"^1.1.2\"\n+    object.getownpropertydescriptors \"^2.0.3\"\n+\n",
            "-": ""
          },
          {
            "+": "+uuid@^3.3.2:\n+  version \"3.3.2\"\n+  resolved \"https://registry.yarnpkg.com/uuid/-/uuid-3.3.2.tgz#1b4af4955eb3077c501c23872fc6513811587131\"\n+  integrity sha512-yXJmeNaw3DnnKAOKJE51sL/ZaYfWJRl1pK9dr19YFCu0ObS231AB1/LbqTKRAQ5kw8A90rA6fr4riOUpTZvQZA==\n+\n",
            "-": ""
          },
          {
            "+": "+verror@1.10.0:\n+  version \"1.10.0\"\n+  resolved \"https://registry.yarnpkg.com/verror/-/verror-1.10.0.tgz#3a105ca17053af55d6e270c1f8288682e18da400\"\n+  integrity sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=\n+  dependencies:\n+    assert-plus \"^1.0.0\"\n+    core-util-is \"1.0.2\"\n+    extsprintf \"^1.2.0\"\n+\n",
            "-": ""
          },
          {
            "+": "+w3c-hr-time@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.1.tgz#82ac2bff63d950ea9e3189a58a65625fedf19045\"\n+  integrity sha1-gqwr/2PZUOqeMYmlimViX+3xkEU=\n+  dependencies:\n+    browser-process-hrtime \"^0.1.2\"\n+\n+wait-for-expect@^1.1.0:\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/wait-for-expect/-/wait-for-expect-1.1.1.tgz#9cd10e07d52810af9e0aaf509872e38f3c3d81ae\"\n+  integrity sha512-vd9JOqqEcBbCDhARWhW85ecjaEcfBLuXgVBqatfS3iw6oU4kzAcs+sCNjF+TC9YHPImCW7ypsuQc+htscIAQCw==\n+\n+walker@^1.0.7, walker@~1.0.5:\n+  version \"1.0.7\"\n+  resolved \"https://registry.yarnpkg.com/walker/-/walker-1.0.7.tgz#2f7f9b8fd10d677262b18a884e28d19618e028fb\"\n+  integrity sha1-L3+bj9ENZ3JisYqITijRlhjgKPs=\n+  dependencies:\n+    makeerror \"1.0.x\"\n+\n",
            "-": ""
          },
          {
            "+": "+webidl-conversions@^4.0.2:\n+  version \"4.0.2\"\n+  resolved \"https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-4.0.2.tgz#a855980b1f0b6b359ba1d5d9fb39ae941faa63ad\"\n+  integrity sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==\n+\n",
            "-": ""
          },
          {
            "+": "+whatwg-encoding@^1.0.1, whatwg-encoding@^1.0.3:\n+  version \"1.0.5\"\n+  resolved \"https://registry.yarnpkg.com/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz#5abacf777c32166a51d085d6b4f3e7d27113ddb0\"\n+  integrity sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==\n+  dependencies:\n+    iconv-lite \"0.4.24\"\n+\n+whatwg-mimetype@^2.1.0, whatwg-mimetype@^2.2.0:\n+  version \"2.3.0\"\n+  resolved \"https://registry.yarnpkg.com/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz#3d4b1e0312d2079879f826aff18dbeeca5960fbf\"\n+  integrity sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==\n+\n+whatwg-url@^6.4.1:\n+  version \"6.5.0\"\n+  resolved \"https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-6.5.0.tgz#f2df02bff176fd65070df74ad5ccbb5a199965a8\"\n+  integrity sha512-rhRZRqx/TLJQWUpQ6bmrt2UV4f0HCQ463yQuONJqC6fO2VoEb1pTYddbe59SkYq87aoM5A3bdhMZiUiVws+fzQ==\n+  dependencies:\n+    lodash.sortby \"^4.7.0\"\n+    tr46 \"^1.0.1\"\n+    webidl-conversions \"^4.0.2\"\n+\n+whatwg-url@^7.0.0:\n+  version \"7.0.0\"\n+  resolved \"https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-7.0.0.tgz#fde926fa54a599f3adf82dff25a9f7be02dc6edd\"\n+  integrity sha512-37GeVSIJ3kn1JgKyjiYNmSLP1yzbpb29jdmwBSgkD9h40/hyrR/OifpVUndji3tmwGgD8qpw7iQu3RSbCrBpsQ==\n+  dependencies:\n+    lodash.sortby \"^4.7.0\"\n+    tr46 \"^1.0.1\"\n+    webidl-conversions \"^4.0.2\"\n+\n+which-module@^2.0.0:\n+  version \"2.0.0\"\n+  resolved \"https://registry.yarnpkg.com/which-module/-/which-module-2.0.0.tgz#d9ef07dce77b9902b8a3a8fa4b31c3e3f7e6e87a\"\n+  integrity sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=\n+\n+which@^1.2.10, which@^1.2.9, which@^1.3.0:\n",
            "-": "-which@^1.2.10, which@^1.2.9:\n"
          },
          {
            "+": "+wordwrap@~0.0.2:\n+  version \"0.0.3\"\n+  resolved \"https://registry.yarnpkg.com/wordwrap/-/wordwrap-0.0.3.tgz#a3d5da6cd5c0bc0008d37234bbaf1bed63059107\"\n+  integrity sha1-o9XabNXAvAAI03I0u68b7WMFkQc=\n+\n+wordwrap@~1.0.0:\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/wordwrap/-/wordwrap-1.0.0.tgz#27584810891456a4171c8d0226441ade90cbcaeb\"\n+  integrity sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=\n+\n",
            "-": ""
          },
          {
            "+": "+wrap-ansi@^2.0.0:\n+  version \"2.1.0\"\n+  resolved \"https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-2.1.0.tgz#d8fc3d284dd05794fe84973caecdd1cf824fdd85\"\n+  integrity sha1-2Pw9KE3QV5T+hJc8rs3Rz4JP3YU=\n+  dependencies:\n+    string-width \"^1.0.1\"\n+    strip-ansi \"^3.0.1\"\n+\n",
            "-": ""
          },
          {
            "+": "+write-file-atomic@2.4.1:\n+  version \"2.4.1\"\n+  resolved \"https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-2.4.1.tgz#d0b05463c188ae804396fd5ab2a370062af87529\"\n+  integrity sha512-TGHFeZEZMnv+gBFRfjAcxL5bPHrsGKtnb4qsFAws7/vlh+QfwAaySIw4AXP9ZskTTh5GWu3FLuJhsWVdiJPGvg==\n+  dependencies:\n+    graceful-fs \"^4.1.11\"\n+    imurmurhash \"^0.1.4\"\n+    signal-exit \"^3.0.2\"\n+\n+ws@^5.2.0:\n+  version \"5.2.2\"\n+  resolved \"https://registry.yarnpkg.com/ws/-/ws-5.2.2.tgz#dffef14866b8e8dc9133582514d1befaf96e980f\"\n+  integrity sha512-jaHFD6PFv6UgoIVda6qZllptQsMlDEJkTQcybzzXDYM1XO9Y8em691FGMPmM46WGyLU4z9KMgQN+qrux/nhlHA==\n+  dependencies:\n+    async-limiter \"~1.0.0\"\n+\n+xml-name-validator@^3.0.0:\n+  version \"3.0.0\"\n+  resolved \"https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-3.0.0.tgz#6ae73e06de4d8c6e47f9fb181f78d648ad457c6a\"\n+  integrity sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==\n+\n",
            "-": ""
          },
          {
            "+": "+\"y18n@^3.2.1 || ^4.0.0\", y18n@^4.0.0:\n",
            "-": "-y18n@^4.0.0:\n"
          },
          {
            "+": "+yargs-parser@^11.1.1:\n+  version \"11.1.1\"\n+  resolved \"https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-11.1.1.tgz#879a0865973bca9f6bab5cbdf3b1c67ec7d3bcf4\"\n+  integrity sha512-C6kB/WJDiaxONLJQnF8ccx9SEeoTTLek8RVbaOIsrAUS8VrBEXfmeSnCZxygc+XC2sNMBIwOOnfcxiynjHsVSQ==\n+  dependencies:\n+    camelcase \"^5.0.0\"\n+    decamelize \"^1.2.0\"\n+\n+yargs@^12.0.2:\n+  version \"12.0.5\"\n+  resolved \"https://registry.yarnpkg.com/yargs/-/yargs-12.0.5.tgz#05f5997b609647b64f66b81e3b4b10a368e7ad13\"\n+  integrity sha512-Lhz8TLaYnxq/2ObqHDql8dX8CJi97oHxrjUcYtzKbbykPtVW9WB+poxI+NM2UIzsMgNCZTIf0AQwsjK5yMAqZw==\n+  dependencies:\n+    cliui \"^4.0.0\"\n+    decamelize \"^1.2.0\"\n+    find-up \"^3.0.0\"\n+    get-caller-file \"^1.0.1\"\n+    os-locale \"^3.0.0\"\n+    require-directory \"^2.1.1\"\n+    require-main-filename \"^1.0.1\"\n+    set-blocking \"^2.0.0\"\n+    string-width \"^2.0.0\"\n+    which-module \"^2.0.0\"\n+    y18n \"^3.2.1 || ^4.0.0\"\n+    yargs-parser \"^11.1.1\"\n+\n",
            "-": ""
          }
        ]
      },
      "numOfFiles": 7,
      "numOfChanges": 177,
      "qualityScore": 28
    },
    {
      "formatStyle": "simple-text-style",
      "type": "remove",
      "sha": "a28f414182cb6b5c8557d8732c57c48020800046",
      "url": "https://github.com/pmndrs/zustand/commit/a28f414182cb6b5c8557d8732c57c48020800046",
      "message": "remove babel runtime, react-dom, use obj.assign",
      "author": {
        "name": "Paul Henschel",
        "email": "drcmda@gmail.com",
        "date": "2019-04-10T22:44:50Z",
        "avatar_url": "https://avatars.githubusercontent.com/u/2223602?v=4"
      },
      "diffObj": {
        "a/.size-snapshot.json": [
          {
            "+": "+    \"bundled\": 1904,\n+    \"minified\": 852,\n+    \"gzipped\": 408,\n",
            "-": "-    \"bundled\": 2008,\n-    \"minified\": 753,\n-    \"gzipped\": 416,\n"
          },
          {
            "+": "+        \"code\": 14,\n+        \"import_statements\": 14\n",
            "-": "-        \"code\": 57,\n-        \"import_statements\": 57\n"
          },
          {
            "+": "+        \"code\": 998\n",
            "-": "-        \"code\": 1074\n"
          },
          {
            "+": "+    \"bundled\": 2692,\n+    \"minified\": 1207,\n+    \"gzipped\": 482\n",
            "-": "-    \"bundled\": 2578,\n-    \"minified\": 1076,\n-    \"gzipped\": 475\n"
          }
        ],
        "a/index.js": [
          {
            "-": "-  let listeners = []\n",
            "+": ""
          },
          {
            "+": "+    listeners: [],\n",
            "-": ""
          },
          {
            "+": "+        if (typeof merge === 'function') merge = merge(state.current)\n+        state.current = Object.assign({}, state.current, merge)\n+        state.listeners.forEach(listener => listener(state.current))\n",
            "-": "-        if (typeof merge === 'function') {\n-          merge = merge(state.current)\n-        }\n-        state.current = { ...state.current, ...merge }\n-        listeners.forEach(listener => listener(state.current))\n"
          },
          {
            "+": "+      let selected = selector ? selector(state.current) : state.current\n",
            "-": "-      let selected = selector ? selector(state.current) : { ...state.current }\n"
          },
          {
            "+": "+          let selected = selector ? selector(state.current) : state.current\n",
            "-": "-          let selected = selector ? selector(state.current) : { ...state.current }\n"
          },
          {
            "+": "+          if (\n+            sliceRef.current !== selected &&\n+            typeof selected === 'object' &&\n+            !Array.isArray(selected)\n+          ) {\n",
            "-": "-          if (sliceRef.current !== selected && typeof selected === 'object' && !Array.isArray(selected)) {\n"
          },
          {
            "+": "+              (acc, [key, value]) =>\n+                sliceRef.current[key] !== value\n+                  ? Object.assign({}, acc, { [key]: value })\n+                  : acc,\n",
            "-": "-              (acc, [key, value]) => (sliceRef.current[key] !== value ? { ...acc, [key]: value } : acc),\n"
          },
          {
            "+": "+          // Refresh local slice, functional initial b/c selected itself could be a function\n+          if (sliceRef.current !== selected) set(() => selected)\n",
            "-": "-          // Using functional initial b/c selected itself could be a function\n-          if (sliceRef.current !== selected) {\n-            // Refresh local slice\n-            set(() => selected)\n-          }\n"
          },
          {
            "+": "+        state.listeners.push(ping)\n+        return () => (state.listeners = state.listeners.filter(i => i !== ping))\n",
            "-": "-        listeners.push(ping)\n-        return () => (listeners = listeners.filter(i => i !== ping))\n"
          },
          {
            "+": "+        state.listeners.push(fn)\n+        return () => (state.listeners = state.listeners.filter(i => i !== fn))\n",
            "-": "-        listeners.push(fn)\n-        return () => (listeners = listeners.filter(i => i !== fn))\n"
          },
          {
            "+": "+      destroy: () => ((state.listeners = []), (state.current = {})),\n",
            "-": "-      destroy: () => {\n-        listeners = []\n-        state.current = {}\n-      },\n"
          }
        ],
        "a/package.json": [
          {
            "+": "+  \"description\": \"🐻 Bear necessities for state management in React\",\n",
            "-": "-  \"description\": \"⛑ Comfy state management in React\",\n"
          },
          {
            "+": "+    \"printWidth\": 80\n",
            "-": "-    \"printWidth\": 120\n"
          },
          {
            "-": "-  \"dependencies\": {\n-    \"@babel/runtime\": \"^7.4.3\"\n-  },\n",
            "+": ""
          },
          {
            "+": "+    \"react\": \">=16.8\"\n",
            "-": "-    \"react\": \">=16.8\",\n-    \"react-dom\": \">=16.8\"\n"
          }
        ],
        "a/rollup.config.js": [
          {
            "-": "-  runtimeHelpers: true,\n",
            "+": ""
          },
          {
            "-": "-  plugins: [['@babel/transform-runtime', { regenerator: false, useESModules }]],\n",
            "+": ""
          },
          {
            "+": "+        babel(\n+          getBabelOptions({ useESModules: true }, 'last 2 chrome versions')\n+        ),\n",
            "-": "-        babel(getBabelOptions({ useESModules: true }, '>1%, not dead, not ie 11, not op_mini all')),\n"
          },
          {
            "+": "+      plugins: [\n+        babel(getBabelOptions({ useESModules: false })),\n+        sizeSnapshot(),\n+        resolve({ extensions }),\n+      ],\n",
            "-": "-      plugins: [babel(getBabelOptions({ useESModules: false })), sizeSnapshot(), resolve({ extensions })],\n"
          }
        ]
      },
      "numOfFiles": 4,
      "numOfChanges": 23,
      "qualityScore": 21
    }
  ]
}
